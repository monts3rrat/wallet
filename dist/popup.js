/*! For license information please see popup.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={20:(e,t,n)=>{var r=n(540),a=Symbol.for("react.element"),s=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,o=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,s={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)i.call(t,r)&&!l.hasOwnProperty(r)&&(s[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===s[r]&&(s[r]=t[r]);return{$$typeof:a,type:e,key:u,ref:c,props:s,_owner:o.current}}t.Fragment=s,t.jsx=u,t.jsxs=u},287:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),s=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),o=Symbol.for("react.provider"),l=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),h=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||p}function w(){}function b(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||p}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=y.prototype;var v=b.prototype=new w;v.constructor=b,g(v,y.prototype),v.isPureReactComponent=!0;var A=Array.isArray,E=Object.prototype.hasOwnProperty,k={current:null},x={key:!0,ref:!0,__self:!0,__source:!0};function N(e,t,r){var a,s={},i=null,o=null;if(null!=t)for(a in void 0!==t.ref&&(o=t.ref),void 0!==t.key&&(i=""+t.key),t)E.call(t,a)&&!x.hasOwnProperty(a)&&(s[a]=t[a]);var l=arguments.length-2;if(1===l)s.children=r;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];s.children=u}if(e&&e.defaultProps)for(a in l=e.defaultProps)void 0===s[a]&&(s[a]=l[a]);return{$$typeof:n,type:e,key:i,ref:o,props:s,_owner:k.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var C=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function R(e,t,a,s,i){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var l=!1;if(null===e)l=!0;else switch(o){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return i=i(l=e),e=""===s?"."+P(l,0):s,A(i)?(a="",null!=e&&(a=e.replace(C,"$&/")+"/"),R(i,t,a,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||l&&l.key===i.key?"":(""+i.key).replace(C,"$&/")+"/")+e)),t.push(i)),1;if(l=0,s=""===s?".":s+":",A(e))for(var u=0;u<e.length;u++){var c=s+P(o=e[u],u);l+=R(o,t,a,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=h&&e[h]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(o=e.next()).done;)l+=R(o=o.value,t,a,c=s+P(o,u++),i);else if("object"===o)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function I(e,t,n){if(null==e)return e;var r=[],a=0;return R(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function T(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var O={current:null},B={transition:null},L={ReactCurrentDispatcher:O,ReactCurrentBatchConfig:B,ReactCurrentOwner:k};function U(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:I,forEach:function(e,t,n){I(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return I(e,(function(){t++})),t},toArray:function(e){return I(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=a,t.Profiler=i,t.PureComponent=b,t.StrictMode=s,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.act=U,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=g({},e.props),s=e.key,i=e.ref,o=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,o=k.current),void 0!==t.key&&(s=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)E.call(t,u)&&!x.hasOwnProperty(u)&&(a[u]=void 0===t[u]&&void 0!==l?l[u]:t[u])}var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){l=Array(u);for(var c=0;c<u;c++)l[c]=arguments[c+2];a.children=l}return{$$typeof:n,type:e.type,key:s,ref:i,props:a,_owner:o}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},t.createElement=N,t.createFactory=function(e){var t=N.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=B.transition;B.transition={};try{e()}finally{B.transition=t}},t.unstable_act=U,t.useCallback=function(e,t){return O.current.useCallback(e,t)},t.useContext=function(e){return O.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return O.current.useDeferredValue(e)},t.useEffect=function(e,t){return O.current.useEffect(e,t)},t.useId=function(){return O.current.useId()},t.useImperativeHandle=function(e,t,n){return O.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return O.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return O.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return O.current.useMemo(e,t)},t.useReducer=function(e,t,n){return O.current.useReducer(e,t,n)},t.useRef=function(e){return O.current.useRef(e)},t.useState=function(e){return O.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return O.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return O.current.useTransition()},t.version="18.3.1"},338:(e,t,n)=>{var r=n(961);t.H=r.createRoot,r.hydrateRoot},463:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<s(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var o=2*(r+1)-1,l=e[o],u=o+1,c=e[u];if(0>s(l,n))u<a&&0>s(c,l)?(e[r]=c,e[u]=n,r=u):(e[r]=l,e[o]=n,r=o);else{if(!(u<a&&0>s(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function s(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var o=Date,l=o.now();t.unstable_now=function(){return o.now()-l}}var u=[],c=[],d=1,f=null,h=3,p=!1,g=!1,m=!1,y="function"==typeof setTimeout?setTimeout:null,w="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function v(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function A(e){if(m=!1,v(e),!g)if(null!==r(u))g=!0,B(E);else{var t=r(c);null!==t&&L(A,t.startTime-e)}}function E(e,n){g=!1,m&&(m=!1,w(S),S=-1),p=!0;var s=h;try{for(v(n),f=r(u);null!==f&&(!(f.expirationTime>n)||e&&!R());){var i=f.callback;if("function"==typeof i){f.callback=null,h=f.priorityLevel;var o=i(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof o?f.callback=o:f===r(u)&&a(u),v(n)}else a(u);f=r(u)}if(null!==f)var l=!0;else{var d=r(c);null!==d&&L(A,d.startTime-n),l=!1}return l}finally{f=null,h=s,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,x=!1,N=null,S=-1,C=5,P=-1;function R(){return!(t.unstable_now()-P<C)}function I(){if(null!==N){var e=t.unstable_now();P=e;var n=!0;try{n=N(!0,e)}finally{n?k():(x=!1,N=null)}}else x=!1}if("function"==typeof b)k=function(){b(I)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,O=T.port2;T.port1.onmessage=I,k=function(){O.postMessage(null)}}else k=function(){y(I,0)};function B(e){N=e,x||(x=!0,k())}function L(e,n){S=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){g||p||(g=!0,B(E))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return h},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(h){case 1:case 2:case 3:var t=3;break;default:t=h}var n=h;h=t;try{return e()}finally{h=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=h;h=e;try{return t()}finally{h=n}},t.unstable_scheduleCallback=function(e,a,s){var i=t.unstable_now();switch(s="object"==typeof s&&null!==s&&"number"==typeof(s=s.delay)&&0<s?i+s:i,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:s,expirationTime:o=s+o,sortIndex:-1},s>i?(e.sortIndex=s,n(c,e),null===r(u)&&e===r(c)&&(m?(w(S),S=-1):m=!0,L(A,s-i))):(e.sortIndex=o,n(u,e),g||p||(g=!0,B(E))),e},t.unstable_shouldYield=R,t.unstable_wrapCallback=function(e){var t=h;return function(){var n=h;h=t;try{return e.apply(this,arguments)}finally{h=n}}}},540:(e,t,n)=>{e.exports=n(287)},551:(e,t,n)=>{var r=n(540),a=n(982);function s(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,o={};function l(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(o[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h={},p={};function g(e,t,n,r,a,s,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=s,this.removeEmptyString=i}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function w(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=m.hasOwnProperty(t)?m[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(p,e)||!d.call(h,e)&&(f.test(e)?p[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,w);m[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,w);m[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,w);m[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var v=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,A=Symbol.for("react.element"),E=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),x=Symbol.for("react.strict_mode"),N=Symbol.for("react.profiler"),S=Symbol.for("react.provider"),C=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),R=Symbol.for("react.suspense"),I=Symbol.for("react.suspense_list"),T=Symbol.for("react.memo"),O=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var B=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var L=Symbol.iterator;function U(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=L&&e[L]||e["@@iterator"])?e:null}var F,D=Object.assign;function M(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var j=!1;function z(e,t){if(!e||j)return"";j=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),s=r.stack.split("\n"),i=a.length-1,o=s.length-1;1<=i&&0<=o&&a[i]!==s[o];)o--;for(;1<=i&&0<=o;i--,o--)if(a[i]!==s[o]){if(1!==i||1!==o)do{if(i--,0>--o||a[i]!==s[o]){var l="\n"+a[i].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=i&&0<=o);break}}}finally{j=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?M(e):""}function _(e){switch(e.tag){case 5:return M(e.type);case 16:return M("Lazy");case 13:return M("Suspense");case 19:return M("SuspenseList");case 0:case 2:case 15:return z(e.type,!1);case 11:return z(e.type.render,!1);case 1:return z(e.type,!0);default:return""}}function G(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case E:return"Portal";case N:return"Profiler";case x:return"StrictMode";case R:return"Suspense";case I:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case C:return(e.displayName||"Context")+".Consumer";case S:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case T:return null!==(t=e.displayName||null)?t:G(e.type)||"Memo";case O:t=e._payload,e=e._init;try{return G(e(t))}catch(e){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return G(t);case 8:return t===x?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function Q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=Q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,s=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,s.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function W(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function q(e,t){var n=t.checked;return D({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Y(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Z(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function $(e,t){Z(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function X(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&J(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(s(91));return D({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(s(92));if(te(n)){if(1<n.length)throw Error(s(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function se(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function oe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?oe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var he={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function ge(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||he.hasOwnProperty(e)&&he[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=ge(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(he).forEach((function(e){pe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),he[t]=he[e]}))}));var ye=D({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function we(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(s(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(s(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(s(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(s(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ve=null;function Ae(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,ke=null,xe=null;function Ne(e){if(e=ba(e)){if("function"!=typeof Ee)throw Error(s(280));var t=e.stateNode;t&&(t=Aa(t),Ee(e.stateNode,e.type,t))}}function Se(e){ke?xe?xe.push(e):xe=[e]:ke=e}function Ce(){if(ke){var e=ke,t=xe;if(xe=ke=null,Ne(e),t)for(e=0;e<t.length;e++)Ne(t[e])}}function Pe(e,t){return e(t)}function Re(){}var Ie=!1;function Te(e,t,n){if(Ie)return e(t,n);Ie=!0;try{return Pe(e,t,n)}finally{Ie=!1,(null!==ke||null!==xe)&&(Re(),Ce())}}function Oe(e,t){var n=e.stateNode;if(null===n)return null;var r=Aa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(s(231,t,typeof n));return n}var Be=!1;if(c)try{var Le={};Object.defineProperty(Le,"passive",{get:function(){Be=!0}}),window.addEventListener("test",Le,Le),window.removeEventListener("test",Le,Le)}catch(ce){Be=!1}function Ue(e,t,n,r,a,s,i,o,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Fe=!1,De=null,Me=!1,je=null,ze={onError:function(e){Fe=!0,De=e}};function _e(e,t,n,r,a,s,i,o,l){Fe=!1,De=null,Ue.apply(ze,arguments)}function Ge(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ve(e){if(Ge(e)!==e)throw Error(s(188))}function Qe(e){return e=function(e){var t=e.alternate;if(!t){if(null===(t=Ge(e)))throw Error(s(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return Ve(a),e;if(i===r)return Ve(a),t;i=i.sibling}throw Error(s(188))}if(n.return!==r.return)n=a,r=i;else{for(var o=!1,l=a.child;l;){if(l===n){o=!0,n=a,r=i;break}if(l===r){o=!0,r=a,n=i;break}l=l.sibling}if(!o){for(l=i.child;l;){if(l===n){o=!0,n=i,r=a;break}if(l===r){o=!0,r=i,n=a;break}l=l.sibling}if(!o)throw Error(s(189))}}if(n.alternate!==r)throw Error(s(190))}if(3!==n.tag)throw Error(s(188));return n.stateNode.current===n?e:t}(e),null!==e?Ke(e):null}function Ke(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ke(e);if(null!==t)return t;e=e.sibling}return null}var We=a.unstable_scheduleCallback,Je=a.unstable_cancelCallback,qe=a.unstable_shouldYield,Ye=a.unstable_requestPaint,Ze=a.unstable_now,$e=a.unstable_getCurrentPriorityLevel,Xe=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,st=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ot(e)/lt|0)|0},ot=Math.log,lt=Math.LN2,ut=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,s=e.pingedLanes,i=268435455&n;if(0!==i){var o=i&~a;0!==o?r=dt(o):0!==(s&=i)&&(r=dt(s))}else 0!==(i=n&~a)?r=dt(i):0!==s&&(r=dt(s));if(0===r)return 0;if(0!==t&&t!==r&&0===(t&a)&&((a=r&-r)>=(s=t&-t)||16===a&&4194240&s))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function ht(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function pt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gt(){var e=ut;return!(4194240&(ut<<=1))&&(ut=64),e}function mt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function wt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function vt(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var At,Et,kt,xt,Nt,St=!1,Ct=[],Pt=null,Rt=null,It=null,Tt=new Map,Ot=new Map,Bt=[],Lt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Ut(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":Rt=null;break;case"mouseover":case"mouseout":It=null;break;case"pointerover":case"pointerout":Tt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ot.delete(t.pointerId)}}function Ft(e,t,n,r,a,s){return null===e||e.nativeEvent!==s?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:s,targetContainers:[a]},null!==t&&null!==(t=ba(t))&&Et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Dt(e){var t=wa(e.target);if(null!==t){var n=Ge(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=He(n)))return e.blockedOn=t,void Nt(e.priority,(function(){kt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ba(n))&&Et(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);ve=r,n.target.dispatchEvent(r),ve=null,t.shift()}return!0}function jt(e,t,n){Mt(e)&&n.delete(t)}function zt(){St=!1,null!==Pt&&Mt(Pt)&&(Pt=null),null!==Rt&&Mt(Rt)&&(Rt=null),null!==It&&Mt(It)&&(It=null),Tt.forEach(jt),Ot.forEach(jt)}function _t(e,t){e.blockedOn===t&&(e.blockedOn=null,St||(St=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,zt)))}function Gt(e){function t(t){return _t(t,e)}if(0<Ct.length){_t(Ct[0],e);for(var n=1;n<Ct.length;n++){var r=Ct[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Pt&&_t(Pt,e),null!==Rt&&_t(Rt,e),null!==It&&_t(It,e),Tt.forEach(t),Ot.forEach(t),n=0;n<Bt.length;n++)(r=Bt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Bt.length&&null===(n=Bt[0]).blockedOn;)Dt(n),null===n.blockedOn&&Bt.shift()}var Ht=v.ReactCurrentBatchConfig,Vt=!0;function Qt(e,t,n,r){var a=bt,s=Ht.transition;Ht.transition=null;try{bt=1,Wt(e,t,n,r)}finally{bt=a,Ht.transition=s}}function Kt(e,t,n,r){var a=bt,s=Ht.transition;Ht.transition=null;try{bt=4,Wt(e,t,n,r)}finally{bt=a,Ht.transition=s}}function Wt(e,t,n,r){if(Vt){var a=qt(e,t,n,r);if(null===a)Vr(e,t,r,Jt,n),Ut(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Pt=Ft(Pt,e,t,n,r,a),!0;case"dragenter":return Rt=Ft(Rt,e,t,n,r,a),!0;case"mouseover":return It=Ft(It,e,t,n,r,a),!0;case"pointerover":var s=a.pointerId;return Tt.set(s,Ft(Tt.get(s)||null,e,t,n,r,a)),!0;case"gotpointercapture":return s=a.pointerId,Ot.set(s,Ft(Ot.get(s)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Ut(e,r),4&t&&-1<Lt.indexOf(e)){for(;null!==a;){var s=ba(a);if(null!==s&&At(s),null===(s=qt(e,t,n,r))&&Vr(e,t,r,Jt,n),s===a)break;a=s}null!==a&&r.stopPropagation()}else Vr(e,t,r,null,n)}}var Jt=null;function qt(e,t,n,r){if(Jt=null,null!==(e=wa(e=Ae(r))))if(null===(t=Ge(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Jt=e,null}function Yt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch($e()){case Xe:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Zt=null,$t=null,Xt=null;function en(){if(Xt)return Xt;var e,t,n=$t,r=n.length,a="value"in Zt?Zt.value:Zt.textContent,s=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[s-t];t++);return Xt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,s){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=s,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return D(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var sn,on,ln,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(un),dn=D({},un,{view:0,detail:0}),fn=an(dn),hn=D({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Nn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(sn=e.screenX-ln.screenX,on=e.screenY-ln.screenY):on=sn=0,ln=e),sn)},movementY:function(e){return"movementY"in e?e.movementY:on}}),pn=an(hn),gn=an(D({},hn,{dataTransfer:0})),mn=an(D({},dn,{relatedTarget:0})),yn=an(D({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=D({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(wn),vn=an(D({},un,{data:0})),An={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function Nn(){return xn}var Sn=D({},dn,{key:function(e){if(e.key){var t=An[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Nn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Cn=an(Sn),Pn=an(D({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Rn=an(D({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Nn})),In=an(D({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=D({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),On=an(Tn),Bn=[9,13,27,32],Ln=c&&"CompositionEvent"in window,Un=null;c&&"documentMode"in document&&(Un=document.documentMode);var Fn=c&&"TextEvent"in window&&!Un,Dn=c&&(!Ln||Un&&8<Un&&11>=Un),Mn=String.fromCharCode(32),jn=!1;function zn(e,t){switch(e){case"keyup":return-1!==Bn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function _n(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Gn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Qn(e,t,n,r){Se(r),0<(t=Kr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Kn=null,Wn=null;function Jn(e){Mr(e,0)}function qn(e){if(W(va(e)))return e}function Yn(e,t){if("change"===e)return t}var Zn=!1;if(c){var $n;if(c){var Xn="oninput"in document;if(!Xn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Xn="function"==typeof er.oninput}$n=Xn}else $n=!1;Zn=$n&&(!document.documentMode||9<document.documentMode)}function tr(){Kn&&(Kn.detachEvent("onpropertychange",nr),Wn=Kn=null)}function nr(e){if("value"===e.propertyName&&qn(Wn)){var t=[];Qn(t,Wn,e,Ae(e)),Te(Jn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Wn=n,(Kn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qn(Wn)}function sr(e,t){if("click"===e)return qn(t)}function ir(e,t){if("input"===e||"change"===e)return qn(t)}var or="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(or(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!or(e[a],t[a]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=J((e=t.contentWindow).document)}return t}function hr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function pr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&hr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,s=Math.min(r.start,a);r=void 0===r.end?s:Math.min(r.end,a),!e.extend&&s>r&&(a=r,r=s,s=a),a=cr(n,s);var i=cr(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),s>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var gr=c&&"documentMode"in document&&11>=document.documentMode,mr=null,yr=null,wr=null,br=!1;function vr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==mr||mr!==J(r)||(r="selectionStart"in(r=mr)&&hr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},wr&&lr(wr,r)||(wr=r,0<(r=Kr(yr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}function Ar(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Er={animationend:Ar("Animation","AnimationEnd"),animationiteration:Ar("Animation","AnimationIteration"),animationstart:Ar("Animation","AnimationStart"),transitionend:Ar("Transition","TransitionEnd")},kr={},xr={};function Nr(e){if(kr[e])return kr[e];if(!Er[e])return e;var t,n=Er[e];for(t in n)if(n.hasOwnProperty(t)&&t in xr)return kr[e]=n[t];return e}c&&(xr=document.createElement("div").style,"AnimationEvent"in window||(delete Er.animationend.animation,delete Er.animationiteration.animation,delete Er.animationstart.animation),"TransitionEvent"in window||delete Er.transitionend.transition);var Sr=Nr("animationend"),Cr=Nr("animationiteration"),Pr=Nr("animationstart"),Rr=Nr("transitionend"),Ir=new Map,Tr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Or(e,t){Ir.set(e,t),l(t,[e])}for(var Br=0;Br<Tr.length;Br++){var Lr=Tr[Br];Or(Lr.toLowerCase(),"on"+(Lr[0].toUpperCase()+Lr.slice(1)))}Or(Sr,"onAnimationEnd"),Or(Cr,"onAnimationIteration"),Or(Pr,"onAnimationStart"),Or("dblclick","onDoubleClick"),Or("focusin","onFocus"),Or("focusout","onBlur"),Or(Rr,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ur="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Fr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ur));function Dr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,o,l,u){if(_e.apply(this,arguments),Fe){if(!Fe)throw Error(s(198));var c=De;Fe=!1,De=null,Me||(Me=!0,je=c)}}(r,t,void 0,e),e.currentTarget=null}function Mr(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var s=void 0;if(t)for(var i=r.length-1;0<=i;i--){var o=r[i],l=o.instance,u=o.currentTarget;if(o=o.listener,l!==s&&a.isPropagationStopped())break e;Dr(a,o,u),s=l}else for(i=0;i<r.length;i++){if(l=(o=r[i]).instance,u=o.currentTarget,o=o.listener,l!==s&&a.isPropagationStopped())break e;Dr(a,o,u),s=l}}}if(Me)throw e=je,Me=!1,je=null,e}function jr(e,t){var n=t[ga];void 0===n&&(n=t[ga]=new Set);var r=e+"__bubble";n.has(r)||(Hr(t,e,2,!1),n.add(r))}function zr(e,t,n){var r=0;t&&(r|=4),Hr(n,e,r,t)}var _r="_reactListening"+Math.random().toString(36).slice(2);function Gr(e){if(!e[_r]){e[_r]=!0,i.forEach((function(t){"selectionchange"!==t&&(Fr.has(t)||zr(t,!1,e),zr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[_r]||(t[_r]=!0,zr("selectionchange",!1,t))}}function Hr(e,t,n,r){switch(Yt(t)){case 1:var a=Qt;break;case 4:a=Kt;break;default:a=Wt}n=a.bind(null,t,n,e),a=void 0,!Be||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Vr(e,t,n,r,a){var s=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var o=r.stateNode.containerInfo;if(o===a||8===o.nodeType&&o.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var l=i.tag;if((3===l||4===l)&&((l=i.stateNode.containerInfo)===a||8===l.nodeType&&l.parentNode===a))return;i=i.return}for(;null!==o;){if(null===(i=wa(o)))return;if(5===(l=i.tag)||6===l){r=s=i;continue e}o=o.parentNode}}r=r.return}Te((function(){var r=s,a=Ae(n),i=[];e:{var o=Ir.get(e);if(void 0!==o){var l=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=Cn;break;case"focusin":u="focus",l=mn;break;case"focusout":u="blur",l=mn;break;case"beforeblur":case"afterblur":l=mn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=pn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Rn;break;case Sr:case Cr:case Pr:l=yn;break;case Rr:l=In;break;case"scroll":l=fn;break;case"wheel":l=On;break;case"copy":case"cut":case"paste":l=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Pn}var c=!!(4&t),d=!c&&"scroll"===e,f=c?null!==o?o+"Capture":null:o;c=[];for(var h,p=r;null!==p;){var g=(h=p).stateNode;if(5===h.tag&&null!==g&&(h=g,null!==f&&null!=(g=Oe(p,f))&&c.push(Qr(p,g,h))),d)break;p=p.return}0<c.length&&(o=new l(o,u,null,n,a),i.push({event:o,listeners:c}))}}if(!(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(o="mouseover"===e||"pointerover"===e)||n===ve||!(u=n.relatedTarget||n.fromElement)||!wa(u)&&!u[pa])&&(l||o)&&(o=a.window===a?a:(o=a.ownerDocument)?o.defaultView||o.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?wa(u):null)&&(u!==(d=Ge(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=pn,g="onMouseLeave",f="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,g="onPointerLeave",f="onPointerEnter",p="pointer"),d=null==l?o:va(l),h=null==u?o:va(u),(o=new c(g,p+"leave",l,n,a)).target=d,o.relatedTarget=h,g=null,wa(a)===r&&((c=new c(f,p+"enter",u,n,a)).target=h,c.relatedTarget=d,g=c),d=g,l&&u)e:{for(f=u,p=0,h=c=l;h;h=Wr(h))p++;for(h=0,g=f;g;g=Wr(g))h++;for(;0<p-h;)c=Wr(c),p--;for(;0<h-p;)f=Wr(f),h--;for(;p--;){if(c===f||null!==f&&c===f.alternate)break e;c=Wr(c),f=Wr(f)}c=null}else c=null;null!==l&&Jr(i,o,l,c,!1),null!==u&&null!==d&&Jr(i,d,u,c,!0)}if("select"===(l=(o=r?va(r):window).nodeName&&o.nodeName.toLowerCase())||"input"===l&&"file"===o.type)var m=Yn;else if(Vn(o))if(Zn)m=ir;else{m=ar;var y=rr}else(l=o.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(m=sr);switch(m&&(m=m(e,r))?Qn(i,m,n,a):(y&&y(e,o,r),"focusout"===e&&(y=o._wrapperState)&&y.controlled&&"number"===o.type&&ee(o,"number",o.value)),y=r?va(r):window,e){case"focusin":(Vn(y)||"true"===y.contentEditable)&&(mr=y,yr=r,wr=null);break;case"focusout":wr=yr=mr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,vr(i,n,a);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":vr(i,n,a)}var w;if(Ln)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Gn?zn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Dn&&"ko"!==n.locale&&(Gn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Gn&&(w=en()):($t="value"in(Zt=a)?Zt.value:Zt.textContent,Gn=!0)),0<(y=Kr(r,b)).length&&(b=new vn(b,e,null,n,a),i.push({event:b,listeners:y}),(w||null!==(w=_n(n)))&&(b.data=w))),(w=Fn?function(e,t){switch(e){case"compositionend":return _n(t);case"keypress":return 32!==t.which?null:(jn=!0,Mn);case"textInput":return(e=t.data)===Mn&&jn?null:e;default:return null}}(e,n):function(e,t){if(Gn)return"compositionend"===e||!Ln&&zn(e,t)?(e=en(),Xt=$t=Zt=null,Gn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Kr(r,"onBeforeInput")).length&&(a=new vn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=w)}Mr(i,t)}))}function Qr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Kr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,s=a.stateNode;5===a.tag&&null!==s&&(a=s,null!=(s=Oe(e,n))&&r.unshift(Qr(e,s,a)),null!=(s=Oe(e,t))&&r.push(Qr(e,s,a))),e=e.return}return r}function Wr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Jr(e,t,n,r,a){for(var s=t._reactName,i=[];null!==n&&n!==r;){var o=n,l=o.alternate,u=o.stateNode;if(null!==l&&l===r)break;5===o.tag&&null!==u&&(o=u,a?null!=(l=Oe(n,s))&&i.unshift(Qr(n,l,o)):a||null!=(l=Oe(n,s))&&i.push(Qr(n,l,o))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var qr=/\r\n?/g,Yr=/\u0000|\uFFFD/g;function Zr(e){return("string"==typeof e?e:""+e).replace(qr,"\n").replace(Yr,"")}function $r(e,t,n){if(t=Zr(t),Zr(e)!==t&&n)throw Error(s(425))}function Xr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,sa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==sa?function(e){return sa.resolve(null).then(e).catch(oa)}:ra;function oa(e){setTimeout((function(){throw e}))}function la(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Gt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Gt(t)}function ua(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),fa="__reactFiber$"+da,ha="__reactProps$"+da,pa="__reactContainer$"+da,ga="__reactEvents$"+da,ma="__reactListeners$"+da,ya="__reactHandles$"+da;function wa(e){var t=e[fa];if(t)return t;for(var n=e.parentNode;n;){if(t=n[pa]||n[fa]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[fa])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function ba(e){return!(e=e[fa]||e[pa])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function va(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(s(33))}function Aa(e){return e[ha]||null}var Ea=[],ka=-1;function xa(e){return{current:e}}function Na(e){0>ka||(e.current=Ea[ka],Ea[ka]=null,ka--)}function Sa(e,t){ka++,Ea[ka]=e.current,e.current=t}var Ca={},Pa=xa(Ca),Ra=xa(!1),Ia=Ca;function Ta(e,t){var n=e.type.contextTypes;if(!n)return Ca;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,s={};for(a in n)s[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=s),s}function Oa(e){return null!=e.childContextTypes}function Ba(){Na(Ra),Na(Pa)}function La(e,t,n){if(Pa.current!==Ca)throw Error(s(168));Sa(Pa,t),Sa(Ra,n)}function Ua(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(s(108,H(e)||"Unknown",a));return D({},n,r)}function Fa(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ca,Ia=Pa.current,Sa(Pa,e),Sa(Ra,Ra.current),!0}function Da(e,t,n){var r=e.stateNode;if(!r)throw Error(s(169));n?(e=Ua(e,t,Ia),r.__reactInternalMemoizedMergedChildContext=e,Na(Ra),Na(Pa),Sa(Pa,e)):Na(Ra),Sa(Ra,n)}var Ma=null,ja=!1,za=!1;function _a(e){null===Ma?Ma=[e]:Ma.push(e)}function Ga(){if(!za&&null!==Ma){za=!0;var e=0,t=bt;try{var n=Ma;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Ma=null,ja=!1}catch(t){throw null!==Ma&&(Ma=Ma.slice(e+1)),We(Xe,Ga),t}finally{bt=t,za=!1}}return null}var Ha=[],Va=0,Qa=null,Ka=0,Wa=[],Ja=0,qa=null,Ya=1,Za="";function $a(e,t){Ha[Va++]=Ka,Ha[Va++]=Qa,Qa=e,Ka=t}function Xa(e,t,n){Wa[Ja++]=Ya,Wa[Ja++]=Za,Wa[Ja++]=qa,qa=e;var r=Ya;e=Za;var a=32-it(r)-1;r&=~(1<<a),n+=1;var s=32-it(t)+a;if(30<s){var i=a-a%5;s=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Ya=1<<32-it(t)+a|n<<a|r,Za=s+e}else Ya=1<<s|n<<a|r,Za=e}function es(e){null!==e.return&&($a(e,1),Xa(e,1,0))}function ts(e){for(;e===Qa;)Qa=Ha[--Va],Ha[Va]=null,Ka=Ha[--Va],Ha[Va]=null;for(;e===qa;)qa=Wa[--Ja],Wa[Ja]=null,Za=Wa[--Ja],Wa[Ja]=null,Ya=Wa[--Ja],Wa[Ja]=null}var ns=null,rs=null,as=!1,ss=null;function is(e,t){var n=Tu(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function os(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ns=e,rs=ua(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ns=e,rs=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==qa?{id:Ya,overflow:Za}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Tu(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ns=e,rs=null,!0);default:return!1}}function ls(e){return!(!(1&e.mode)||128&e.flags)}function us(e){if(as){var t=rs;if(t){var n=t;if(!os(e,t)){if(ls(e))throw Error(s(418));t=ua(n.nextSibling);var r=ns;t&&os(e,t)?is(r,n):(e.flags=-4097&e.flags|2,as=!1,ns=e)}}else{if(ls(e))throw Error(s(418));e.flags=-4097&e.flags|2,as=!1,ns=e}}}function cs(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ns=e}function ds(e){if(e!==ns)return!1;if(!as)return cs(e),as=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=rs)){if(ls(e))throw fs(),Error(s(418));for(;t;)is(e,t),t=ua(t.nextSibling)}if(cs(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(s(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){rs=ua(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}rs=null}}else rs=ns?ua(e.stateNode.nextSibling):null;return!0}function fs(){for(var e=rs;e;)e=ua(e.nextSibling)}function hs(){rs=ns=null,as=!1}function ps(e){null===ss?ss=[e]:ss.push(e)}var gs=v.ReactCurrentBatchConfig;function ms(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(s(309));var r=n.stateNode}if(!r)throw Error(s(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=a.refs;null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(s(284));if(!n._owner)throw Error(s(290,e))}return e}function ys(e,t){throw e=Object.prototype.toString.call(t),Error(s(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ws(e){return(0,e._init)(e._payload)}function bs(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Bu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function o(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Du(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function u(e,t,n,r){var s=n.type;return s===k?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===O&&ws(s)===t.type)?((r=a(t,n.props)).ref=ms(e,t,n),r.return=e,r):((r=Lu(n.type,n.key,n.props,null,e.mode,r)).ref=ms(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Mu(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,s){return null===t||7!==t.tag?((t=Uu(n,e.mode,r,s)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Du(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case A:return(n=Lu(t.type,t.key,t.props,null,e.mode,n)).ref=ms(e,null,t),n.return=e,n;case E:return(t=Mu(t,e.mode,n)).return=e,t;case O:return f(e,(0,t._init)(t._payload),n)}if(te(t)||U(t))return(t=Uu(t,e.mode,n,null)).return=e,t;ys(e,t)}return null}function h(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case A:return n.key===a?u(e,t,n,r):null;case E:return n.key===a?c(e,t,n,r):null;case O:return h(e,t,(a=n._init)(n._payload),r)}if(te(n)||U(n))return null!==a?null:d(e,t,n,r,null);ys(e,n)}return null}function p(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case A:return u(t,e=e.get(null===r.key?n:r.key)||null,r,a);case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case O:return p(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||U(r))return d(t,e=e.get(n)||null,r,a,null);ys(t,r)}return null}function g(a,s,o,l){for(var u=null,c=null,d=s,g=s=0,m=null;null!==d&&g<o.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var y=h(a,d,o[g],l);if(null===y){null===d&&(d=m);break}e&&d&&null===y.alternate&&t(a,d),s=i(y,s,g),null===c?u=y:c.sibling=y,c=y,d=m}if(g===o.length)return n(a,d),as&&$a(a,g),u;if(null===d){for(;g<o.length;g++)null!==(d=f(a,o[g],l))&&(s=i(d,s,g),null===c?u=d:c.sibling=d,c=d);return as&&$a(a,g),u}for(d=r(a,d);g<o.length;g++)null!==(m=p(d,a,g,o[g],l))&&(e&&null!==m.alternate&&d.delete(null===m.key?g:m.key),s=i(m,s,g),null===c?u=m:c.sibling=m,c=m);return e&&d.forEach((function(e){return t(a,e)})),as&&$a(a,g),u}function m(a,o,l,u){var c=U(l);if("function"!=typeof c)throw Error(s(150));if(null==(l=c.call(l)))throw Error(s(151));for(var d=c=null,g=o,m=o=0,y=null,w=l.next();null!==g&&!w.done;m++,w=l.next()){g.index>m?(y=g,g=null):y=g.sibling;var b=h(a,g,w.value,u);if(null===b){null===g&&(g=y);break}e&&g&&null===b.alternate&&t(a,g),o=i(b,o,m),null===d?c=b:d.sibling=b,d=b,g=y}if(w.done)return n(a,g),as&&$a(a,m),c;if(null===g){for(;!w.done;m++,w=l.next())null!==(w=f(a,w.value,u))&&(o=i(w,o,m),null===d?c=w:d.sibling=w,d=w);return as&&$a(a,m),c}for(g=r(a,g);!w.done;m++,w=l.next())null!==(w=p(g,a,m,w.value,u))&&(e&&null!==w.alternate&&g.delete(null===w.key?m:w.key),o=i(w,o,m),null===d?c=w:d.sibling=w,d=w);return e&&g.forEach((function(e){return t(a,e)})),as&&$a(a,m),c}return function e(r,s,i,l){if("object"==typeof i&&null!==i&&i.type===k&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case A:e:{for(var u=i.key,c=s;null!==c;){if(c.key===u){if((u=i.type)===k){if(7===c.tag){n(r,c.sibling),(s=a(c,i.props.children)).return=r,r=s;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===O&&ws(u)===c.type){n(r,c.sibling),(s=a(c,i.props)).ref=ms(r,c,i),s.return=r,r=s;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===k?((s=Uu(i.props.children,r.mode,l,i.key)).return=r,r=s):((l=Lu(i.type,i.key,i.props,null,r.mode,l)).ref=ms(r,s,i),l.return=r,r=l)}return o(r);case E:e:{for(c=i.key;null!==s;){if(s.key===c){if(4===s.tag&&s.stateNode.containerInfo===i.containerInfo&&s.stateNode.implementation===i.implementation){n(r,s.sibling),(s=a(s,i.children||[])).return=r,r=s;break e}n(r,s);break}t(r,s),s=s.sibling}(s=Mu(i,r.mode,l)).return=r,r=s}return o(r);case O:return e(r,s,(c=i._init)(i._payload),l)}if(te(i))return g(r,s,i,l);if(U(i))return m(r,s,i,l);ys(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==s&&6===s.tag?(n(r,s.sibling),(s=a(s,i)).return=r,r=s):(n(r,s),(s=Du(i,r.mode,l)).return=r,r=s),o(r)):n(r,s)}}var vs=bs(!0),As=bs(!1),Es=xa(null),ks=null,xs=null,Ns=null;function Ss(){Ns=xs=ks=null}function Cs(e){var t=Es.current;Na(Es),e._currentValue=t}function Ps(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Rs(e,t){ks=e,Ns=xs=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!==(e.lanes&t)&&(bo=!0),e.firstContext=null)}function Is(e){var t=e._currentValue;if(Ns!==e)if(e={context:e,memoizedValue:t,next:null},null===xs){if(null===ks)throw Error(s(308));xs=e,ks.dependencies={lanes:0,firstContext:e}}else xs=xs.next=e;return t}var Ts=null;function Os(e){null===Ts?Ts=[e]:Ts.push(e)}function Bs(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,Os(t)):(n.next=a.next,a.next=n),t.interleaved=n,Ls(e,r)}function Ls(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Us=!1;function Fs(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ds(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ms(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function js(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Pl){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,Ls(e,n)}return null===(a=r.interleaved)?(t.next=t,Os(r)):(t.next=a.next,a.next=t),r.interleaved=t,Ls(e,n)}function zs(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,wt(e,n)}}function _s(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,s=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===s?a=s=i:s=s.next=i,n=n.next}while(null!==n);null===s?a=s=t:s=s.next=t}else a=s=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:s,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Gs(e,t,n,r){var a=e.updateQueue;Us=!1;var s=a.firstBaseUpdate,i=a.lastBaseUpdate,o=a.shared.pending;if(null!==o){a.shared.pending=null;var l=o,u=l.next;l.next=null,null===i?s=u:i.next=u,i=l;var c=e.alternate;null!==c&&(o=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===o?c.firstBaseUpdate=u:o.next=u,c.lastBaseUpdate=l)}if(null!==s){var d=a.baseState;for(i=0,c=u=l=null,o=s;;){var f=o.lane,h=o.eventTime;if((r&f)===f){null!==c&&(c=c.next={eventTime:h,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var p=e,g=o;switch(f=t,h=n,g.tag){case 1:if("function"==typeof(p=g.payload)){d=p.call(h,d,f);break e}d=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(f="function"==typeof(p=g.payload)?p.call(h,d,f):p))break e;d=D({},d,f);break e;case 2:Us=!0}}null!==o.callback&&0!==o.lane&&(e.flags|=64,null===(f=a.effects)?a.effects=[o]:f.push(o))}else h={eventTime:h,lane:f,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===c?(u=c=h,l=d):c=c.next=h,i|=f;if(null===(o=o.next)){if(null===(o=a.shared.pending))break;o=(f=o).next,f.next=null,a.lastBaseUpdate=f,a.shared.pending=null}}if(null===c&&(l=d),a.baseState=l,a.firstBaseUpdate=u,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===s&&(a.shared.lanes=0);Fl|=i,e.lanes=i,e.memoizedState=d}}function Hs(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(s(191,a));a.call(r)}}}var Vs={},Qs=xa(Vs),Ks=xa(Vs),Ws=xa(Vs);function Js(e){if(e===Vs)throw Error(s(174));return e}function qs(e,t){switch(Sa(Ws,t),Sa(Ks,e),Sa(Qs,Vs),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Na(Qs),Sa(Qs,t)}function Ys(){Na(Qs),Na(Ks),Na(Ws)}function Zs(e){Js(Ws.current);var t=Js(Qs.current),n=le(t,e.type);t!==n&&(Sa(Ks,e),Sa(Qs,n))}function $s(e){Ks.current===e&&(Na(Qs),Na(Ks))}var Xs=xa(0);function ei(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ti=[];function ni(){for(var e=0;e<ti.length;e++)ti[e]._workInProgressVersionPrimary=null;ti.length=0}var ri=v.ReactCurrentDispatcher,ai=v.ReactCurrentBatchConfig,si=0,ii=null,oi=null,li=null,ui=!1,ci=!1,di=0,fi=0;function hi(){throw Error(s(321))}function pi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!or(e[n],t[n]))return!1;return!0}function gi(e,t,n,r,a,i){if(si=i,ii=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ri.current=null===e||null===e.memoizedState?$i:Xi,e=n(r,a),ci){i=0;do{if(ci=!1,di=0,25<=i)throw Error(s(301));i+=1,li=oi=null,t.updateQueue=null,ri.current=eo,e=n(r,a)}while(ci)}if(ri.current=Zi,t=null!==oi&&null!==oi.next,si=0,li=oi=ii=null,ui=!1,t)throw Error(s(300));return e}function mi(){var e=0!==di;return di=0,e}function yi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===li?ii.memoizedState=li=e:li=li.next=e,li}function wi(){if(null===oi){var e=ii.alternate;e=null!==e?e.memoizedState:null}else e=oi.next;var t=null===li?ii.memoizedState:li.next;if(null!==t)li=t,oi=e;else{if(null===e)throw Error(s(310));e={memoizedState:(oi=e).memoizedState,baseState:oi.baseState,baseQueue:oi.baseQueue,queue:oi.queue,next:null},null===li?ii.memoizedState=li=e:li=li.next=e}return li}function bi(e,t){return"function"==typeof t?t(e):t}function vi(e){var t=wi(),n=t.queue;if(null===n)throw Error(s(311));n.lastRenderedReducer=e;var r=oi,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var o=a.next;a.next=i.next,i.next=o}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var l=o=null,u=null,c=i;do{var d=c.lane;if((si&d)===d)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var f={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(l=u=f,o=r):u=u.next=f,ii.lanes|=d,Fl|=d}c=c.next}while(null!==c&&c!==i);null===u?o=r:u.next=l,or(r,t.memoizedState)||(bo=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,ii.lanes|=i,Fl|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ai(e){var t=wi(),n=t.queue;if(null===n)throw Error(s(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var o=a=a.next;do{i=e(i,o.action),o=o.next}while(o!==a);or(i,t.memoizedState)||(bo=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Ei(){}function ki(e,t){var n=ii,r=wi(),a=t(),i=!or(r.memoizedState,a);if(i&&(r.memoizedState=a,bo=!0),r=r.queue,Ui(Si.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==li&&1&li.memoizedState.tag){if(n.flags|=2048,Ii(9,Ni.bind(null,n,r,a,t),void 0,null),null===Rl)throw Error(s(349));30&si||xi(n,t,a)}return a}function xi(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ii.updateQueue)?(t={lastEffect:null,stores:null},ii.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ni(e,t,n,r){t.value=n,t.getSnapshot=r,Ci(t)&&Pi(e)}function Si(e,t,n){return n((function(){Ci(t)&&Pi(e)}))}function Ci(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!or(e,n)}catch(e){return!0}}function Pi(e){var t=Ls(e,1);null!==t&&nu(t,e,1,-1)}function Ri(e){var t=yi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:bi,lastRenderedState:e},t.queue=e,e=e.dispatch=Wi.bind(null,ii,e),[t.memoizedState,e]}function Ii(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ii.updateQueue)?(t={lastEffect:null,stores:null},ii.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ti(){return wi().memoizedState}function Oi(e,t,n,r){var a=yi();ii.flags|=e,a.memoizedState=Ii(1|t,n,void 0,void 0===r?null:r)}function Bi(e,t,n,r){var a=wi();r=void 0===r?null:r;var s=void 0;if(null!==oi){var i=oi.memoizedState;if(s=i.destroy,null!==r&&pi(r,i.deps))return void(a.memoizedState=Ii(t,n,s,r))}ii.flags|=e,a.memoizedState=Ii(1|t,n,s,r)}function Li(e,t){return Oi(8390656,8,e,t)}function Ui(e,t){return Bi(2048,8,e,t)}function Fi(e,t){return Bi(4,2,e,t)}function Di(e,t){return Bi(4,4,e,t)}function Mi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ji(e,t,n){return n=null!=n?n.concat([e]):null,Bi(4,4,Mi.bind(null,t,e),n)}function zi(){}function _i(e,t){var n=wi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&pi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Gi(e,t){var n=wi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&pi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Hi(e,t,n){return 21&si?(or(n,t)||(n=gt(),ii.lanes|=n,Fl|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,bo=!0),e.memoizedState=n)}function Vi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=ai.transition;ai.transition={};try{e(!1),t()}finally{bt=n,ai.transition=r}}function Qi(){return wi().memoizedState}function Ki(e,t,n){var r=tu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Ji(e)?qi(t,n):null!==(n=Bs(e,t,n,r))&&(nu(n,e,r,eu()),Yi(n,t,r))}function Wi(e,t,n){var r=tu(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Ji(e))qi(t,a);else{var s=e.alternate;if(0===e.lanes&&(null===s||0===s.lanes)&&null!==(s=t.lastRenderedReducer))try{var i=t.lastRenderedState,o=s(i,n);if(a.hasEagerState=!0,a.eagerState=o,or(o,i)){var l=t.interleaved;return null===l?(a.next=a,Os(t)):(a.next=l.next,l.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=Bs(e,t,a,r))&&(nu(n,e,r,a=eu()),Yi(n,t,r))}}function Ji(e){var t=e.alternate;return e===ii||null!==t&&t===ii}function qi(e,t){ci=ui=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Yi(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,wt(e,n)}}var Zi={readContext:Is,useCallback:hi,useContext:hi,useEffect:hi,useImperativeHandle:hi,useInsertionEffect:hi,useLayoutEffect:hi,useMemo:hi,useReducer:hi,useRef:hi,useState:hi,useDebugValue:hi,useDeferredValue:hi,useTransition:hi,useMutableSource:hi,useSyncExternalStore:hi,useId:hi,unstable_isNewReconciler:!1},$i={readContext:Is,useCallback:function(e,t){return yi().memoizedState=[e,void 0===t?null:t],e},useContext:Is,useEffect:Li,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Oi(4194308,4,Mi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Oi(4194308,4,e,t)},useInsertionEffect:function(e,t){return Oi(4,2,e,t)},useMemo:function(e,t){var n=yi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=yi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Ki.bind(null,ii,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},yi().memoizedState=e},useState:Ri,useDebugValue:zi,useDeferredValue:function(e){return yi().memoizedState=e},useTransition:function(){var e=Ri(!1),t=e[0];return e=Vi.bind(null,e[1]),yi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ii,a=yi();if(as){if(void 0===n)throw Error(s(407));n=n()}else{if(n=t(),null===Rl)throw Error(s(349));30&si||xi(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,Li(Si.bind(null,r,i,e),[e]),r.flags|=2048,Ii(9,Ni.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=yi(),t=Rl.identifierPrefix;if(as){var n=Za;t=":"+t+"R"+(n=(Ya&~(1<<32-it(Ya)-1)).toString(32)+n),0<(n=di++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=fi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},Xi={readContext:Is,useCallback:_i,useContext:Is,useEffect:Ui,useImperativeHandle:ji,useInsertionEffect:Fi,useLayoutEffect:Di,useMemo:Gi,useReducer:vi,useRef:Ti,useState:function(){return vi(bi)},useDebugValue:zi,useDeferredValue:function(e){return Hi(wi(),oi.memoizedState,e)},useTransition:function(){return[vi(bi)[0],wi().memoizedState]},useMutableSource:Ei,useSyncExternalStore:ki,useId:Qi,unstable_isNewReconciler:!1},eo={readContext:Is,useCallback:_i,useContext:Is,useEffect:Ui,useImperativeHandle:ji,useInsertionEffect:Fi,useLayoutEffect:Di,useMemo:Gi,useReducer:Ai,useRef:Ti,useState:function(){return Ai(bi)},useDebugValue:zi,useDeferredValue:function(e){var t=wi();return null===oi?t.memoizedState=e:Hi(t,oi.memoizedState,e)},useTransition:function(){return[Ai(bi)[0],wi().memoizedState]},useMutableSource:Ei,useSyncExternalStore:ki,useId:Qi,unstable_isNewReconciler:!1};function to(e,t){if(e&&e.defaultProps){for(var n in t=D({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function no(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:D({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ro={isMounted:function(e){return!!(e=e._reactInternals)&&Ge(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=eu(),a=tu(e),s=Ms(r,a);s.payload=t,null!=n&&(s.callback=n),null!==(t=js(e,s,a))&&(nu(t,e,a,r),zs(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=eu(),a=tu(e),s=Ms(r,a);s.tag=1,s.payload=t,null!=n&&(s.callback=n),null!==(t=js(e,s,a))&&(nu(t,e,a,r),zs(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=eu(),r=tu(e),a=Ms(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=js(e,a,r))&&(nu(t,e,r,n),zs(t,e,r))}};function ao(e,t,n,r,a,s,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,s,i):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(a,s))}function so(e,t,n){var r=!1,a=Ca,s=t.contextType;return"object"==typeof s&&null!==s?s=Is(s):(a=Oa(t)?Ia:Pa.current,s=(r=null!=(r=t.contextTypes))?Ta(e,a):Ca),t=new t(n,s),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ro,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=s),t}function io(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ro.enqueueReplaceState(t,t.state,null)}function oo(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs={},Fs(e);var s=t.contextType;"object"==typeof s&&null!==s?a.context=Is(s):(s=Oa(t)?Ia:Pa.current,a.context=Ta(e,s)),a.state=e.memoizedState,"function"==typeof(s=t.getDerivedStateFromProps)&&(no(e,t,s,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&ro.enqueueReplaceState(a,a.state,null),Gs(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function lo(e,t){try{var n="",r=t;do{n+=_(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function uo(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function co(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var fo="function"==typeof WeakMap?WeakMap:Map;function ho(e,t,n){(n=Ms(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Vl||(Vl=!0,Ql=r),co(0,t)},n}function po(e,t,n){(n=Ms(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){co(0,t)}}var s=e.stateNode;return null!==s&&"function"==typeof s.componentDidCatch&&(n.callback=function(){co(0,t),"function"!=typeof r&&(null===Kl?Kl=new Set([this]):Kl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function go(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new fo;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=Nu.bind(null,e,t,n),t.then(e,e))}function mo(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function yo(e,t,n,r,a){return 1&e.mode?(e.flags|=65536,e.lanes=a,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ms(-1,1)).tag=2,js(n,t,1))),n.lanes|=1),e)}var wo=v.ReactCurrentOwner,bo=!1;function vo(e,t,n,r){t.child=null===e?As(t,null,n,r):vs(t,e.child,n,r)}function Ao(e,t,n,r,a){n=n.render;var s=t.ref;return Rs(t,a),r=gi(e,t,n,r,s,a),n=mi(),null===e||bo?(as&&n&&es(t),t.flags|=1,vo(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Vo(e,t,a))}function Eo(e,t,n,r,a){if(null===e){var s=n.type;return"function"!=typeof s||Ou(s)||void 0!==s.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Lu(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=s,ko(e,t,s,r,a))}if(s=e.child,0===(e.lanes&a)){var i=s.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(i,r)&&e.ref===t.ref)return Vo(e,t,a)}return t.flags|=1,(e=Bu(s,r)).ref=t.ref,e.return=t,t.child=e}function ko(e,t,n,r,a){if(null!==e){var s=e.memoizedProps;if(lr(s,r)&&e.ref===t.ref){if(bo=!1,t.pendingProps=r=s,0===(e.lanes&a))return t.lanes=e.lanes,Vo(e,t,a);131072&e.flags&&(bo=!0)}}return So(e,t,n,r,a)}function xo(e,t,n){var r=t.pendingProps,a=r.children,s=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==s?s.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Sa(Bl,Ol),Ol|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==s?s.baseLanes:n,Sa(Bl,Ol),Ol|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Sa(Bl,Ol),Ol|=n;else null!==s?(r=s.baseLanes|n,t.memoizedState=null):r=n,Sa(Bl,Ol),Ol|=r;return vo(e,t,a,n),t.child}function No(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function So(e,t,n,r,a){var s=Oa(n)?Ia:Pa.current;return s=Ta(t,s),Rs(t,a),n=gi(e,t,n,r,s,a),r=mi(),null===e||bo?(as&&r&&es(t),t.flags|=1,vo(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Vo(e,t,a))}function Co(e,t,n,r,a){if(Oa(n)){var s=!0;Fa(t)}else s=!1;if(Rs(t,a),null===t.stateNode)Ho(e,t),so(t,n,r),oo(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,o=t.memoizedProps;i.props=o;var l=i.context,u=n.contextType;u="object"==typeof u&&null!==u?Is(u):Ta(t,u=Oa(n)?Ia:Pa.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==r||l!==u)&&io(t,i,r,u),Us=!1;var f=t.memoizedState;i.state=f,Gs(t,r,i,a),l=t.memoizedState,o!==r||f!==l||Ra.current||Us?("function"==typeof c&&(no(t,n,c,r),l=t.memoizedState),(o=Us||ao(t,n,o,r,f,l,u))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),i.props=r,i.state=l,i.context=u,r=o):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Ds(e,t),o=t.memoizedProps,u=t.type===t.elementType?o:to(t.type,o),i.props=u,d=t.pendingProps,f=i.context,l="object"==typeof(l=n.contextType)&&null!==l?Is(l):Ta(t,l=Oa(n)?Ia:Pa.current);var h=n.getDerivedStateFromProps;(c="function"==typeof h||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==d||f!==l)&&io(t,i,r,l),Us=!1,f=t.memoizedState,i.state=f,Gs(t,r,i,a);var p=t.memoizedState;o!==d||f!==p||Ra.current||Us?("function"==typeof h&&(no(t,n,h,r),p=t.memoizedState),(u=Us||ao(t,n,u,r,f,p,l)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,p,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),i.props=r,i.state=p,i.context=l,r=u):("function"!=typeof i.componentDidUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Po(e,t,n,r,s,a)}function Po(e,t,n,r,a,s){No(e,t);var i=!!(128&t.flags);if(!r&&!i)return a&&Da(t,n,!1),Vo(e,t,s);r=t.stateNode,wo.current=t;var o=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=vs(t,e.child,null,s),t.child=vs(t,null,o,s)):vo(e,t,o,s),t.memoizedState=r.state,a&&Da(t,n,!0),t.child}function Ro(e){var t=e.stateNode;t.pendingContext?La(0,t.pendingContext,t.pendingContext!==t.context):t.context&&La(0,t.context,!1),qs(e,t.containerInfo)}function Io(e,t,n,r,a){return hs(),ps(a),t.flags|=256,vo(e,t,n,r),t.child}var To,Oo,Bo,Lo,Uo={dehydrated:null,treeContext:null,retryLane:0};function Fo(e){return{baseLanes:e,cachePool:null,transitions:null}}function Do(e,t,n){var r,a=t.pendingProps,i=Xs.current,o=!1,l=!!(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&i)),r?(o=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Sa(Xs,1&i),null===e)return us(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(l=a.children,e=a.fallback,o?(a=t.mode,o=t.child,l={mode:"hidden",children:l},1&a||null===o?o=Fu(l,a,0,null):(o.childLanes=0,o.pendingProps=l),e=Uu(e,a,n,null),o.return=t,e.return=t,o.sibling=e,t.child=o,t.child.memoizedState=Fo(n),t.memoizedState=Uo,e):Mo(t,l));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,a,i,o){if(n)return 256&t.flags?(t.flags&=-257,jo(e,t,o,r=uo(Error(s(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,a=t.mode,r=Fu({mode:"visible",children:r.children},a,0,null),(i=Uu(i,a,o,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,1&t.mode&&vs(t,e.child,null,o),t.child.memoizedState=Fo(o),t.memoizedState=Uo,i);if(!(1&t.mode))return jo(e,t,o,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var l=r.dgst;return r=l,jo(e,t,o,r=uo(i=Error(s(419)),r,void 0))}if(l=0!==(o&e.childLanes),bo||l){if(null!==(r=Rl)){switch(o&-o){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!==(a&(r.suspendedLanes|o))?0:a)&&a!==i.retryLane&&(i.retryLane=a,Ls(e,a),nu(r,e,a,-1))}return gu(),jo(e,t,o,r=uo(Error(s(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=Cu.bind(null,e),a._reactRetry=t,null):(e=i.treeContext,rs=ua(a.nextSibling),ns=t,as=!0,ss=null,null!==e&&(Wa[Ja++]=Ya,Wa[Ja++]=Za,Wa[Ja++]=qa,Ya=e.id,Za=e.overflow,qa=t),(t=Mo(t,r.children)).flags|=4096,t)}(e,t,l,a,r,i,n);if(o){o=a.fallback,l=t.mode,r=(i=e.child).sibling;var u={mode:"hidden",children:a.children};return 1&l||t.child===i?(a=Bu(i,u)).subtreeFlags=14680064&i.subtreeFlags:((a=t.child).childLanes=0,a.pendingProps=u,t.deletions=null),null!==r?o=Bu(r,o):(o=Uu(o,l,n,null)).flags|=2,o.return=t,a.return=t,a.sibling=o,t.child=a,a=o,o=t.child,l=null===(l=e.child.memoizedState)?Fo(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},o.memoizedState=l,o.childLanes=e.childLanes&~n,t.memoizedState=Uo,a}return e=(o=e.child).sibling,a=Bu(o,{mode:"visible",children:a.children}),!(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function Mo(e,t){return(t=Fu({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function jo(e,t,n,r){return null!==r&&ps(r),vs(t,e.child,null,n),(e=Mo(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function zo(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ps(e.return,t,n)}function _o(e,t,n,r,a){var s=e.memoizedState;null===s?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(s.isBackwards=t,s.rendering=null,s.renderingStartTime=0,s.last=r,s.tail=n,s.tailMode=a)}function Go(e,t,n){var r=t.pendingProps,a=r.revealOrder,s=r.tail;if(vo(e,t,r.children,n),2&(r=Xs.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&zo(e,n,t);else if(19===e.tag)zo(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Sa(Xs,r),1&t.mode)switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===ei(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),_o(t,!1,a,n,s);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===ei(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}_o(t,!0,n,null,s);break;case"together":_o(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Ho(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Vo(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Fl|=t.lanes,0===(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(s(153));if(null!==t.child){for(n=Bu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Bu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Qo(e,t){if(!as)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ko(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Wo(e,t,n){var r=t.pendingProps;switch(ts(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Ko(t),null;case 1:case 17:return Oa(t.type)&&Ba(),Ko(t),null;case 3:return r=t.stateNode,Ys(),Na(Ra),Na(Pa),ni(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(ds(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==ss&&(iu(ss),ss=null))),Oo(e,t),Ko(t),null;case 5:$s(t);var a=Js(Ws.current);if(n=t.type,null!==e&&null!=t.stateNode)Bo(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(s(166));return Ko(t),null}if(e=Js(Qs.current),ds(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[fa]=t,r[ha]=i,e=!!(1&t.mode),n){case"dialog":jr("cancel",r),jr("close",r);break;case"iframe":case"object":case"embed":jr("load",r);break;case"video":case"audio":for(a=0;a<Ur.length;a++)jr(Ur[a],r);break;case"source":jr("error",r);break;case"img":case"image":case"link":jr("error",r),jr("load",r);break;case"details":jr("toggle",r);break;case"input":Y(r,i),jr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},jr("invalid",r);break;case"textarea":ae(r,i),jr("invalid",r)}for(var l in we(n,i),a=null,i)if(i.hasOwnProperty(l)){var u=i[l];"children"===l?"string"==typeof u?r.textContent!==u&&(!0!==i.suppressHydrationWarning&&$r(r.textContent,u,e),a=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==i.suppressHydrationWarning&&$r(r.textContent,u,e),a=["children",""+u]):o.hasOwnProperty(l)&&null!=u&&"onScroll"===l&&jr("scroll",r)}switch(n){case"input":K(r),X(r,i,!0);break;case"textarea":K(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Xr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=oe(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[fa]=t,e[ha]=r,To(e,t,!1,!1),t.stateNode=e;e:{switch(l=be(n,r),n){case"dialog":jr("cancel",e),jr("close",e),a=r;break;case"iframe":case"object":case"embed":jr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Ur.length;a++)jr(Ur[a],e);a=r;break;case"source":jr("error",e),a=r;break;case"img":case"image":case"link":jr("error",e),jr("load",e),a=r;break;case"details":jr("toggle",e),a=r;break;case"input":Y(e,r),a=q(e,r),jr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=D({},r,{value:void 0}),jr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),jr("invalid",e)}for(i in we(n,a),u=a)if(u.hasOwnProperty(i)){var c=u[i];"style"===i?me(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&fe(e,c):"number"==typeof c&&fe(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(o.hasOwnProperty(i)?null!=c&&"onScroll"===i&&jr("scroll",e):null!=c&&b(e,i,c,l))}switch(n){case"input":K(e),X(e,r,!1);break;case"textarea":K(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Xr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Ko(t),null;case 6:if(e&&null!=t.stateNode)Lo(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(s(166));if(n=Js(Ws.current),Js(Qs.current),ds(t)){if(r=t.stateNode,n=t.memoizedProps,r[fa]=t,(i=r.nodeValue!==n)&&null!==(e=ns))switch(e.tag){case 3:$r(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&$r(r.nodeValue,n,!!(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[fa]=t,t.stateNode=r}return Ko(t),null;case 13:if(Na(Xs),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(as&&null!==rs&&1&t.mode&&!(128&t.flags))fs(),hs(),t.flags|=98560,i=!1;else if(i=ds(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(s(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(s(317));i[fa]=t}else hs(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Ko(t),i=!1}else null!==ss&&(iu(ss),ss=null),i=!0;if(!i)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&Xs.current?0===Ll&&(Ll=3):gu())),null!==t.updateQueue&&(t.flags|=4),Ko(t),null);case 4:return Ys(),Oo(e,t),null===e&&Gr(t.stateNode.containerInfo),Ko(t),null;case 10:return Cs(t.type._context),Ko(t),null;case 19:if(Na(Xs),null===(i=t.memoizedState))return Ko(t),null;if(r=!!(128&t.flags),null===(l=i.rendering))if(r)Qo(i,!1);else{if(0!==Ll||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(l=ei(e))){for(t.flags|=128,Qo(i,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(l=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=l.childLanes,i.lanes=l.lanes,i.child=l.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=l.memoizedProps,i.memoizedState=l.memoizedState,i.updateQueue=l.updateQueue,i.type=l.type,e=l.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Sa(Xs,1&Xs.current|2),t.child}e=e.sibling}null!==i.tail&&Ze()>Gl&&(t.flags|=128,r=!0,Qo(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ei(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Qo(i,!0),null===i.tail&&"hidden"===i.tailMode&&!l.alternate&&!as)return Ko(t),null}else 2*Ze()-i.renderingStartTime>Gl&&1073741824!==n&&(t.flags|=128,r=!0,Qo(i,!1),t.lanes=4194304);i.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=i.last)?n.sibling=l:t.child=l,i.last=l)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Ze(),t.sibling=null,n=Xs.current,Sa(Xs,r?1&n|2:1&n),t):(Ko(t),null);case 22:case 23:return du(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&Ol)&&(Ko(t),6&t.subtreeFlags&&(t.flags|=8192)):Ko(t),null;case 24:case 25:return null}throw Error(s(156,t.tag))}function Jo(e,t){switch(ts(t),t.tag){case 1:return Oa(t.type)&&Ba(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Ys(),Na(Ra),Na(Pa),ni(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return $s(t),null;case 13:if(Na(Xs),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(s(340));hs()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Na(Xs),null;case 4:return Ys(),null;case 10:return Cs(t.type._context),null;case 22:case 23:return du(),null;default:return null}}To=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Oo=function(){},Bo=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Js(Qs.current);var s,i=null;switch(n){case"input":a=q(e,a),r=q(e,r),i=[];break;case"select":a=D({},a,{value:void 0}),r=D({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Xr)}for(c in we(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var l=a[c];for(s in l)l.hasOwnProperty(s)&&(n||(n={}),n[s]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(o.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var u=r[c];if(l=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&u!==l&&(null!=u||null!=l))if("style"===c)if(l){for(s in l)!l.hasOwnProperty(s)||u&&u.hasOwnProperty(s)||(n||(n={}),n[s]="");for(s in u)u.hasOwnProperty(s)&&l[s]!==u[s]&&(n||(n={}),n[s]=u[s])}else n||(i||(i=[]),i.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,l=l?l.__html:void 0,null!=u&&l!==u&&(i=i||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(i=i||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(o.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&jr("scroll",e),i||l===u||(i=[])):(i=i||[]).push(c,u))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},Lo=function(e,t,n,r){n!==r&&(t.flags|=4)};var qo=!1,Yo=!1,Zo="function"==typeof WeakSet?WeakSet:Set,$o=null;function Xo(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){xu(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){xu(e,t,n)}}var tl=!1;function nl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var s=a.destroy;a.destroy=void 0,void 0!==s&&el(t,n,s)}a=a.next}while(a!==r)}}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function al(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function sl(e){var t=e.alternate;null!==t&&(e.alternate=null,sl(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fa],delete t[ha],delete t[ga],delete t[ma],delete t[ya]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function il(e){return 5===e.tag||3===e.tag||4===e.tag}function ol(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||il(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Xr));else if(4!==r&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function ul(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ul(e,t,n),e=e.sibling;null!==e;)ul(e,t,n),e=e.sibling}var cl=null,dl=!1;function fl(e,t,n){for(n=n.child;null!==n;)hl(e,t,n),n=n.sibling}function hl(e,t,n){if(st&&"function"==typeof st.onCommitFiberUnmount)try{st.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Yo||Xo(n,t);case 6:var r=cl,a=dl;cl=null,fl(e,t,n),dl=a,null!==(cl=r)&&(dl?(e=cl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cl.removeChild(n.stateNode));break;case 18:null!==cl&&(dl?(e=cl,n=n.stateNode,8===e.nodeType?la(e.parentNode,n):1===e.nodeType&&la(e,n),Gt(e)):la(cl,n.stateNode));break;case 4:r=cl,a=dl,cl=n.stateNode.containerInfo,dl=!0,fl(e,t,n),cl=r,dl=a;break;case 0:case 11:case 14:case 15:if(!Yo&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var s=a,i=s.destroy;s=s.tag,void 0!==i&&(2&s||4&s)&&el(n,t,i),a=a.next}while(a!==r)}fl(e,t,n);break;case 1:if(!Yo&&(Xo(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){xu(n,t,e)}fl(e,t,n);break;case 21:fl(e,t,n);break;case 22:1&n.mode?(Yo=(r=Yo)||null!==n.memoizedState,fl(e,t,n),Yo=r):fl(e,t,n);break;default:fl(e,t,n)}}function pl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Zo),t.forEach((function(t){var r=Pu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function gl(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var i=e,o=t,l=o;e:for(;null!==l;){switch(l.tag){case 5:cl=l.stateNode,dl=!1;break e;case 3:case 4:cl=l.stateNode.containerInfo,dl=!0;break e}l=l.return}if(null===cl)throw Error(s(160));hl(i,o,a),cl=null,dl=!1;var u=a.alternate;null!==u&&(u.return=null),a.return=null}catch(e){xu(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)ml(t,e),t=t.sibling}function ml(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gl(t,e),yl(e),4&r){try{nl(3,e,e.return),rl(3,e)}catch(t){xu(e,e.return,t)}try{nl(5,e,e.return)}catch(t){xu(e,e.return,t)}}break;case 1:gl(t,e),yl(e),512&r&&null!==n&&Xo(n,n.return);break;case 5:if(gl(t,e),yl(e),512&r&&null!==n&&Xo(n,n.return),32&e.flags){var a=e.stateNode;try{fe(a,"")}catch(t){xu(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,o=null!==n?n.memoizedProps:i,l=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===l&&"radio"===i.type&&null!=i.name&&Z(a,i),be(l,o);var c=be(l,i);for(o=0;o<u.length;o+=2){var d=u[o],f=u[o+1];"style"===d?me(a,f):"dangerouslySetInnerHTML"===d?de(a,f):"children"===d?fe(a,f):b(a,d,f,c)}switch(l){case"input":$(a,i);break;case"textarea":se(a,i);break;case"select":var h=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var p=i.value;null!=p?ne(a,!!i.multiple,p,!1):h!==!!i.multiple&&(null!=i.defaultValue?ne(a,!!i.multiple,i.defaultValue,!0):ne(a,!!i.multiple,i.multiple?[]:"",!1))}a[ha]=i}catch(t){xu(e,e.return,t)}}break;case 6:if(gl(t,e),yl(e),4&r){if(null===e.stateNode)throw Error(s(162));a=e.stateNode,i=e.memoizedProps;try{a.nodeValue=i}catch(t){xu(e,e.return,t)}}break;case 3:if(gl(t,e),yl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Gt(t.containerInfo)}catch(t){xu(e,e.return,t)}break;case 4:default:gl(t,e),yl(e);break;case 13:gl(t,e),yl(e),8192&(a=e.child).flags&&(i=null!==a.memoizedState,a.stateNode.isHidden=i,!i||null!==a.alternate&&null!==a.alternate.memoizedState||(_l=Ze())),4&r&&pl(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Yo=(c=Yo)||d,gl(t,e),Yo=c):gl(t,e),yl(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&1&e.mode)for($o=e,d=e.child;null!==d;){for(f=$o=d;null!==$o;){switch(p=(h=$o).child,h.tag){case 0:case 11:case 14:case 15:nl(4,h,h.return);break;case 1:Xo(h,h.return);var g=h.stateNode;if("function"==typeof g.componentWillUnmount){r=h,n=h.return;try{t=r,g.props=t.memoizedProps,g.state=t.memoizedState,g.componentWillUnmount()}catch(e){xu(r,n,e)}}break;case 5:Xo(h,h.return);break;case 22:if(null!==h.memoizedState){Al(f);continue}}null!==p?(p.return=h,$o=p):Al(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{a=f.stateNode,c?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(l=f.stateNode,o=null!=(u=f.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,l.style.display=ge("display",o))}catch(t){xu(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(t){xu(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:gl(t,e),yl(e),4&r&&pl(e);case 21:}}function yl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(il(n)){var r=n;break e}n=n.return}throw Error(s(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(fe(a,""),r.flags&=-33),ul(e,ol(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;ll(e,ol(e),i);break;default:throw Error(s(161))}}catch(t){xu(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function wl(e,t,n){$o=e,bl(e,t,n)}function bl(e,t,n){for(var r=!!(1&e.mode);null!==$o;){var a=$o,s=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||qo;if(!i){var o=a.alternate,l=null!==o&&null!==o.memoizedState||Yo;o=qo;var u=Yo;if(qo=i,(Yo=l)&&!u)for($o=a;null!==$o;)l=(i=$o).child,22===i.tag&&null!==i.memoizedState?El(a):null!==l?(l.return=i,$o=l):El(a);for(;null!==s;)$o=s,bl(s,t,n),s=s.sibling;$o=a,qo=o,Yo=u}vl(e)}else 8772&a.subtreeFlags&&null!==s?(s.return=a,$o=s):vl(e)}}function vl(e){for(;null!==$o;){var t=$o;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Yo||rl(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Yo)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:to(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Hs(t,i,r);break;case 3:var o=t.updateQueue;if(null!==o){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Hs(t,o,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Gt(f)}}}break;default:throw Error(s(163))}Yo||512&t.flags&&al(t)}catch(e){xu(t,t.return,e)}}if(t===e){$o=null;break}if(null!==(n=t.sibling)){n.return=t.return,$o=n;break}$o=t.return}}function Al(e){for(;null!==$o;){var t=$o;if(t===e){$o=null;break}var n=t.sibling;if(null!==n){n.return=t.return,$o=n;break}$o=t.return}}function El(e){for(;null!==$o;){var t=$o;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rl(4,t)}catch(e){xu(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){xu(t,a,e)}}var s=t.return;try{al(t)}catch(e){xu(t,s,e)}break;case 5:var i=t.return;try{al(t)}catch(e){xu(t,i,e)}}}catch(e){xu(t,t.return,e)}if(t===e){$o=null;break}var o=t.sibling;if(null!==o){o.return=t.return,$o=o;break}$o=t.return}}var kl,xl=Math.ceil,Nl=v.ReactCurrentDispatcher,Sl=v.ReactCurrentOwner,Cl=v.ReactCurrentBatchConfig,Pl=0,Rl=null,Il=null,Tl=0,Ol=0,Bl=xa(0),Ll=0,Ul=null,Fl=0,Dl=0,Ml=0,jl=null,zl=null,_l=0,Gl=1/0,Hl=null,Vl=!1,Ql=null,Kl=null,Wl=!1,Jl=null,ql=0,Yl=0,Zl=null,$l=-1,Xl=0;function eu(){return 6&Pl?Ze():-1!==$l?$l:$l=Ze()}function tu(e){return 1&e.mode?2&Pl&&0!==Tl?Tl&-Tl:null!==gs.transition?(0===Xl&&(Xl=gt()),Xl):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Yt(e.type):1}function nu(e,t,n,r){if(50<Yl)throw Yl=0,Zl=null,Error(s(185));yt(e,n,r),2&Pl&&e===Rl||(e===Rl&&(!(2&Pl)&&(Dl|=n),4===Ll&&ou(e,Tl)),ru(e,r),1===n&&0===Pl&&!(1&t.mode)&&(Gl=Ze()+500,ja&&Ga()))}function ru(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,s=e.pendingLanes;0<s;){var i=31-it(s),o=1<<i,l=a[i];-1===l?0!==(o&n)&&0===(o&r)||(a[i]=ht(o,t)):l<=t&&(e.expiredLanes|=o),s&=~o}}(e,t);var r=ft(e,e===Rl?Tl:0);if(0===r)null!==n&&Je(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Je(n),1===t)0===e.tag?function(e){ja=!0,_a(e)}(lu.bind(null,e)):_a(lu.bind(null,e)),ia((function(){!(6&Pl)&&Ga()})),n=null;else{switch(vt(r)){case 1:n=Xe;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ru(n,au.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function au(e,t){if($l=-1,Xl=0,6&Pl)throw Error(s(327));var n=e.callbackNode;if(Eu()&&e.callbackNode!==n)return null;var r=ft(e,e===Rl?Tl:0);if(0===r)return null;if(30&r||0!==(r&e.expiredLanes)||t)t=mu(e,r);else{t=r;var a=Pl;Pl|=2;var i=pu();for(Rl===e&&Tl===t||(Hl=null,Gl=Ze()+500,fu(e,t));;)try{wu();break}catch(t){hu(e,t)}Ss(),Nl.current=i,Pl=a,null!==Il?t=0:(Rl=null,Tl=0,t=Ll)}if(0!==t){if(2===t&&0!==(a=pt(e))&&(r=a,t=su(e,a)),1===t)throw n=Ul,fu(e,0),ou(e,r),ru(e,Ze()),n;if(6===t)ou(e,r);else{if(a=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],s=a.getSnapshot;a=a.value;try{if(!or(s(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)||(t=mu(e,r),2===t&&(i=pt(e),0!==i&&(r=i,t=su(e,i))),1!==t)))throw n=Ul,fu(e,0),ou(e,r),ru(e,Ze()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(s(345));case 2:case 5:Au(e,zl,Hl);break;case 3:if(ou(e,r),(130023424&r)===r&&10<(t=_l+500-Ze())){if(0!==ft(e,0))break;if(((a=e.suspendedLanes)&r)!==r){eu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(Au.bind(null,e,zl,Hl),t);break}Au(e,zl,Hl);break;case 4:if(ou(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var o=31-it(r);i=1<<o,(o=t[o])>a&&(a=o),r&=~i}if(r=a,10<(r=(120>(r=Ze()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*xl(r/1960))-r)){e.timeoutHandle=ra(Au.bind(null,e,zl,Hl),r);break}Au(e,zl,Hl);break;default:throw Error(s(329))}}}return ru(e,Ze()),e.callbackNode===n?au.bind(null,e):null}function su(e,t){var n=jl;return e.current.memoizedState.isDehydrated&&(fu(e,t).flags|=256),2!==(e=mu(e,t))&&(t=zl,zl=n,null!==t&&iu(t)),e}function iu(e){null===zl?zl=e:zl.push.apply(zl,e)}function ou(e,t){for(t&=~Ml,t&=~Dl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function lu(e){if(6&Pl)throw Error(s(327));Eu();var t=ft(e,0);if(!(1&t))return ru(e,Ze()),null;var n=mu(e,t);if(0!==e.tag&&2===n){var r=pt(e);0!==r&&(t=r,n=su(e,r))}if(1===n)throw n=Ul,fu(e,0),ou(e,t),ru(e,Ze()),n;if(6===n)throw Error(s(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Au(e,zl,Hl),ru(e,Ze()),null}function uu(e,t){var n=Pl;Pl|=1;try{return e(t)}finally{0===(Pl=n)&&(Gl=Ze()+500,ja&&Ga())}}function cu(e){null!==Jl&&0===Jl.tag&&!(6&Pl)&&Eu();var t=Pl;Pl|=1;var n=Cl.transition,r=bt;try{if(Cl.transition=null,bt=1,e)return e()}finally{bt=r,Cl.transition=n,!(6&(Pl=t))&&Ga()}}function du(){Ol=Bl.current,Na(Bl)}function fu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==Il)for(n=Il.return;null!==n;){var r=n;switch(ts(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ba();break;case 3:Ys(),Na(Ra),Na(Pa),ni();break;case 5:$s(r);break;case 4:Ys();break;case 13:case 19:Na(Xs);break;case 10:Cs(r.type._context);break;case 22:case 23:du()}n=n.return}if(Rl=e,Il=e=Bu(e.current,null),Tl=Ol=t,Ll=0,Ul=null,Ml=Dl=Fl=0,zl=jl=null,null!==Ts){for(t=0;t<Ts.length;t++)if(null!==(r=(n=Ts[t]).interleaved)){n.interleaved=null;var a=r.next,s=n.pending;if(null!==s){var i=s.next;s.next=a,r.next=i}n.pending=r}Ts=null}return e}function hu(e,t){for(;;){var n=Il;try{if(Ss(),ri.current=Zi,ui){for(var r=ii.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}ui=!1}if(si=0,li=oi=ii=null,ci=!1,di=0,Sl.current=null,null===n||null===n.return){Ll=1,Ul=t,Il=null;break}e:{var i=e,o=n.return,l=n,u=t;if(t=Tl,l.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,d=l,f=d.tag;if(!(1&d.mode||0!==f&&11!==f&&15!==f)){var h=d.alternate;h?(d.updateQueue=h.updateQueue,d.memoizedState=h.memoizedState,d.lanes=h.lanes):(d.updateQueue=null,d.memoizedState=null)}var p=mo(o);if(null!==p){p.flags&=-257,yo(p,o,l,0,t),1&p.mode&&go(i,c,t),u=c;var g=(t=p).updateQueue;if(null===g){var m=new Set;m.add(u),t.updateQueue=m}else g.add(u);break e}if(!(1&t)){go(i,c,t),gu();break e}u=Error(s(426))}else if(as&&1&l.mode){var y=mo(o);if(null!==y){!(65536&y.flags)&&(y.flags|=256),yo(y,o,l,0,t),ps(lo(u,l));break e}}i=u=lo(u,l),4!==Ll&&(Ll=2),null===jl?jl=[i]:jl.push(i),i=o;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,_s(i,ho(0,u,t));break e;case 1:l=u;var w=i.type,b=i.stateNode;if(!(128&i.flags||"function"!=typeof w.getDerivedStateFromError&&(null===b||"function"!=typeof b.componentDidCatch||null!==Kl&&Kl.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,_s(i,po(i,l,t));break e}}i=i.return}while(null!==i)}vu(n)}catch(e){t=e,Il===n&&null!==n&&(Il=n=n.return);continue}break}}function pu(){var e=Nl.current;return Nl.current=Zi,null===e?Zi:e}function gu(){0!==Ll&&3!==Ll&&2!==Ll||(Ll=4),null===Rl||!(268435455&Fl)&&!(268435455&Dl)||ou(Rl,Tl)}function mu(e,t){var n=Pl;Pl|=2;var r=pu();for(Rl===e&&Tl===t||(Hl=null,fu(e,t));;)try{yu();break}catch(t){hu(e,t)}if(Ss(),Pl=n,Nl.current=r,null!==Il)throw Error(s(261));return Rl=null,Tl=0,Ll}function yu(){for(;null!==Il;)bu(Il)}function wu(){for(;null!==Il&&!qe();)bu(Il)}function bu(e){var t=kl(e.alternate,e,Ol);e.memoizedProps=e.pendingProps,null===t?vu(e):Il=t,Sl.current=null}function vu(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=Jo(n,t)))return n.flags&=32767,void(Il=n);if(null===e)return Ll=6,void(Il=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Wo(n,t,Ol)))return void(Il=n);if(null!==(t=t.sibling))return void(Il=t);Il=t=e}while(null!==t);0===Ll&&(Ll=5)}function Au(e,t,n){var r=bt,a=Cl.transition;try{Cl.transition=null,bt=1,function(e,t,n,r){do{Eu()}while(null!==Jl);if(6&Pl)throw Error(s(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(s(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),s=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~s}}(e,i),e===Rl&&(Il=Rl=null,Tl=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Wl||(Wl=!0,Ru(tt,(function(){return Eu(),null}))),i=!!(15990&n.flags),15990&n.subtreeFlags||i){i=Cl.transition,Cl.transition=null;var o=bt;bt=1;var l=Pl;Pl|=4,Sl.current=null,function(e,t){if(ea=Vt,hr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var o=0,l=-1,u=-1,c=0,d=0,f=e,h=null;t:for(;;){for(var p;f!==n||0!==a&&3!==f.nodeType||(l=o+a),f!==i||0!==r&&3!==f.nodeType||(u=o+r),3===f.nodeType&&(o+=f.nodeValue.length),null!==(p=f.firstChild);)h=f,f=p;for(;;){if(f===e)break t;if(h===n&&++c===a&&(l=o),h===i&&++d===r&&(u=o),null!==(p=f.nextSibling))break;h=(f=h).parentNode}f=p}n=-1===l||-1===u?null:{start:l,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Vt=!1,$o=t;null!==$o;)if(e=(t=$o).child,1028&t.subtreeFlags&&null!==e)e.return=t,$o=e;else for(;null!==$o;){t=$o;try{var g=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==g){var m=g.memoizedProps,y=g.memoizedState,w=t.stateNode,b=w.getSnapshotBeforeUpdate(t.elementType===t.type?m:to(t.type,m),y);w.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var v=t.stateNode.containerInfo;1===v.nodeType?v.textContent="":9===v.nodeType&&v.documentElement&&v.removeChild(v.documentElement);break;default:throw Error(s(163))}}catch(e){xu(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,$o=e;break}$o=t.return}g=tl,tl=!1}(e,n),ml(n,e),pr(ta),Vt=!!ea,ta=ea=null,e.current=n,wl(n,e,a),Ye(),Pl=l,bt=o,Cl.transition=i}else e.current=n;if(Wl&&(Wl=!1,Jl=e,ql=a),0===(i=e.pendingLanes)&&(Kl=null),function(e){if(st&&"function"==typeof st.onCommitFiberRoot)try{st.onCommitFiberRoot(at,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),ru(e,Ze()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if(Vl)throw Vl=!1,e=Ql,Ql=null,e;!!(1&ql)&&0!==e.tag&&Eu(),1&(i=e.pendingLanes)?e===Zl?Yl++:(Yl=0,Zl=e):Yl=0,Ga()}(e,t,n,r)}finally{Cl.transition=a,bt=r}return null}function Eu(){if(null!==Jl){var e=vt(ql),t=Cl.transition,n=bt;try{if(Cl.transition=null,bt=16>e?16:e,null===Jl)var r=!1;else{if(e=Jl,Jl=null,ql=0,6&Pl)throw Error(s(331));var a=Pl;for(Pl|=4,$o=e.current;null!==$o;){var i=$o,o=i.child;if(16&$o.flags){var l=i.deletions;if(null!==l){for(var u=0;u<l.length;u++){var c=l[u];for($o=c;null!==$o;){var d=$o;switch(d.tag){case 0:case 11:case 15:nl(8,d,i)}var f=d.child;if(null!==f)f.return=d,$o=f;else for(;null!==$o;){var h=(d=$o).sibling,p=d.return;if(sl(d),d===c){$o=null;break}if(null!==h){h.return=p,$o=h;break}$o=p}}}var g=i.alternate;if(null!==g){var m=g.child;if(null!==m){g.child=null;do{var y=m.sibling;m.sibling=null,m=y}while(null!==m)}}$o=i}}if(2064&i.subtreeFlags&&null!==o)o.return=i,$o=o;else e:for(;null!==$o;){if(2048&(i=$o).flags)switch(i.tag){case 0:case 11:case 15:nl(9,i,i.return)}var w=i.sibling;if(null!==w){w.return=i.return,$o=w;break e}$o=i.return}}var b=e.current;for($o=b;null!==$o;){var v=(o=$o).child;if(2064&o.subtreeFlags&&null!==v)v.return=o,$o=v;else e:for(o=b;null!==$o;){if(2048&(l=$o).flags)try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){xu(l,l.return,e)}if(l===o){$o=null;break e}var A=l.sibling;if(null!==A){A.return=l.return,$o=A;break e}$o=l.return}}if(Pl=a,Ga(),st&&"function"==typeof st.onPostCommitFiberRoot)try{st.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,Cl.transition=t}}return!1}function ku(e,t,n){e=js(e,t=ho(0,t=lo(n,t),1),1),t=eu(),null!==e&&(yt(e,1,t),ru(e,t))}function xu(e,t,n){if(3===e.tag)ku(e,e,n);else for(;null!==t;){if(3===t.tag){ku(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Kl||!Kl.has(r))){t=js(t,e=po(t,e=lo(n,e),1),1),e=eu(),null!==t&&(yt(t,1,e),ru(t,e));break}}t=t.return}}function Nu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=eu(),e.pingedLanes|=e.suspendedLanes&n,Rl===e&&(Tl&n)===n&&(4===Ll||3===Ll&&(130023424&Tl)===Tl&&500>Ze()-_l?fu(e,0):Ml|=n),ru(e,t)}function Su(e,t){0===t&&(1&e.mode?(t=ct,!(130023424&(ct<<=1))&&(ct=4194304)):t=1);var n=eu();null!==(e=Ls(e,t))&&(yt(e,t,n),ru(e,n))}function Cu(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Su(e,n)}function Pu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(s(314))}null!==r&&r.delete(t),Su(e,n)}function Ru(e,t){return We(e,t)}function Iu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Tu(e,t,n,r){return new Iu(e,t,n,r)}function Ou(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Bu(e,t){var n=e.alternate;return null===n?((n=Tu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Lu(e,t,n,r,a,i){var o=2;if(r=e,"function"==typeof e)Ou(e)&&(o=1);else if("string"==typeof e)o=5;else e:switch(e){case k:return Uu(n.children,a,i,t);case x:o=8,a|=8;break;case N:return(e=Tu(12,n,t,2|a)).elementType=N,e.lanes=i,e;case R:return(e=Tu(13,n,t,a)).elementType=R,e.lanes=i,e;case I:return(e=Tu(19,n,t,a)).elementType=I,e.lanes=i,e;case B:return Fu(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:o=10;break e;case C:o=9;break e;case P:o=11;break e;case T:o=14;break e;case O:o=16,r=null;break e}throw Error(s(130,null==e?e:typeof e,""))}return(t=Tu(o,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function Uu(e,t,n,r){return(e=Tu(7,e,r,t)).lanes=n,e}function Fu(e,t,n,r){return(e=Tu(22,e,r,t)).elementType=B,e.lanes=n,e.stateNode={isHidden:!1},e}function Du(e,t,n){return(e=Tu(6,e,null,t)).lanes=n,e}function Mu(e,t,n){return(t=Tu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function ju(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mt(0),this.expirationTimes=mt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function zu(e,t,n,r,a,s,i,o,l){return e=new ju(e,t,n,o,l),1===t?(t=1,!0===s&&(t|=8)):t=0,s=Tu(3,null,null,t),e.current=s,s.stateNode=e,s.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Fs(s),e}function _u(e){if(!e)return Ca;e:{if(Ge(e=e._reactInternals)!==e||1!==e.tag)throw Error(s(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Oa(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(s(171))}if(1===e.tag){var n=e.type;if(Oa(n))return Ua(e,n,t)}return t}function Gu(e,t,n,r,a,s,i,o,l){return(e=zu(n,r,!0,e,0,s,0,o,l)).context=_u(null),n=e.current,(s=Ms(r=eu(),a=tu(n))).callback=null!=t?t:null,js(n,s,a),e.current.lanes=a,yt(e,a,r),ru(e,r),e}function Hu(e,t,n,r){var a=t.current,s=eu(),i=tu(a);return n=_u(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ms(s,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=js(a,t,i))&&(nu(e,a,i,s),zs(e,a,i)),i}function Vu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Qu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ku(e,t){Qu(e,t),(e=e.alternate)&&Qu(e,t)}kl=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ra.current)bo=!0;else{if(0===(e.lanes&n)&&!(128&t.flags))return bo=!1,function(e,t,n){switch(t.tag){case 3:Ro(t),hs();break;case 5:Zs(t);break;case 1:Oa(t.type)&&Fa(t);break;case 4:qs(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;Sa(Es,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Sa(Xs,1&Xs.current),t.flags|=128,null):0!==(n&t.child.childLanes)?Do(e,t,n):(Sa(Xs,1&Xs.current),null!==(e=Vo(e,t,n))?e.sibling:null);Sa(Xs,1&Xs.current);break;case 19:if(r=0!==(n&t.childLanes),128&e.flags){if(r)return Go(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Sa(Xs,Xs.current),r)break;return null;case 22:case 23:return t.lanes=0,xo(e,t,n)}return Vo(e,t,n)}(e,t,n);bo=!!(131072&e.flags)}else bo=!1,as&&1048576&t.flags&&Xa(t,Ka,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Ho(e,t),e=t.pendingProps;var a=Ta(t,Pa.current);Rs(t,n),a=gi(null,t,r,e,a,n);var i=mi();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Oa(r)?(i=!0,Fa(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Fs(t),a.updater=ro,t.stateNode=a,a._reactInternals=t,oo(t,r,e,n),t=Po(null,t,r,!0,i,n)):(t.tag=0,as&&i&&es(t),vo(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Ho(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Ou(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===T)return 14}return 2}(r),e=to(r,e),a){case 0:t=So(null,t,r,e,n);break e;case 1:t=Co(null,t,r,e,n);break e;case 11:t=Ao(null,t,r,e,n);break e;case 14:t=Eo(null,t,r,to(r.type,e),n);break e}throw Error(s(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,So(e,t,r,a=t.elementType===r?a:to(r,a),n);case 1:return r=t.type,a=t.pendingProps,Co(e,t,r,a=t.elementType===r?a:to(r,a),n);case 3:e:{if(Ro(t),null===e)throw Error(s(387));r=t.pendingProps,a=(i=t.memoizedState).element,Ds(e,t),Gs(t,r,null,n);var o=t.memoizedState;if(r=o.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:o.cache,pendingSuspenseBoundaries:o.pendingSuspenseBoundaries,transitions:o.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Io(e,t,r,n,a=lo(Error(s(423)),t));break e}if(r!==a){t=Io(e,t,r,n,a=lo(Error(s(424)),t));break e}for(rs=ua(t.stateNode.containerInfo.firstChild),ns=t,as=!0,ss=null,n=As(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(hs(),r===a){t=Vo(e,t,n);break e}vo(e,t,r,n)}t=t.child}return t;case 5:return Zs(t),null===e&&us(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,o=a.children,na(r,a)?o=null:null!==i&&na(r,i)&&(t.flags|=32),No(e,t),vo(e,t,o,n),t.child;case 6:return null===e&&us(t),null;case 13:return Do(e,t,n);case 4:return qs(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=vs(t,null,r,n):vo(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Ao(e,t,r,a=t.elementType===r?a:to(r,a),n);case 7:return vo(e,t,t.pendingProps,n),t.child;case 8:case 12:return vo(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,o=a.value,Sa(Es,r._currentValue),r._currentValue=o,null!==i)if(or(i.value,o)){if(i.children===a.children&&!Ra.current){t=Vo(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var l=i.dependencies;if(null!==l){o=i.child;for(var u=l.firstContext;null!==u;){if(u.context===r){if(1===i.tag){(u=Ms(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?u.next=u:(u.next=d.next,d.next=u),c.pending=u}}i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),Ps(i.return,n,t),l.lanes|=n;break}u=u.next}}else if(10===i.tag)o=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(o=i.return))throw Error(s(341));o.lanes|=n,null!==(l=o.alternate)&&(l.lanes|=n),Ps(o,n,t),o=i.sibling}else o=i.child;if(null!==o)o.return=i;else for(o=i;null!==o;){if(o===t){o=null;break}if(null!==(i=o.sibling)){i.return=o.return,o=i;break}o=o.return}i=o}vo(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Rs(t,n),r=r(a=Is(a)),t.flags|=1,vo(e,t,r,n),t.child;case 14:return a=to(r=t.type,t.pendingProps),Eo(e,t,r,a=to(r.type,a),n);case 15:return ko(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:to(r,a),Ho(e,t),t.tag=1,Oa(r)?(e=!0,Fa(t)):e=!1,Rs(t,n),so(t,r,a),oo(t,r,a,n),Po(null,t,r,!0,e,n);case 19:return Go(e,t,n);case 22:return xo(e,t,n)}throw Error(s(156,t.tag))};var Wu="function"==typeof reportError?reportError:function(e){console.error(e)};function Ju(e){this._internalRoot=e}function qu(e){this._internalRoot=e}function Yu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function $u(){}function Xu(e,t,n,r,a){var s=n._reactRootContainer;if(s){var i=s;if("function"==typeof a){var o=a;a=function(){var e=Vu(i);o.call(e)}}Hu(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var s=r;r=function(){var e=Vu(i);s.call(e)}}var i=Gu(t,r,e,0,null,!1,0,"",$u);return e._reactRootContainer=i,e[pa]=i.current,Gr(8===e.nodeType?e.parentNode:e),cu(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var o=r;r=function(){var e=Vu(l);o.call(e)}}var l=zu(e,0,!1,null,0,!1,0,"",$u);return e._reactRootContainer=l,e[pa]=l.current,Gr(8===e.nodeType?e.parentNode:e),cu((function(){Hu(t,l,n,r)})),l}(n,t,e,a,r);return Vu(i)}qu.prototype.render=Ju.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(s(409));Hu(e,t,null,null)},qu.prototype.unmount=Ju.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cu((function(){Hu(null,e,null,null)})),t[pa]=null}},qu.prototype.unstable_scheduleHydration=function(e){if(e){var t=xt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Bt.length&&0!==t&&t<Bt[n].priority;n++);Bt.splice(n,0,e),0===n&&Dt(e)}},At=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(wt(t,1|n),ru(t,Ze()),!(6&Pl)&&(Gl=Ze()+500,Ga()))}break;case 13:cu((function(){var t=Ls(e,1);if(null!==t){var n=eu();nu(t,e,1,n)}})),Ku(e,1)}},Et=function(e){if(13===e.tag){var t=Ls(e,134217728);null!==t&&nu(t,e,134217728,eu()),Ku(e,134217728)}},kt=function(e){if(13===e.tag){var t=tu(e),n=Ls(e,t);null!==n&&nu(n,e,t,eu()),Ku(e,t)}},xt=function(){return bt},Nt=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Ee=function(e,t,n){switch(t){case"input":if($(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=Aa(r);if(!a)throw Error(s(90));W(r),$(r,a)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=uu,Re=cu;var ec={usingClientEntryPoint:!1,Events:[ba,va,Aa,Se,Ce,uu]},tc={findFiberByHostInstance:wa,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:v.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Qe(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{at=rc.inject(nc),st=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Yu(t))throw Error(s(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Yu(e))throw Error(s(299));var n=!1,r="",a=Wu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=zu(e,1,!1,null,0,n,0,r,a),e[pa]=t.current,Gr(8===e.nodeType?e.parentNode:e),new Ju(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(s(188));throw e=Object.keys(e).join(","),Error(s(268,e))}return null===(e=Qe(t))?null:e.stateNode},t.flushSync=function(e){return cu(e)},t.hydrate=function(e,t,n){if(!Zu(t))throw Error(s(200));return Xu(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Yu(e))throw Error(s(405));var r=null!=n&&n.hydratedSources||null,a=!1,i="",o=Wu;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(o=n.onRecoverableError)),t=Gu(t,null,e,1,null!=n?n:null,a,0,i,o),e[pa]=t.current,Gr(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new qu(t)},t.render=function(e,t,n){if(!Zu(t))throw Error(s(200));return Xu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zu(e))throw Error(s(40));return!!e._reactRootContainer&&(cu((function(){Xu(null,null,e,!1,(function(){e._reactRootContainer=null,e[pa]=null}))})),!0)},t.unstable_batchedUpdates=uu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zu(n))throw Error(s(200));if(null==e||void 0===e._reactInternals)throw Error(s(38));return Xu(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},848:(e,t,n)=>{e.exports=n(20)},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(551)},982:(e,t,n)=>{e.exports=n(463)}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var s=r[e]={exports:{}};return n[e](s,s.exports,a),s.exports}t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var s=Object.create(null);a.r(s);var i={};e=e||[null,t({}),t([]),t(t)];for(var o=2&r&&n;"object"==typeof o&&!~e.indexOf(o);o=t(o))Object.getOwnPropertyNames(o).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,a.d(s,i),s},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};a.r(s),a.d(s,{OG:()=>it,My:()=>Ze,Ph:()=>et,lX:()=>tt,Id:()=>st,fg:()=>ut,qj:()=>at,aT:()=>Xe,lq:()=>nt,z:()=>rt,Q5:()=>dt});var i,o=a(848),l=a(338),u=a(540),c=a.t(u,2);function d(){return d=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},d.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(i||(i={}));const f="popstate";function h(e,t){if(!1===e||null==e)throw new Error(t)}function p(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function g(e,t){return{usr:e.state,key:e.key,idx:t}}function m(e,t,n,r){return void 0===n&&(n=null),d({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?w(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function y(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function w(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var b;function v(e,t,n){return void 0===n&&(n="/"),function(e,t,n,r){let a=L(("string"==typeof t?w(t):t).pathname||"/",n);if(null==a)return null;let s=A(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){let n=e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]));return n?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(s);let i=null;for(let e=0;null==i&&e<s.length;++e){let t=B(a);i=T(s[e],t,r)}return i}(e,t,n,!1)}function A(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let a=(e,a,s)=>{let i={relativePath:void 0===s?e.path||"":s,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};i.relativePath.startsWith("/")&&(h(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let o=M([r,i.relativePath]),l=n.concat(i);e.children&&e.children.length>0&&(h(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+o+'".'),A(e.children,t,l,o)),(null!=e.path||e.index)&&t.push({path:o,score:I(o,e.index),routesMeta:l})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of E(e.path))a(e,t,n);else a(e,t)})),t}function E(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),s=n.replace(/\?$/,"");if(0===r.length)return a?[s,""]:[s];let i=E(r.join("/")),o=[];return o.push(...i.map((e=>""===e?s:[s,e].join("/")))),a&&o.push(...i),o.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(b||(b={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const k=/^:[\w-]+$/,x=3,N=2,S=1,C=10,P=-2,R=e=>"*"===e;function I(e,t){let n=e.split("/"),r=n.length;return n.some(R)&&(r+=P),t&&(r+=N),n.filter((e=>!R(e))).reduce(((e,t)=>e+(k.test(t)?x:""===t?S:C)),r)}function T(e,t,n){void 0===n&&(n=!1);let{routesMeta:r}=e,a={},s="/",i=[];for(let e=0;e<r.length;++e){let o=r[e],l=e===r.length-1,u="/"===s?t:t.slice(s.length)||"/",c=O({path:o.relativePath,caseSensitive:o.caseSensitive,end:l},u),d=o.route;if(!c&&l&&n&&!r[r.length-1].route.index&&(c=O({path:o.relativePath,caseSensitive:o.caseSensitive,end:!1},u)),!c)return null;Object.assign(a,c.params),i.push({params:a,pathname:M([s,c.pathname]),pathnameBase:j(M([s,c.pathnameBase])),route:d}),"/"!==c.pathnameBase&&(s=M([s,c.pathnameBase]))}return i}function O(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),p("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let s=a[0],i=s.replace(/(.)\/+$/,"$1"),o=a.slice(1);return{params:r.reduce(((e,t,n)=>{let{paramName:r,isOptional:a}=t;if("*"===r){let e=o[n]||"";i=s.slice(0,s.length-e.length).replace(/(.)\/+$/,"$1")}const l=o[n];return e[r]=a&&!l?void 0:(l||"").replace(/%2F/g,"/"),e}),{}),pathname:s,pathnameBase:i,pattern:e}}function B(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return p(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function L(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function U(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function F(e,t){let n=function(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}(e);return t?n.map(((e,t)=>t===n.length-1?e.pathname:e.pathnameBase)):n.map((e=>e.pathnameBase))}function D(e,t,n,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=w(e):(a=d({},e),h(!a.pathname||!a.pathname.includes("?"),U("?","pathname","search",a)),h(!a.pathname||!a.pathname.includes("#"),U("#","pathname","hash",a)),h(!a.search||!a.search.includes("#"),U("#","search","hash",a)));let s,i=""===e||""===a.pathname,o=i?"/":a.pathname;if(null==o)s=n;else{let e=t.length-1;if(!r&&o.startsWith("..")){let t=o.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}s=e>=0?t[e]:"/"}let l=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?w(e):e,s=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:s,search:z(r),hash:_(a)}}(a,s),u=o&&"/"!==o&&o.endsWith("/"),c=(i||"."===o)&&n.endsWith("/");return l.pathname.endsWith("/")||!u&&!c||(l.pathname+="/"),l}const M=e=>e.join("/").replace(/\/\/+/g,"/"),j=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),z=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",_=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const G=["post","put","patch","delete"],H=(new Set(G),["get",...G]);function V(){return V=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},V.apply(this,arguments)}new Set(H),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const Q=u.createContext(null),K=u.createContext(null),W=u.createContext(null),J=u.createContext(null),q=u.createContext({outlet:null,matches:[],isDataRoute:!1}),Y=u.createContext(null);function Z(){return null!=u.useContext(J)}function $(){return Z()||h(!1),u.useContext(J).location}function X(e){u.useContext(W).static||u.useLayoutEffect(e)}function ee(){let{isDataRoute:e}=u.useContext(q);return e?function(){let{router:e}=function(){let e=u.useContext(Q);return e||h(!1),e}(ie.UseNavigateStable),t=le(oe.UseNavigateStable),n=u.useRef(!1);return X((()=>{n.current=!0})),u.useCallback((function(r,a){void 0===a&&(a={}),n.current&&("number"==typeof r?e.navigate(r):e.navigate(r,V({fromRouteId:t},a)))}),[e,t])}():function(){Z()||h(!1);let e=u.useContext(Q),{basename:t,future:n,navigator:r}=u.useContext(W),{matches:a}=u.useContext(q),{pathname:s}=$(),i=JSON.stringify(F(a,n.v7_relativeSplatPath)),o=u.useRef(!1);return X((()=>{o.current=!0})),u.useCallback((function(n,a){if(void 0===a&&(a={}),!o.current)return;if("number"==typeof n)return void r.go(n);let l=D(n,JSON.parse(i),s,"path"===a.relative);null==e&&"/"!==t&&(l.pathname="/"===l.pathname?t:M([t,l.pathname])),(a.replace?r.replace:r.push)(l,a.state,a)}),[t,r,i,s,e])}()}function te(e,t,n,r){Z()||h(!1);let{navigator:a}=u.useContext(W),{matches:s}=u.useContext(q),o=s[s.length-1],l=o?o.params:{},c=(o&&o.pathname,o?o.pathnameBase:"/");o&&o.route;let d,f=$();if(t){var p;let e="string"==typeof t?w(t):t;"/"===c||(null==(p=e.pathname)?void 0:p.startsWith(c))||h(!1),d=e}else d=f;let g=d.pathname||"/",m=g;if("/"!==c){let e=c.replace(/^\//,"").split("/");m="/"+g.replace(/^\//,"").split("/").slice(e.length).join("/")}let y=v(e,{pathname:m}),b=function(e,t,n,r){var a;if(void 0===t&&(t=[]),void 0===n&&(n=null),void 0===r&&(r=null),null==e){var s;if(!n)return null;if(n.errors)e=n.matches;else{if(!(null!=(s=r)&&s.v7_partialHydration&&0===t.length&&!n.initialized&&n.matches.length>0))return null;e=n.matches}}let i=e,o=null==(a=n)?void 0:a.errors;if(null!=o){let e=i.findIndex((e=>e.route.id&&void 0!==(null==o?void 0:o[e.route.id])));e>=0||h(!1),i=i.slice(0,Math.min(i.length,e+1))}let l=!1,c=-1;if(n&&r&&r.v7_partialHydration)for(let e=0;e<i.length;e++){let t=i[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(c=e),t.route.id){let{loaderData:e,errors:r}=n,a=t.route.loader&&void 0===e[t.route.id]&&(!r||void 0===r[t.route.id]);if(t.route.lazy||a){l=!0,i=c>=0?i.slice(0,c+1):[i[0]];break}}}return i.reduceRight(((e,r,a)=>{let s,d=!1,f=null,h=null;var p;n&&(s=o&&r.route.id?o[r.route.id]:void 0,f=r.route.errorElement||re,l&&(c<0&&0===a?(ue[p="route-fallback"]||(ue[p]=!0),d=!0,h=null):c===a&&(d=!0,h=r.route.hydrateFallbackElement||null)));let g=t.concat(i.slice(0,a+1)),m=()=>{let t;return t=s?f:d?h:r.route.Component?u.createElement(r.route.Component,null):r.route.element?r.route.element:e,u.createElement(se,{match:r,routeContext:{outlet:e,matches:g,isDataRoute:null!=n},children:t})};return n&&(r.route.ErrorBoundary||r.route.errorElement||0===a)?u.createElement(ae,{location:n.location,revalidation:n.revalidation,component:f,error:s,children:m(),routeContext:{outlet:null,matches:g,isDataRoute:!0}}):m()}),null)}(y&&y.map((e=>Object.assign({},e,{params:Object.assign({},l,e.params),pathname:M([c,a.encodeLocation?a.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:M([c,a.encodeLocation?a.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),s,n,r);return t&&b?u.createElement(J.Provider,{value:{location:V({pathname:"/",search:"",hash:"",state:null,key:"default"},d),navigationType:i.Pop}},b):b}function ne(){let e=function(){var e;let t=u.useContext(Y),n=function(){let e=u.useContext(K);return e||h(!1),e}(oe.UseRouteError),r=le(oe.UseRouteError);return void 0!==t?t:null==(e=n.errors)?void 0:e[r]}(),t=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,r={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return u.createElement(u.Fragment,null,u.createElement("h2",null,"Unexpected Application Error!"),u.createElement("h3",{style:{fontStyle:"italic"}},t),n?u.createElement("pre",{style:r},n):null,null)}const re=u.createElement(ne,null);class ae extends u.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?u.createElement(q.Provider,{value:this.props.routeContext},u.createElement(Y.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function se(e){let{routeContext:t,match:n,children:r}=e,a=u.useContext(Q);return a&&a.static&&a.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(a.staticContext._deepestRenderedBoundaryId=n.route.id),u.createElement(q.Provider,{value:t},r)}var ie=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(ie||{}),oe=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(oe||{});function le(e){let t=function(){let e=u.useContext(q);return e||h(!1),e}(),n=t.matches[t.matches.length-1];return n.route.id||h(!1),n.route.id}const ue={};function ce(e){let{to:t,replace:n,state:r,relative:a}=e;Z()||h(!1);let{future:s,static:i}=u.useContext(W),{matches:o}=u.useContext(q),{pathname:l}=$(),c=ee(),d=D(t,F(o,s.v7_relativeSplatPath),l,"path"===a),f=JSON.stringify(d);return u.useEffect((()=>c(JSON.parse(f),{replace:n,state:r,relative:a})),[c,f,a,n,r]),null}function de(e){h(!1)}function fe(e){let{basename:t="/",children:n=null,location:r,navigationType:a=i.Pop,navigator:s,static:o=!1,future:l}=e;Z()&&h(!1);let c=t.replace(/^\/*/,"/"),d=u.useMemo((()=>({basename:c,navigator:s,static:o,future:V({v7_relativeSplatPath:!1},l)})),[c,l,s,o]);"string"==typeof r&&(r=w(r));let{pathname:f="/",search:p="",hash:g="",state:m=null,key:y="default"}=r,b=u.useMemo((()=>{let e=L(f,c);return null==e?null:{location:{pathname:e,search:p,hash:g,state:m,key:y},navigationType:a}}),[c,f,p,g,m,y,a]);return null==b?null:u.createElement(W.Provider,{value:d},u.createElement(J.Provider,{children:n,value:b}))}function he(e){let{children:t,location:n}=e;return te(pe(t),n)}function pe(e,t){void 0===t&&(t=[]);let n=[];return u.Children.forEach(e,((e,r)=>{if(!u.isValidElement(e))return;let a=[...t,r];if(e.type===u.Fragment)return void n.push.apply(n,pe(e.props.children,a));e.type!==de&&h(!1),e.props.index&&e.props.children&&h(!1);let s={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(s.children=pe(e.props.children,a)),n.push(s)})),n}c.startTransition,new Promise((()=>{})),u.Component;var ge=a(961),me=a.t(ge,2);new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);try{window.__reactRouterVersion="6"}catch(e){}new Map;const ye=c.startTransition;function we(e){let{basename:t,children:n,future:r,window:a}=e,s=u.useRef();var o;null==s.current&&(s.current=(void 0===(o={window:a,v5Compat:!0})&&(o={}),function(e,t,n,r){void 0===r&&(r={});let{window:a=document.defaultView,v5Compat:s=!1}=r,o=a.history,l=i.Pop,u=null,c=p();function p(){return(o.state||{idx:null}).idx}function w(){l=i.Pop;let e=p(),t=null==e?null:e-c;c=e,u&&u({action:l,location:v.location,delta:t})}function b(e){let t="null"!==a.location.origin?a.location.origin:a.location.href,n="string"==typeof e?e:y(e);return n=n.replace(/ $/,"%20"),h(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==c&&(c=0,o.replaceState(d({},o.state,{idx:c}),""));let v={get action(){return l},get location(){return e(a,o)},listen(e){if(u)throw new Error("A history only accepts one active listener");return a.addEventListener(f,w),u=e,()=>{a.removeEventListener(f,w),u=null}},createHref:e=>t(a,e),createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){l=i.Push;let r=m(v.location,e,t);n&&n(r,e),c=p()+1;let d=g(r,c),f=v.createHref(r);try{o.pushState(d,"",f)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;a.location.assign(f)}s&&u&&u({action:l,location:v.location,delta:1})},replace:function(e,t){l=i.Replace;let r=m(v.location,e,t);n&&n(r,e),c=p();let a=g(r,c),d=v.createHref(r);o.replaceState(a,"",d),s&&u&&u({action:l,location:v.location,delta:0})},go:e=>o.go(e)};return v}((function(e,t){let{pathname:n,search:r,hash:a}=e.location;return m("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:y(t)}),null,o)));let l=s.current,[c,p]=u.useState({action:l.action,location:l.location}),{v7_startTransition:w}=r||{},b=u.useCallback((e=>{w&&ye?ye((()=>p(e))):p(e)}),[p,w]);return u.useLayoutEffect((()=>l.listen(b)),[l,b]),u.useEffect((()=>{return null==(e=r)||e.v7_startTransition,void 0===(null==e?void 0:e.v7_relativeSplatPath)&&(!t||t.v7_relativeSplatPath),void(t&&(t.v7_fetcherPersist,t.v7_normalizeFormMethod,t.v7_partialHydration,t.v7_skipActionErrorRevalidation));var e,t}),[r]),u.createElement(fe,{basename:t,children:n,location:c.location,navigationType:c.action,navigator:l,future:r})}var be,ve;function Ae(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`Wrong positive integer: ${e}`)}function Ee(e,...t){if(!(e instanceof Uint8Array))throw new Error("Expected Uint8Array");if(t.length>0&&!t.includes(e.length))throw new Error(`Expected Uint8Array of length ${t}, not of length=${e.length}`)}function ke(e){if("function"!=typeof e||"function"!=typeof e.create)throw new Error("Hash should be wrapped by utils.wrapConstructor");Ae(e.outputLen),Ae(e.blockLen)}function xe(e,t=!0){if(e.destroyed)throw new Error("Hash instance has been destroyed");if(t&&e.finished)throw new Error("Hash#digest() has already been called")}function Ne(e,t){Ee(e);const n=t.outputLen;if(e.length<n)throw new Error(`digestInto() expects output buffer of length at least ${n}`)}me.flushSync,c.useId,"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement,function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"}(be||(be={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(ve||(ve={}));const Se="object"==typeof globalThis&&"crypto"in globalThis?globalThis.crypto:void 0,Ce=e=>e instanceof Uint8Array,Pe=e=>new Uint32Array(e.buffer,e.byteOffset,Math.floor(e.byteLength/4)),Re=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),Ie=(e,t)=>e<<32-t|e>>>t;if(68!==new Uint8Array(new Uint32Array([287454020]).buffer)[0])throw new Error("Non little-endian hardware is not supported");const Te=async()=>{};async function Oe(e,t,n){let r=Date.now();for(let a=0;a<e;a++){n(a);const e=Date.now()-r;e>=0&&e<t||(await Te(),r+=e)}}function Be(e){if("string"==typeof e&&(e=function(e){if("string"!=typeof e)throw new Error("utf8ToBytes expected string, got "+typeof e);return new Uint8Array((new TextEncoder).encode(e))}(e)),!Ce(e))throw new Error("expected Uint8Array, got "+typeof e);return e}class Le{clone(){return this._cloneInto()}}const Ue={}.toString;function Fe(e,t){if(void 0!==t&&"[object Object]"!==Ue.call(t))throw new Error("Options should be object or undefined");return Object.assign(e,t)}function De(e){const t=t=>e().update(Be(t)).digest(),n=e();return t.outputLen=n.outputLen,t.blockLen=n.blockLen,t.create=()=>e(),t}function Me(e=32){if(Se&&"function"==typeof Se.getRandomValues)return Se.getRandomValues(new Uint8Array(e));throw new Error("crypto.getRandomValues must be defined")}class je extends Le{constructor(e,t,n,r){super(),this.blockLen=e,this.outputLen=t,this.padOffset=n,this.isLE=r,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(e),this.view=Re(this.buffer)}update(e){xe(this);const{view:t,buffer:n,blockLen:r}=this,a=(e=Be(e)).length;for(let s=0;s<a;){const i=Math.min(r-this.pos,a-s);if(i!==r)n.set(e.subarray(s,s+i),this.pos),this.pos+=i,s+=i,this.pos===r&&(this.process(t,0),this.pos=0);else{const t=Re(e);for(;r<=a-s;s+=r)this.process(t,s)}}return this.length+=e.length,this.roundClean(),this}digestInto(e){xe(this),Ne(e,this),this.finished=!0;const{buffer:t,view:n,blockLen:r,isLE:a}=this;let{pos:s}=this;t[s++]=128,this.buffer.subarray(s).fill(0),this.padOffset>r-s&&(this.process(n,0),s=0);for(let e=s;e<r;e++)t[e]=0;!function(e,t,n,r){if("function"==typeof e.setBigUint64)return e.setBigUint64(t,n,r);const a=BigInt(32),s=BigInt(4294967295),i=Number(n>>a&s),o=Number(n&s),l=r?4:0,u=r?0:4;e.setUint32(t+l,i,r),e.setUint32(t+u,o,r)}(n,r-8,BigInt(8*this.length),a),this.process(n,0);const i=Re(e),o=this.outputLen;if(o%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const l=o/4,u=this.get();if(l>u.length)throw new Error("_sha2: outputLen bigger than state");for(let e=0;e<l;e++)i.setUint32(4*e,u[e],a)}digest(){const{buffer:e,outputLen:t}=this;this.digestInto(e);const n=e.slice(0,t);return this.destroy(),n}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());const{blockLen:t,buffer:n,length:r,finished:a,destroyed:s,pos:i}=this;return e.length=r,e.pos=i,e.finished=a,e.destroyed=s,r%t&&e.buffer.set(n),e}}const ze=(e,t,n)=>e&t^~e&n,_e=(e,t,n)=>e&t^e&n^t&n,Ge=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),He=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),Ve=new Uint32Array(64);class Qe extends je{constructor(){super(64,32,8,!1),this.A=0|He[0],this.B=0|He[1],this.C=0|He[2],this.D=0|He[3],this.E=0|He[4],this.F=0|He[5],this.G=0|He[6],this.H=0|He[7]}get(){const{A:e,B:t,C:n,D:r,E:a,F:s,G:i,H:o}=this;return[e,t,n,r,a,s,i,o]}set(e,t,n,r,a,s,i,o){this.A=0|e,this.B=0|t,this.C=0|n,this.D=0|r,this.E=0|a,this.F=0|s,this.G=0|i,this.H=0|o}process(e,t){for(let n=0;n<16;n++,t+=4)Ve[n]=e.getUint32(t,!1);for(let e=16;e<64;e++){const t=Ve[e-15],n=Ve[e-2],r=Ie(t,7)^Ie(t,18)^t>>>3,a=Ie(n,17)^Ie(n,19)^n>>>10;Ve[e]=a+Ve[e-7]+r+Ve[e-16]|0}let{A:n,B:r,C:a,D:s,E:i,F:o,G:l,H:u}=this;for(let e=0;e<64;e++){const t=u+(Ie(i,6)^Ie(i,11)^Ie(i,25))+ze(i,o,l)+Ge[e]+Ve[e]|0,c=(Ie(n,2)^Ie(n,13)^Ie(n,22))+_e(n,r,a)|0;u=l,l=o,o=i,i=s+t|0,s=a,a=r,r=n,n=t+c|0}n=n+this.A|0,r=r+this.B|0,a=a+this.C|0,s=s+this.D|0,i=i+this.E|0,o=o+this.F|0,l=l+this.G|0,u=u+this.H|0,this.set(n,r,a,s,i,o,l,u)}roundClean(){Ve.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}const Ke=De((()=>new Qe)),We=(BigInt(0),BigInt(1)),Je=BigInt(2),qe=e=>e instanceof Uint8Array,Ye=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,"0")));function Ze(e){if(!qe(e))throw new Error("Uint8Array expected");let t="";for(let n=0;n<e.length;n++)t+=Ye[e[n]];return t}function $e(e){if("string"!=typeof e)throw new Error("hex string expected, got "+typeof e);return BigInt(""===e?"0":`0x${e}`)}function Xe(e){if("string"!=typeof e)throw new Error("hex string expected, got "+typeof e);const t=e.length;if(t%2)throw new Error("padded hex string expected, got unpadded hex of length "+t);const n=new Uint8Array(t/2);for(let t=0;t<n.length;t++){const r=2*t,a=e.slice(r,r+2),s=Number.parseInt(a,16);if(Number.isNaN(s)||s<0)throw new Error("Invalid byte sequence");n[t]=s}return n}function et(e){return $e(Ze(e))}function tt(e){if(!qe(e))throw new Error("Uint8Array expected");return $e(Ze(Uint8Array.from(e).reverse()))}function nt(e,t){return Xe(e.toString(16).padStart(2*t,"0"))}function rt(e,t){return nt(e,t).reverse()}function at(e,t,n){let r;if("string"==typeof t)try{r=Xe(t)}catch(n){throw new Error(`${e} must be valid hex string, got "${t}". Cause: ${n}`)}else{if(!qe(t))throw new Error(`${e} must be hex string or Uint8Array`);r=Uint8Array.from(t)}const a=r.length;if("number"==typeof n&&a!==n)throw new Error(`${e} expected ${n} bytes, got ${a}`);return r}function st(...e){const t=new Uint8Array(e.reduce(((e,t)=>e+t.length),0));let n=0;return e.forEach((e=>{if(!qe(e))throw new Error("Uint8Array expected");t.set(e,n),n+=e.length})),t}const it=e=>(Je<<BigInt(e-1))-We,ot=e=>new Uint8Array(e),lt=e=>Uint8Array.from(e);function ut(e,t,n){if("number"!=typeof e||e<2)throw new Error("hashLen must be a number");if("number"!=typeof t||t<2)throw new Error("qByteLen must be a number");if("function"!=typeof n)throw new Error("hmacFn must be a function");let r=ot(e),a=ot(e),s=0;const i=()=>{r.fill(1),a.fill(0),s=0},o=(...e)=>n(a,r,...e),l=(e=ot())=>{a=o(lt([0]),e),r=o(),0!==e.length&&(a=o(lt([1]),e),r=o())},u=()=>{if(s++>=1e3)throw new Error("drbg: tried 1000 values");let e=0;const n=[];for(;e<t;){r=o();const t=r.slice();n.push(t),e+=r.length}return st(...n)};return(e,t)=>{let n;for(i(),l(e);!(n=t(u()));)l();return i(),n}}const ct={bigint:e=>"bigint"==typeof e,function:e=>"function"==typeof e,boolean:e=>"boolean"==typeof e,string:e=>"string"==typeof e,stringOrUint8Array:e=>"string"==typeof e||e instanceof Uint8Array,isSafeInteger:e=>Number.isSafeInteger(e),array:e=>Array.isArray(e),field:(e,t)=>t.Fp.isValid(e),hash:e=>"function"==typeof e&&Number.isSafeInteger(e.outputLen)};function dt(e,t,n={}){const r=(t,n,r)=>{const a=ct[n];if("function"!=typeof a)throw new Error(`Invalid validator "${n}", expected function`);const s=e[t];if(!(r&&void 0===s||a(s,e)))throw new Error(`Invalid param ${String(t)}=${s} (${typeof s}), expected ${n}`)};for(const[e,n]of Object.entries(t))r(e,n,!1);for(const[e,t]of Object.entries(n))r(e,t,!0);return e}const ft=BigInt(0),ht=BigInt(1),pt=BigInt(2),gt=BigInt(3),mt=BigInt(4),yt=BigInt(5),wt=BigInt(8);function bt(e,t){const n=e%t;return n>=ft?n:t+n}function vt(e,t,n){if(n<=ft||t<ft)throw new Error("Expected power/modulo > 0");if(n===ht)return ft;let r=ht;for(;t>ft;)t&ht&&(r=r*e%n),e=e*e%n,t>>=ht;return r}function At(e,t,n){let r=e;for(;t-- >ft;)r*=r,r%=n;return r}function Et(e,t){if(e===ft||t<=ft)throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);let n=bt(e,t),r=t,a=ft,s=ht,i=ht,o=ft;for(;n!==ft;){const e=r/n,t=r%n,l=a-i*e,u=s-o*e;r=n,n=t,a=i,s=o,i=l,o=u}if(r!==ht)throw new Error("invert: does not exist");return bt(a,t)}BigInt(9),BigInt(16);const kt=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];function xt(e,t){const n=void 0!==t?t:e.toString(2).length;return{nBitLength:n,nByteLength:Math.ceil(n/8)}}function Nt(e){if("bigint"!=typeof e)throw new Error("field order must be bigint");const t=e.toString(2).length;return Math.ceil(t/8)}function St(e){const t=Nt(e);return t+Math.ceil(t/2)}class Ct extends Le{constructor(e,t){super(),this.finished=!1,this.destroyed=!1,ke(e);const n=Be(t);if(this.iHash=e.create(),"function"!=typeof this.iHash.update)throw new Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const r=this.blockLen,a=new Uint8Array(r);a.set(n.length>r?e.create().update(n).digest():n);for(let e=0;e<a.length;e++)a[e]^=54;this.iHash.update(a),this.oHash=e.create();for(let e=0;e<a.length;e++)a[e]^=106;this.oHash.update(a),a.fill(0)}update(e){return xe(this),this.iHash.update(e),this}digestInto(e){xe(this),Ee(e,this.outputLen),this.finished=!0,this.iHash.digestInto(e),this.oHash.update(e),this.oHash.digestInto(e),this.destroy()}digest(){const e=new Uint8Array(this.oHash.outputLen);return this.digestInto(e),e}_cloneInto(e){e||(e=Object.create(Object.getPrototypeOf(this),{}));const{oHash:t,iHash:n,finished:r,destroyed:a,blockLen:s,outputLen:i}=this;return e.finished=r,e.destroyed=a,e.blockLen=s,e.outputLen=i,e.oHash=t._cloneInto(e.oHash),e.iHash=n._cloneInto(e.iHash),e}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const Pt=(e,t,n)=>new Ct(e,t).update(n).digest();Pt.create=(e,t)=>new Ct(e,t);const Rt=BigInt(0),It=BigInt(1);function Tt(e){return dt(e.Fp,kt.reduce(((e,t)=>(e[t]="function",e)),{ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"})),dt(e,{n:"bigint",h:"bigint",Gx:"field",Gy:"field"},{nBitLength:"isSafeInteger",nByteLength:"isSafeInteger"}),Object.freeze({...xt(e.n,e.nBitLength),...e,p:e.Fp.ORDER})}const{Ph:Ot,aT:Bt}=s,Lt={Err:class extends Error{constructor(e=""){super(e)}},_parseInt(e){const{Err:t}=Lt;if(e.length<2||2!==e[0])throw new t("Invalid signature integer tag");const n=e[1],r=e.subarray(2,n+2);if(!n||r.length!==n)throw new t("Invalid signature integer: wrong length");if(128&r[0])throw new t("Invalid signature integer: negative");if(0===r[0]&&!(128&r[1]))throw new t("Invalid signature integer: unnecessary leading zero");return{d:Ot(r),l:e.subarray(n+2)}},toSig(e){const{Err:t}=Lt,n="string"==typeof e?Bt(e):e;if(!(n instanceof Uint8Array))throw new Error("ui8a expected");let r=n.length;if(r<2||48!=n[0])throw new t("Invalid signature tag");if(n[1]!==r-2)throw new t("Invalid signature: incorrect length");const{d:a,l:s}=Lt._parseInt(n.subarray(2)),{d:i,l:o}=Lt._parseInt(s);if(o.length)throw new t("Invalid signature: left bytes after parsing");return{r:a,s:i}},hexFromSig(e){const t=e=>8&Number.parseInt(e[0],16)?"00"+e:e,n=e=>{const t=e.toString(16);return 1&t.length?`0${t}`:t},r=t(n(e.s)),a=t(n(e.r)),s=r.length/2,i=a.length/2,o=n(s),l=n(i);return`30${n(i+s+4)}02${l}${a}02${o}${r}`}},Ut=BigInt(0),Ft=BigInt(1),Dt=(BigInt(2),BigInt(3));function Mt(e){const t=function(e){const t=Tt(e);return dt(t,{hash:"hash",hmac:"function",randomBytes:"function"},{bits2int:"function",bits2int_modN:"function",lowS:"boolean"}),Object.freeze({lowS:!0,...t})}(e),{Fp:n,n:r}=t,a=n.BYTES+1,s=2*n.BYTES+1;function i(e){return bt(e,r)}function o(e){return Et(e,r)}const{ProjectivePoint:l,normPrivateKeyToScalar:u,weierstrassEquation:c,isWithinCurveOrder:d}=function(e){const t=function(e){const t=Tt(e);dt(t,{a:"field",b:"field"},{allowedPrivateKeyLengths:"array",wrapPrivateKey:"boolean",isTorsionFree:"function",clearCofactor:"function",allowInfinityPoint:"boolean",fromBytes:"function",toBytes:"function"});const{endo:n,Fp:r,a}=t;if(n){if(!r.eql(a,r.ZERO))throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");if("object"!=typeof n||"bigint"!=typeof n.beta||"function"!=typeof n.splitScalar)throw new Error("Expected endomorphism with beta: bigint and splitScalar: function")}return Object.freeze({...t})}(e),{Fp:n}=t,r=t.toBytes||((e,t,r)=>{const a=t.toAffine();return st(Uint8Array.from([4]),n.toBytes(a.x),n.toBytes(a.y))}),a=t.fromBytes||(e=>{const t=e.subarray(1);return{x:n.fromBytes(t.subarray(0,n.BYTES)),y:n.fromBytes(t.subarray(n.BYTES,2*n.BYTES))}});function s(e){const{a:r,b:a}=t,s=n.sqr(e),i=n.mul(s,e);return n.add(n.add(i,n.mul(e,r)),a)}if(!n.eql(n.sqr(t.Gy),s(t.Gx)))throw new Error("bad generator point: equation left != right");function i(e){return"bigint"==typeof e&&Ut<e&&e<t.n}function o(e){if(!i(e))throw new Error("Expected valid bigint: 0 < bigint < curve.n")}function l(e){const{allowedPrivateKeyLengths:n,nByteLength:r,wrapPrivateKey:a,n:s}=t;if(n&&"bigint"!=typeof e){if(e instanceof Uint8Array&&(e=Ze(e)),"string"!=typeof e||!n.includes(e.length))throw new Error("Invalid key");e=e.padStart(2*r,"0")}let i;try{i="bigint"==typeof e?e:et(at("private key",e,r))}catch(t){throw new Error(`private key must be ${r} bytes, hex or bigint, not ${typeof e}`)}return a&&(i=bt(i,s)),o(i),i}const u=new Map;function c(e){if(!(e instanceof d))throw new Error("ProjectivePoint expected")}class d{constructor(e,t,r){if(this.px=e,this.py=t,this.pz=r,null==e||!n.isValid(e))throw new Error("x required");if(null==t||!n.isValid(t))throw new Error("y required");if(null==r||!n.isValid(r))throw new Error("z required")}static fromAffine(e){const{x:t,y:r}=e||{};if(!e||!n.isValid(t)||!n.isValid(r))throw new Error("invalid affine point");if(e instanceof d)throw new Error("projective point not allowed");const a=e=>n.eql(e,n.ZERO);return a(t)&&a(r)?d.ZERO:new d(t,r,n.ONE)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static normalizeZ(e){const t=n.invertBatch(e.map((e=>e.pz)));return e.map(((e,n)=>e.toAffine(t[n]))).map(d.fromAffine)}static fromHex(e){const t=d.fromAffine(a(at("pointHex",e)));return t.assertValidity(),t}static fromPrivateKey(e){return d.BASE.multiply(l(e))}_setWindowSize(e){this._WINDOW_SIZE=e,u.delete(this)}assertValidity(){if(this.is0()){if(t.allowInfinityPoint&&!n.is0(this.py))return;throw new Error("bad point: ZERO")}const{x:e,y:r}=this.toAffine();if(!n.isValid(e)||!n.isValid(r))throw new Error("bad point: x or y not FE");const a=n.sqr(r),i=s(e);if(!n.eql(a,i))throw new Error("bad point: equation left != right");if(!this.isTorsionFree())throw new Error("bad point: not in prime-order subgroup")}hasEvenY(){const{y:e}=this.toAffine();if(n.isOdd)return!n.isOdd(e);throw new Error("Field doesn't support isOdd")}equals(e){c(e);const{px:t,py:r,pz:a}=this,{px:s,py:i,pz:o}=e,l=n.eql(n.mul(t,o),n.mul(s,a)),u=n.eql(n.mul(r,o),n.mul(i,a));return l&&u}negate(){return new d(this.px,n.neg(this.py),this.pz)}double(){const{a:e,b:r}=t,a=n.mul(r,Dt),{px:s,py:i,pz:o}=this;let l=n.ZERO,u=n.ZERO,c=n.ZERO,f=n.mul(s,s),h=n.mul(i,i),p=n.mul(o,o),g=n.mul(s,i);return g=n.add(g,g),c=n.mul(s,o),c=n.add(c,c),l=n.mul(e,c),u=n.mul(a,p),u=n.add(l,u),l=n.sub(h,u),u=n.add(h,u),u=n.mul(l,u),l=n.mul(g,l),c=n.mul(a,c),p=n.mul(e,p),g=n.sub(f,p),g=n.mul(e,g),g=n.add(g,c),c=n.add(f,f),f=n.add(c,f),f=n.add(f,p),f=n.mul(f,g),u=n.add(u,f),p=n.mul(i,o),p=n.add(p,p),f=n.mul(p,g),l=n.sub(l,f),c=n.mul(p,h),c=n.add(c,c),c=n.add(c,c),new d(l,u,c)}add(e){c(e);const{px:r,py:a,pz:s}=this,{px:i,py:o,pz:l}=e;let u=n.ZERO,f=n.ZERO,h=n.ZERO;const p=t.a,g=n.mul(t.b,Dt);let m=n.mul(r,i),y=n.mul(a,o),w=n.mul(s,l),b=n.add(r,a),v=n.add(i,o);b=n.mul(b,v),v=n.add(m,y),b=n.sub(b,v),v=n.add(r,s);let A=n.add(i,l);return v=n.mul(v,A),A=n.add(m,w),v=n.sub(v,A),A=n.add(a,s),u=n.add(o,l),A=n.mul(A,u),u=n.add(y,w),A=n.sub(A,u),h=n.mul(p,v),u=n.mul(g,w),h=n.add(u,h),u=n.sub(y,h),h=n.add(y,h),f=n.mul(u,h),y=n.add(m,m),y=n.add(y,m),w=n.mul(p,w),v=n.mul(g,v),y=n.add(y,w),w=n.sub(m,w),w=n.mul(p,w),v=n.add(v,w),m=n.mul(y,v),f=n.add(f,m),m=n.mul(A,v),u=n.mul(b,u),u=n.sub(u,m),m=n.mul(b,y),h=n.mul(A,h),h=n.add(h,m),new d(u,f,h)}subtract(e){return this.add(e.negate())}is0(){return this.equals(d.ZERO)}wNAF(e){return h.wNAFCached(this,u,e,(e=>{const t=n.invertBatch(e.map((e=>e.pz)));return e.map(((e,n)=>e.toAffine(t[n]))).map(d.fromAffine)}))}multiplyUnsafe(e){const r=d.ZERO;if(e===Ut)return r;if(o(e),e===Ft)return this;const{endo:a}=t;if(!a)return h.unsafeLadder(this,e);let{k1neg:s,k1:i,k2neg:l,k2:u}=a.splitScalar(e),c=r,f=r,p=this;for(;i>Ut||u>Ut;)i&Ft&&(c=c.add(p)),u&Ft&&(f=f.add(p)),p=p.double(),i>>=Ft,u>>=Ft;return s&&(c=c.negate()),l&&(f=f.negate()),f=new d(n.mul(f.px,a.beta),f.py,f.pz),c.add(f)}multiply(e){o(e);let r,a,s=e;const{endo:i}=t;if(i){const{k1neg:e,k1:t,k2neg:o,k2:l}=i.splitScalar(s);let{p:u,f:c}=this.wNAF(t),{p:f,f:p}=this.wNAF(l);u=h.constTimeNegate(e,u),f=h.constTimeNegate(o,f),f=new d(n.mul(f.px,i.beta),f.py,f.pz),r=u.add(f),a=c.add(p)}else{const{p:e,f:t}=this.wNAF(s);r=e,a=t}return d.normalizeZ([r,a])[0]}multiplyAndAddUnsafe(e,t,n){const r=d.BASE,a=(e,t)=>t!==Ut&&t!==Ft&&e.equals(r)?e.multiply(t):e.multiplyUnsafe(t),s=a(this,t).add(a(e,n));return s.is0()?void 0:s}toAffine(e){const{px:t,py:r,pz:a}=this,s=this.is0();null==e&&(e=s?n.ONE:n.inv(a));const i=n.mul(t,e),o=n.mul(r,e),l=n.mul(a,e);if(s)return{x:n.ZERO,y:n.ZERO};if(!n.eql(l,n.ONE))throw new Error("invZ was invalid");return{x:i,y:o}}isTorsionFree(){const{h:e,isTorsionFree:n}=t;if(e===Ft)return!0;if(n)return n(d,this);throw new Error("isTorsionFree() has not been declared for the elliptic curve")}clearCofactor(){const{h:e,clearCofactor:n}=t;return e===Ft?this:n?n(d,this):this.multiplyUnsafe(t.h)}toRawBytes(e=!0){return this.assertValidity(),r(d,this,e)}toHex(e=!0){return Ze(this.toRawBytes(e))}}d.BASE=new d(t.Gx,t.Gy,n.ONE),d.ZERO=new d(n.ZERO,n.ONE,n.ZERO);const f=t.nBitLength,h=function(e,t){const n=(e,t)=>{const n=t.negate();return e?n:t},r=e=>({windows:Math.ceil(t/e)+1,windowSize:2**(e-1)});return{constTimeNegate:n,unsafeLadder(t,n){let r=e.ZERO,a=t;for(;n>Rt;)n&It&&(r=r.add(a)),a=a.double(),n>>=It;return r},precomputeWindow(e,t){const{windows:n,windowSize:a}=r(t),s=[];let i=e,o=i;for(let e=0;e<n;e++){o=i,s.push(o);for(let e=1;e<a;e++)o=o.add(i),s.push(o);i=o.double()}return s},wNAF(t,a,s){const{windows:i,windowSize:o}=r(t);let l=e.ZERO,u=e.BASE;const c=BigInt(2**t-1),d=2**t,f=BigInt(t);for(let e=0;e<i;e++){const t=e*o;let r=Number(s&c);s>>=f,r>o&&(r-=d,s+=It);const i=t,h=t+Math.abs(r)-1,p=e%2!=0,g=r<0;0===r?u=u.add(n(p,a[i])):l=l.add(n(g,a[h]))}return{p:l,f:u}},wNAFCached(e,t,n,r){const a=e._WINDOW_SIZE||1;let s=t.get(e);return s||(s=this.precomputeWindow(e,a),1!==a&&t.set(e,r(s))),this.wNAF(a,s,n)}}}(d,t.endo?Math.ceil(f/2):f);return{CURVE:t,ProjectivePoint:d,normPrivateKeyToScalar:l,weierstrassEquation:s,isWithinCurveOrder:i}}({...t,toBytes(e,t,r){const a=t.toAffine(),s=n.toBytes(a.x),i=st;return r?i(Uint8Array.from([t.hasEvenY()?2:3]),s):i(Uint8Array.from([4]),s,n.toBytes(a.y))},fromBytes(e){const t=e.length,r=e[0],i=e.subarray(1);if(t!==a||2!==r&&3!==r){if(t===s&&4===r)return{x:n.fromBytes(i.subarray(0,n.BYTES)),y:n.fromBytes(i.subarray(n.BYTES,2*n.BYTES))};throw new Error(`Point of length ${t} was invalid. Expected ${a} compressed bytes or ${s} uncompressed bytes`)}{const e=et(i);if(!(Ut<(o=e)&&o<n.ORDER))throw new Error("Point is not on curve");const t=c(e);let a=n.sqrt(t);return!(1&~r)!=((a&Ft)===Ft)&&(a=n.neg(a)),{x:e,y:a}}var o}}),f=e=>Ze(nt(e,t.nByteLength));function h(e){return e>r>>Ft}const p=(e,t,n)=>et(e.slice(t,n));class g{constructor(e,t,n){this.r=e,this.s=t,this.recovery=n,this.assertValidity()}static fromCompact(e){const n=t.nByteLength;return e=at("compactSignature",e,2*n),new g(p(e,0,n),p(e,n,2*n))}static fromDER(e){const{r:t,s:n}=Lt.toSig(at("DER",e));return new g(t,n)}assertValidity(){if(!d(this.r))throw new Error("r must be 0 < r < CURVE.n");if(!d(this.s))throw new Error("s must be 0 < s < CURVE.n")}addRecoveryBit(e){return new g(this.r,this.s,e)}recoverPublicKey(e){const{r,s:a,recovery:s}=this,u=b(at("msgHash",e));if(null==s||![0,1,2,3].includes(s))throw new Error("recovery id invalid");const c=2===s||3===s?r+t.n:r;if(c>=n.ORDER)throw new Error("recovery id 2 or 3 invalid");const d=1&s?"03":"02",h=l.fromHex(d+f(c)),p=o(c),g=i(-u*p),m=i(a*p),y=l.BASE.multiplyAndAddUnsafe(h,g,m);if(!y)throw new Error("point at infinify");return y.assertValidity(),y}hasHighS(){return h(this.s)}normalizeS(){return this.hasHighS()?new g(this.r,i(-this.s),this.recovery):this}toDERRawBytes(){return Xe(this.toDERHex())}toDERHex(){return Lt.hexFromSig({r:this.r,s:this.s})}toCompactRawBytes(){return Xe(this.toCompactHex())}toCompactHex(){return f(this.r)+f(this.s)}}const m={isValidPrivateKey(e){try{return u(e),!0}catch(e){return!1}},normPrivateKeyToScalar:u,randomPrivateKey:()=>{const e=St(t.n);return function(e,t,n=!1){const r=e.length,a=Nt(t),s=St(t);if(r<16||r<s||r>1024)throw new Error(`expected ${s}-1024 bytes of input, got ${r}`);const i=bt(n?et(e):tt(e),t-ht)+ht;return n?rt(i,a):nt(i,a)}(t.randomBytes(e),t.n)},precompute:(e=8,t=l.BASE)=>(t._setWindowSize(e),t.multiply(BigInt(3)),t)};function y(e){const t=e instanceof Uint8Array,n="string"==typeof e,r=(t||n)&&e.length;return t?r===a||r===s:n?r===2*a||r===2*s:e instanceof l}const w=t.bits2int||function(e){const n=et(e),r=8*e.length-t.nBitLength;return r>0?n>>BigInt(r):n},b=t.bits2int_modN||function(e){return i(w(e))},v=it(t.nBitLength);function A(e){if("bigint"!=typeof e)throw new Error("bigint expected");if(!(Ut<=e&&e<v))throw new Error(`bigint expected < 2^${t.nBitLength}`);return nt(e,t.nByteLength)}const E={lowS:t.lowS,prehash:!1},k={lowS:t.lowS,prehash:!1};return l.BASE._setWindowSize(8),{CURVE:t,getPublicKey:function(e,t=!0){return l.fromPrivateKey(e).toRawBytes(t)},getSharedSecret:function(e,t,n=!0){if(y(e))throw new Error("first arg must be private key");if(!y(t))throw new Error("second arg must be public key");return l.fromHex(t).multiply(u(e)).toRawBytes(n)},sign:function(e,r,a=E){const{seed:s,k2sig:c}=function(e,r,a=E){if(["recovered","canonical"].some((e=>e in a)))throw new Error("sign() legacy options not supported");const{hash:s,randomBytes:c}=t;let{lowS:f,prehash:p,extraEntropy:m}=a;null==f&&(f=!0),e=at("msgHash",e),p&&(e=at("prehashed msgHash",s(e)));const y=b(e),v=u(r),k=[A(v),A(y)];if(null!=m){const e=!0===m?c(n.BYTES):m;k.push(at("extraEntropy",e))}const x=st(...k),N=y;return{seed:x,k2sig:function(e){const t=w(e);if(!d(t))return;const n=o(t),r=l.BASE.multiply(t).toAffine(),a=i(r.x);if(a===Ut)return;const s=i(n*i(N+a*v));if(s===Ut)return;let u=(r.x===a?0:2)|Number(r.y&Ft),c=s;return f&&h(s)&&(c=function(e){return h(e)?i(-e):e}(s),u^=1),new g(a,c,u)}}}(e,r,a),f=t;return ut(f.hash.outputLen,f.nByteLength,f.hmac)(s,c)},verify:function(e,n,r,a=k){const s=e;if(n=at("msgHash",n),r=at("publicKey",r),"strict"in a)throw new Error("options.strict was renamed to lowS");const{lowS:u,prehash:c}=a;let d,f;try{if("string"==typeof s||s instanceof Uint8Array)try{d=g.fromDER(s)}catch(e){if(!(e instanceof Lt.Err))throw e;d=g.fromCompact(s)}else{if("object"!=typeof s||"bigint"!=typeof s.r||"bigint"!=typeof s.s)throw new Error("PARSE");{const{r:e,s:t}=s;d=new g(e,t)}}f=l.fromHex(r)}catch(e){if("PARSE"===e.message)throw new Error("signature must be Signature instance, Uint8Array or hex string");return!1}if(u&&d.hasHighS())return!1;c&&(n=t.hash(n));const{r:h,s:p}=d,m=b(n),y=o(p),w=i(m*y),v=i(h*y),A=l.BASE.multiplyAndAddUnsafe(f,w,v)?.toAffine();return!!A&&i(A.x)===h},ProjectivePoint:l,Signature:g,utils:m}}function jt(e){return{hash:e,hmac:(t,...n)=>Pt(e,t,function(...e){const t=new Uint8Array(e.reduce(((e,t)=>e+t.length),0));let n=0;return e.forEach((e=>{if(!Ce(e))throw new Error("Uint8Array expected");t.set(e,n),n+=e.length})),t}(...n)),randomBytes:Me}}BigInt(4);const zt=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),_t=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),Gt=BigInt(1),Ht=BigInt(2),Vt=(e,t)=>(e+t/Ht)/t;const Qt=function(e,t,n=!1,r={}){if(e<=ft)throw new Error(`Expected Field ORDER > 0, got ${e}`);const{nBitLength:a,nByteLength:s}=xt(e,t);if(s>2048)throw new Error("Field lengths over 2048 bytes are not supported");const i=function(e){if(e%mt===gt){const t=(e+ht)/mt;return function(e,n){const r=e.pow(n,t);if(!e.eql(e.sqr(r),n))throw new Error("Cannot find square root");return r}}if(e%wt===yt){const t=(e-yt)/wt;return function(e,n){const r=e.mul(n,pt),a=e.pow(r,t),s=e.mul(n,a),i=e.mul(e.mul(s,pt),a),o=e.mul(s,e.sub(i,e.ONE));if(!e.eql(e.sqr(o),n))throw new Error("Cannot find square root");return o}}return function(e){const t=(e-ht)/pt;let n,r,a;for(n=e-ht,r=0;n%pt===ft;n/=pt,r++);for(a=pt;a<e&&vt(a,t,e)!==e-ht;a++);if(1===r){const t=(e+ht)/mt;return function(e,n){const r=e.pow(n,t);if(!e.eql(e.sqr(r),n))throw new Error("Cannot find square root");return r}}const s=(n+ht)/pt;return function(e,i){if(e.pow(i,t)===e.neg(e.ONE))throw new Error("Cannot find square root");let o=r,l=e.pow(e.mul(e.ONE,a),n),u=e.pow(i,s),c=e.pow(i,n);for(;!e.eql(c,e.ONE);){if(e.eql(c,e.ZERO))return e.ZERO;let t=1;for(let n=e.sqr(c);t<o&&!e.eql(n,e.ONE);t++)n=e.sqr(n);const n=e.pow(l,ht<<BigInt(o-t-1));l=e.sqr(n),u=e.mul(u,n),c=e.mul(c,l),o=t}return u}}(e)}(e),o=Object.freeze({ORDER:e,BITS:a,BYTES:s,MASK:it(a),ZERO:ft,ONE:ht,create:t=>bt(t,e),isValid:t=>{if("bigint"!=typeof t)throw new Error("Invalid field element: expected bigint, got "+typeof t);return ft<=t&&t<e},is0:e=>e===ft,isOdd:e=>(e&ht)===ht,neg:t=>bt(-t,e),eql:(e,t)=>e===t,sqr:t=>bt(t*t,e),add:(t,n)=>bt(t+n,e),sub:(t,n)=>bt(t-n,e),mul:(t,n)=>bt(t*n,e),pow:(e,t)=>function(e,t,n){if(n<ft)throw new Error("Expected power > 0");if(n===ft)return e.ONE;if(n===ht)return t;let r=e.ONE,a=t;for(;n>ft;)n&ht&&(r=e.mul(r,a)),a=e.sqr(a),n>>=ht;return r}(o,e,t),div:(t,n)=>bt(t*Et(n,e),e),sqrN:e=>e*e,addN:(e,t)=>e+t,subN:(e,t)=>e-t,mulN:(e,t)=>e*t,inv:t=>Et(t,e),sqrt:r.sqrt||(e=>i(o,e)),invertBatch:e=>function(e,t){const n=new Array(t.length),r=t.reduce(((t,r,a)=>e.is0(r)?t:(n[a]=t,e.mul(t,r))),e.ONE),a=e.inv(r);return t.reduceRight(((t,r,a)=>e.is0(r)?t:(n[a]=e.mul(t,n[a]),e.mul(t,r))),a),n}(o,e),cmov:(e,t,n)=>n?t:e,toBytes:e=>n?rt(e,s):nt(e,s),fromBytes:e=>{if(e.length!==s)throw new Error(`Fp.fromBytes: expected ${s}, got ${e.length}`);return n?tt(e):et(e)}});return Object.freeze(o)}(zt,void 0,void 0,{sqrt:function(e){const t=zt,n=BigInt(3),r=BigInt(6),a=BigInt(11),s=BigInt(22),i=BigInt(23),o=BigInt(44),l=BigInt(88),u=e*e*e%t,c=u*u*e%t,d=At(c,n,t)*c%t,f=At(d,n,t)*c%t,h=At(f,Ht,t)*u%t,p=At(h,a,t)*h%t,g=At(p,s,t)*p%t,m=At(g,o,t)*g%t,y=At(m,l,t)*m%t,w=At(y,o,t)*g%t,b=At(w,n,t)*c%t,v=At(b,i,t)*p%t,A=At(v,r,t)*u%t,E=At(A,Ht,t);if(!Qt.eql(Qt.sqr(E),e))throw new Error("Cannot find square root");return E}}),Kt=function(e,t){const n=t=>Mt({...e,...jt(t)});return Object.freeze({...n(t),create:n})}({a:BigInt(0),b:BigInt(7),Fp:Qt,n:_t,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:e=>{const t=_t,n=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-Gt*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),a=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),s=n,i=BigInt("0x100000000000000000000000000000000"),o=Vt(s*e,t),l=Vt(-r*e,t);let u=bt(e-o*n-l*a,t),c=bt(-o*r-l*s,t);const d=u>i,f=c>i;if(d&&(u=t-u),f&&(c=t-c),u>i||c>i)throw new Error("splitScalar: Endomorphism failed, k="+e);return{k1neg:d,k1:u,k2neg:f,k2:c}}}},Ke);BigInt(0),Kt.ProjectivePoint;const Wt="6.14.3";function Jt(e,t,n){const r=t.split("|").map((e=>e.trim()));for(let n=0;n<r.length;n++)switch(t){case"any":return;case"bigint":case"boolean":case"number":case"string":if(typeof e===t)return}const a=new Error(`invalid value for type ${t}`);throw a.code="INVALID_ARGUMENT",a.argument=`value.${n}`,a.value=e,a}async function qt(e){const t=Object.keys(e);return(await Promise.all(t.map((t=>Promise.resolve(e[t]))))).reduce(((e,n,r)=>(e[t[r]]=n,e)),{})}function Yt(e,t,n){for(let r in t){let a=t[r];const s=n?n[r]:null;s&&Jt(a,s,r),Object.defineProperty(e,r,{enumerable:!0,value:a,writable:!1})}}function Zt(e,t){if(null==e)return"null";if(null==t&&(t=new Set),"object"==typeof e){if(t.has(e))return"[Circular]";t.add(e)}if(Array.isArray(e))return"[ "+e.map((e=>Zt(e,t))).join(", ")+" ]";if(e instanceof Uint8Array){const t="0123456789abcdef";let n="0x";for(let r=0;r<e.length;r++)n+=t[e[r]>>4],n+=t[15&e[r]];return n}if("object"==typeof e&&"function"==typeof e.toJSON)return Zt(e.toJSON(),t);switch(typeof e){case"boolean":case"number":case"symbol":return e.toString();case"bigint":return BigInt(e).toString();case"string":return JSON.stringify(e);case"object":{const n=Object.keys(e);return n.sort(),"{ "+n.map((n=>`${Zt(n,t)}: ${Zt(e[n],t)}`)).join(", ")+" }"}}return"[ COULD NOT SERIALIZE ]"}function $t(e,t){return e&&e.code===t}function Xt(e){return $t(e,"CALL_EXCEPTION")}function en(e,t,n){let r,a=e;{const r=[];if(n){if("message"in n||"code"in n||"name"in n)throw new Error(`value will overwrite populated values: ${Zt(n)}`);for(const e in n){if("shortMessage"===e)continue;const t=n[e];r.push(e+"="+Zt(t))}}r.push(`code=${t}`),r.push(`version=${Wt}`),r.length&&(e+=" ("+r.join(", ")+")")}switch(t){case"INVALID_ARGUMENT":r=new TypeError(e);break;case"NUMERIC_FAULT":case"BUFFER_OVERRUN":r=new RangeError(e);break;default:r=new Error(e)}return Yt(r,{code:t}),n&&Object.assign(r,n),null==r.shortMessage&&Yt(r,{shortMessage:a}),r}function tn(e,t,n,r){if(!e)throw en(t,n,r)}function nn(e,t,n,r){tn(e,t,"INVALID_ARGUMENT",{argument:n,value:r})}function rn(e,t,n){null==n&&(n=""),n&&(n=": "+n),tn(e>=t,"missing argument"+n,"MISSING_ARGUMENT",{count:e,expectedCount:t}),tn(e<=t,"too many arguments"+n,"UNEXPECTED_ARGUMENT",{count:e,expectedCount:t})}const an=["NFD","NFC","NFKD","NFKC"].reduce(((e,t)=>{try{if("test"!=="test".normalize(t))throw new Error("bad");if("NFD"===t){if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken")}e.push(t)}catch(e){}return e}),[]);function sn(e){tn(an.indexOf(e)>=0,"platform missing String.prototype.normalize","UNSUPPORTED_OPERATION",{operation:"String.prototype.normalize",info:{form:e}})}function on(e,t,n){if(null==n&&(n=""),e!==t){let e=n,t="new";n&&(e+=".",t+=" "+n),tn(!1,`private constructor; use ${e}from* methods`,"UNSUPPORTED_OPERATION",{operation:t})}}function ln(e,t,n){if(e instanceof Uint8Array)return n?new Uint8Array(e):e;if("string"==typeof e&&e.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)){const t=new Uint8Array((e.length-2)/2);let n=2;for(let r=0;r<t.length;r++)t[r]=parseInt(e.substring(n,n+2),16),n+=2;return t}nn(!1,"invalid BytesLike value",t||"value",e)}function un(e,t){return ln(e,t,!1)}function cn(e,t){return ln(e,t,!0)}function dn(e,t){return!("string"!=typeof e||!e.match(/^0x[0-9A-Fa-f]*$/)||"number"==typeof t&&e.length!==2+2*t||!0===t&&e.length%2!=0)}function fn(e){return dn(e,!0)||e instanceof Uint8Array}const hn="0123456789abcdef";function pn(e){const t=un(e);let n="0x";for(let e=0;e<t.length;e++){const r=t[e];n+=hn[(240&r)>>4]+hn[15&r]}return n}function gn(e){return"0x"+e.map((e=>pn(e).substring(2))).join("")}function mn(e){return dn(e,!0)?(e.length-2)/2:un(e).length}function yn(e,t,n){const r=un(e);return null!=n&&n>r.length&&tn(!1,"cannot slice beyond data bounds","BUFFER_OVERRUN",{buffer:r,length:r.length,offset:n}),pn(r.slice(null==t?0:t,null==n?r.length:n))}function wn(e,t,n){const r=un(e);tn(t>=r.length,"padding exceeds data length","BUFFER_OVERRUN",{buffer:new Uint8Array(r),length:t,offset:t+1});const a=new Uint8Array(t);return a.fill(0),n?a.set(r,t-r.length):a.set(r,0),pn(a)}function bn(e,t){return wn(e,t,!0)}const vn=BigInt(0),An=BigInt(1),En=9007199254740991;function kn(e,t){const n=Cn(e,"value"),r=BigInt(In(t,"width"));return tn(n>>r===vn,"overflow","NUMERIC_FAULT",{operation:"fromTwos",fault:"overflow",value:e}),n>>r-An?-((~n&(An<<r)-An)+An):n}function xn(e,t){let n=Sn(e,"value");const r=BigInt(In(t,"width")),a=An<<r-An;return n<vn?(n=-n,tn(n<=a,"too low","NUMERIC_FAULT",{operation:"toTwos",fault:"overflow",value:e}),(~n&(An<<r)-An)+An):(tn(n<a,"too high","NUMERIC_FAULT",{operation:"toTwos",fault:"overflow",value:e}),n)}function Nn(e,t){const n=Cn(e,"value"),r=BigInt(In(t,"bits"));return n&(An<<r)-An}function Sn(e,t){switch(typeof e){case"bigint":return e;case"number":return nn(Number.isInteger(e),"underflow",t||"value",e),nn(e>=-En&&e<=En,"overflow",t||"value",e),BigInt(e);case"string":try{if(""===e)throw new Error("empty string");return"-"===e[0]&&"-"!==e[1]?-BigInt(e.substring(1)):BigInt(e)}catch(n){nn(!1,`invalid BigNumberish string: ${n.message}`,t||"value",e)}}nn(!1,"invalid BigNumberish value",t||"value",e)}function Cn(e,t){const n=Sn(e,t);return tn(n>=vn,"unsigned value cannot be negative","NUMERIC_FAULT",{fault:"overflow",operation:"getUint",value:e}),n}const Pn="0123456789abcdef";function Rn(e){if(e instanceof Uint8Array){let t="0x0";for(const n of e)t+=Pn[n>>4],t+=Pn[15&n];return BigInt(t)}return Sn(e)}function In(e,t){switch(typeof e){case"bigint":return nn(e>=-En&&e<=En,"overflow",t||"value",e),Number(e);case"number":return nn(Number.isInteger(e),"underflow",t||"value",e),nn(e>=-En&&e<=En,"overflow",t||"value",e),e;case"string":try{if(""===e)throw new Error("empty string");return In(BigInt(e),t)}catch(n){nn(!1,`invalid numeric string: ${n.message}`,t||"value",e)}}nn(!1,"invalid numeric value",t||"value",e)}function Tn(e,t){let n=Cn(e,"value").toString(16);if(null==t)n.length%2&&(n="0"+n);else{const r=In(t,"width");for(tn(2*r>=n.length,`value exceeds width (${r} bytes)`,"NUMERIC_FAULT",{operation:"toBeHex",fault:"overflow",value:e});n.length<2*r;)n="0"+n}return"0x"+n}function On(e){const t=Cn(e,"value");if(t===vn)return new Uint8Array([]);let n=t.toString(16);n.length%2&&(n="0"+n);const r=new Uint8Array(n.length/2);for(let e=0;e<r.length;e++){const t=2*e;r[e]=parseInt(n.substring(t,t+2),16)}return r}function Bn(e){let t=pn(fn(e)?e:On(e)).substring(2);for(;t.startsWith("0");)t=t.substring(1);return""===t&&(t="0"),"0x"+t}const Ln="0x0000000000000000000000000000000000000000000000000000000000000000",Un=BigInt(0),Fn=BigInt(1),Dn=BigInt(2),Mn=BigInt(27),jn=BigInt(28),zn=BigInt(35),_n={};function Gn(e){return bn(On(e),32)}class Hn{#e;#t;#n;#r;get r(){return this.#e}set r(e){nn(32===mn(e),"invalid r","value",e),this.#e=pn(e)}get s(){return this.#t}set s(e){nn(32===mn(e),"invalid s","value",e);const t=pn(e);nn(parseInt(t.substring(0,3))<8,"non-canonical s","value",t),this.#t=t}get v(){return this.#n}set v(e){const t=In(e,"value");nn(27===t||28===t,"invalid v","v",e),this.#n=t}get networkV(){return this.#r}get legacyChainId(){const e=this.networkV;return null==e?null:Hn.getChainId(e)}get yParity(){return 27===this.v?0:1}get yParityAndS(){const e=un(this.s);return this.yParity&&(e[0]|=128),pn(e)}get compactSerialized(){return gn([this.r,this.yParityAndS])}get serialized(){return gn([this.r,this.s,this.yParity?"0x1c":"0x1b"])}constructor(e,t,n,r){on(e,_n,"Signature"),this.#e=t,this.#t=n,this.#n=r,this.#r=null}[Symbol.for("nodejs.util.inspect.custom")](){return`Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`}clone(){const e=new Hn(_n,this.r,this.s,this.v);return this.networkV&&(e.#r=this.networkV),e}toJSON(){const e=this.networkV;return{_type:"signature",networkV:null!=e?e.toString():null,r:this.r,s:this.s,v:this.v}}static getChainId(e){const t=Sn(e,"v");return t==Mn||t==jn?Un:(nn(t>=zn,"invalid EIP-155 v","v",e),(t-zn)/Dn)}static getChainIdV(e,t){return Sn(e)*Dn+BigInt(35+t-27)}static getNormalizedV(e){const t=Sn(e);return t===Un||t===Mn?27:t===Fn||t===jn?28:(nn(t>=zn,"invalid v","v",e),t&Fn?27:28)}static from(e){function t(t,n){nn(t,n,"signature",e)}if(null==e)return new Hn(_n,Ln,Ln,27);if("string"==typeof e){const n=un(e,"signature");if(64===n.length){const e=pn(n.slice(0,32)),t=n.slice(32,64),r=128&t[0]?28:27;return t[0]&=127,new Hn(_n,e,pn(t),r)}if(65===n.length){const e=pn(n.slice(0,32)),r=n.slice(32,64);t(!(128&r[0]),"non-canonical s");const a=Hn.getNormalizedV(n[64]);return new Hn(_n,e,pn(r),a)}t(!1,"invalid raw signature length")}if(e instanceof Hn)return e.clone();const n=e.r;t(null!=n,"missing r");const r=Gn(n),a=function(e,n){if(null!=e)return Gn(e);if(null!=n){t(dn(n,32),"invalid yParityAndS");const e=un(n);return e[0]&=127,pn(e)}t(!1,"missing s")}(e.s,e.yParityAndS);t(!(128&un(a)[0]),"non-canonical s");const{networkV:s,v:i}=function(e,n,r){if(null!=e){const t=Sn(e);return{networkV:t>=zn?t:void 0,v:Hn.getNormalizedV(t)}}if(null!=n)return t(dn(n,32),"invalid yParityAndS"),{v:128&un(n)[0]?28:27};if(null!=r){switch(In(r,"sig.yParity")){case 0:return{v:27};case 1:return{v:28}}t(!1,"invalid yParity")}t(!1,"missing v")}(e.v,e.yParityAndS,e.yParity),o=new Hn(_n,r,a,i);return s&&(o.#r=s),t(null==e.yParity||In(e.yParity,"sig.yParity")===o.yParity,"yParity mismatch"),t(null==e.yParityAndS||e.yParityAndS===o.yParityAndS,"yParityAndS mismatch"),o}}class Vn{#a;constructor(e){nn(32===mn(e),"invalid private key","privateKey","[REDACTED]"),this.#a=pn(e)}get privateKey(){return this.#a}get publicKey(){return Vn.computePublicKey(this.#a)}get compressedPublicKey(){return Vn.computePublicKey(this.#a,!0)}sign(e){nn(32===mn(e),"invalid digest length","digest",e);const t=Kt.sign(cn(e),cn(this.#a),{lowS:!0});return Hn.from({r:Tn(t.r,32),s:Tn(t.s,32),v:t.recovery?28:27})}computeSharedSecret(e){const t=Vn.computePublicKey(e);return pn(Kt.getSharedSecret(cn(this.#a),un(t),!1))}static computePublicKey(e,t){let n=un(e,"key");if(32===n.length)return pn(Kt.getPublicKey(n,!!t));if(64===n.length){const e=new Uint8Array(65);e[0]=4,e.set(n,1),n=e}return pn(Kt.ProjectivePoint.fromHex(n).toRawBytes(t))}static recoverPublicKey(e,t){nn(32===mn(e),"invalid digest length","digest",e);const n=Hn.from(t);let r=Kt.Signature.fromCompact(cn(gn([n.r,n.s])));r=r.addRecoveryBit(n.yParity);const a=r.recoverPublicKey(cn(e));return nn(null!=a,"invalid signature for digest","signature",t),"0x"+a.toHex(!1)}static addPoints(e,t,n){const r=Kt.ProjectivePoint.fromHex(Vn.computePublicKey(e).substring(2)),a=Kt.ProjectivePoint.fromHex(Vn.computePublicKey(t).substring(2));return"0x"+r.add(a).toHex(!!n)}}const Qn=BigInt(2**32-1),Kn=BigInt(32);function Wn(e,t=!1){return t?{h:Number(e&Qn),l:Number(e>>Kn&Qn)}:{h:0|Number(e>>Kn&Qn),l:0|Number(e&Qn)}}function Jn(e,t=!1){let n=new Uint32Array(e.length),r=new Uint32Array(e.length);for(let a=0;a<e.length;a++){const{h:s,l:i}=Wn(e[a],t);[n[a],r[a]]=[s,i]}return[n,r]}const qn=(e,t,n)=>e<<n|t>>>32-n,Yn=(e,t,n)=>t<<n|e>>>32-n,Zn=(e,t,n)=>t<<n-32|e>>>64-n,$n=(e,t,n)=>e<<n-32|t>>>64-n,Xn={fromBig:Wn,split:Jn,toBig:(e,t)=>BigInt(e>>>0)<<Kn|BigInt(t>>>0),shrSH:(e,t,n)=>e>>>n,shrSL:(e,t,n)=>e<<32-n|t>>>n,rotrSH:(e,t,n)=>e>>>n|t<<32-n,rotrSL:(e,t,n)=>e<<32-n|t>>>n,rotrBH:(e,t,n)=>e<<64-n|t>>>n-32,rotrBL:(e,t,n)=>e>>>n-32|t<<64-n,rotr32H:(e,t)=>t,rotr32L:(e,t)=>e,rotlSH:qn,rotlSL:Yn,rotlBH:Zn,rotlBL:$n,add:function(e,t,n,r){const a=(t>>>0)+(r>>>0);return{h:e+n+(a/2**32|0)|0,l:0|a}},add3L:(e,t,n)=>(e>>>0)+(t>>>0)+(n>>>0),add3H:(e,t,n,r)=>t+n+r+(e/2**32|0)|0,add4L:(e,t,n,r)=>(e>>>0)+(t>>>0)+(n>>>0)+(r>>>0),add4H:(e,t,n,r,a)=>t+n+r+a+(e/2**32|0)|0,add5H:(e,t,n,r,a,s)=>t+n+r+a+s+(e/2**32|0)|0,add5L:(e,t,n,r,a)=>(e>>>0)+(t>>>0)+(n>>>0)+(r>>>0)+(a>>>0)},[er,tr,nr]=[[],[],[]],rr=BigInt(0),ar=BigInt(1),sr=BigInt(2),ir=BigInt(7),or=BigInt(256),lr=BigInt(113);for(let e=0,t=ar,n=1,r=0;e<24;e++){[n,r]=[r,(2*n+3*r)%5],er.push(2*(5*r+n)),tr.push((e+1)*(e+2)/2%64);let a=rr;for(let e=0;e<7;e++)t=(t<<ar^(t>>ir)*lr)%or,t&sr&&(a^=ar<<(ar<<BigInt(e))-ar);nr.push(a)}const[ur,cr]=Jn(nr,!0),dr=(e,t,n)=>n>32?Zn(e,t,n):qn(e,t,n),fr=(e,t,n)=>n>32?$n(e,t,n):Yn(e,t,n);class hr extends Le{constructor(e,t,n,r=!1,a=24){if(super(),this.blockLen=e,this.suffix=t,this.outputLen=n,this.enableXOF=r,this.rounds=a,this.pos=0,this.posOut=0,this.finished=!1,this.destroyed=!1,Ae(n),0>=this.blockLen||this.blockLen>=200)throw new Error("Sha3 supports only keccak-f1600 function");this.state=new Uint8Array(200),this.state32=Pe(this.state)}keccak(){!function(e,t=24){const n=new Uint32Array(10);for(let r=24-t;r<24;r++){for(let t=0;t<10;t++)n[t]=e[t]^e[t+10]^e[t+20]^e[t+30]^e[t+40];for(let t=0;t<10;t+=2){const r=(t+8)%10,a=(t+2)%10,s=n[a],i=n[a+1],o=dr(s,i,1)^n[r],l=fr(s,i,1)^n[r+1];for(let n=0;n<50;n+=10)e[t+n]^=o,e[t+n+1]^=l}let t=e[2],a=e[3];for(let n=0;n<24;n++){const r=tr[n],s=dr(t,a,r),i=fr(t,a,r),o=er[n];t=e[o],a=e[o+1],e[o]=s,e[o+1]=i}for(let t=0;t<50;t+=10){for(let r=0;r<10;r++)n[r]=e[t+r];for(let r=0;r<10;r++)e[t+r]^=~n[(r+2)%10]&n[(r+4)%10]}e[0]^=ur[r],e[1]^=cr[r]}n.fill(0)}(this.state32,this.rounds),this.posOut=0,this.pos=0}update(e){xe(this);const{blockLen:t,state:n}=this,r=(e=Be(e)).length;for(let a=0;a<r;){const s=Math.min(t-this.pos,r-a);for(let t=0;t<s;t++)n[this.pos++]^=e[a++];this.pos===t&&this.keccak()}return this}finish(){if(this.finished)return;this.finished=!0;const{state:e,suffix:t,pos:n,blockLen:r}=this;e[n]^=t,128&t&&n===r-1&&this.keccak(),e[r-1]^=128,this.keccak()}writeInto(e){xe(this,!1),Ee(e),this.finish();const t=this.state,{blockLen:n}=this;for(let r=0,a=e.length;r<a;){this.posOut>=n&&this.keccak();const s=Math.min(n-this.posOut,a-r);e.set(t.subarray(this.posOut,this.posOut+s),r),this.posOut+=s,r+=s}return e}xofInto(e){if(!this.enableXOF)throw new Error("XOF is not possible for this instance");return this.writeInto(e)}xof(e){return Ae(e),this.xofInto(new Uint8Array(e))}digestInto(e){if(Ne(e,this),this.finished)throw new Error("digest() was already called");return this.writeInto(e),this.destroy(),e}digest(){return this.digestInto(new Uint8Array(this.outputLen))}destroy(){this.destroyed=!0,this.state.fill(0)}_cloneInto(e){const{blockLen:t,suffix:n,outputLen:r,rounds:a,enableXOF:s}=this;return e||(e=new hr(t,n,r,s,a)),e.state32.set(this.state32),e.pos=this.pos,e.posOut=this.posOut,e.finished=this.finished,e.rounds=a,e.suffix=n,e.outputLen=r,e.enableXOF=s,e.destroyed=this.destroyed,e}}const pr=((e,t,n)=>De((()=>new hr(t,e,n))))(1,136,32);let gr=!1;const mr=function(e){return pr(e)};let yr=mr;function wr(e){const t=un(e,"data");return pn(yr(t))}wr._=mr,wr.lock=function(){gr=!0},wr.register=function(e){if(gr)throw new TypeError("keccak256 is locked");yr=e},Object.freeze(wr);const br=BigInt(0),vr=BigInt(36);function Ar(e){const t=(e=e.toLowerCase()).substring(2).split(""),n=new Uint8Array(40);for(let e=0;e<40;e++)n[e]=t[e].charCodeAt(0);const r=un(wr(n));for(let e=0;e<40;e+=2)r[e>>1]>>4>=8&&(t[e]=t[e].toUpperCase()),(15&r[e>>1])>=8&&(t[e+1]=t[e+1].toUpperCase());return"0x"+t.join("")}const Er={};for(let e=0;e<10;e++)Er[String(e)]=String(e);for(let e=0;e<26;e++)Er[String.fromCharCode(65+e)]=String(10+e);const kr=function(){const e={};for(let t=0;t<36;t++)e["0123456789abcdefghijklmnopqrstuvwxyz"[t]]=BigInt(t);return e}();function xr(e){if(nn("string"==typeof e,"invalid address","address",e),e.match(/^(0x)?[0-9a-fA-F]{40}$/)){e.startsWith("0x")||(e="0x"+e);const t=Ar(e);return nn(!e.match(/([A-F].*[a-f])|([a-f].*[A-F])/)||t===e,"bad address checksum","address",e),t}if(e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){nn(e.substring(2,4)===function(e){let t=(e=(e=e.toUpperCase()).substring(4)+e.substring(0,2)+"00").split("").map((e=>Er[e])).join("");for(;t.length>=15;){let e=t.substring(0,15);t=parseInt(e,10)%97+t.substring(e.length)}let n=String(98-parseInt(t,10)%97);for(;n.length<2;)n="0"+n;return n}(e),"bad icap checksum","address",e);let t=function(e){e=e.toLowerCase();let t=br;for(let n=0;n<e.length;n++)t=t*vr+kr[e[n]];return t}(e.substring(4)).toString(16);for(;t.length<40;)t="0"+t;return Ar("0x"+t)}nn(!1,"invalid address","address",e)}function Nr(e){return e&&"function"==typeof e.getAddress}async function Sr(e,t){const n=await t;return null!=n&&"0x0000000000000000000000000000000000000000"!==n||(tn("string"!=typeof e,"unconfigured name","UNCONFIGURED_NAME",{value:e}),nn(!1,"invalid AddressLike value; did not resolve to a value address","target",e)),xr(n)}function Cr(e,t){return"string"==typeof e?e.match(/^0x[0-9a-f]{40}$/i)?xr(e):(tn(null!=t,"ENS resolution requires a provider","UNSUPPORTED_OPERATION",{operation:"resolveName"}),Sr(e,t.resolveName(e))):Nr(e)?Sr(e,e.getAddress()):e&&"function"==typeof e.then?Sr(e,e):void nn(!1,"unsupported addressable value","target",e)}function Pr(e,t,n,r,a){if("BAD_PREFIX"===e||"UNEXPECTED_CONTINUE"===e){let e=0;for(let r=t+1;r<n.length&&n[r]>>6==2;r++)e++;return e}return"OVERRUN"===e?n.length-t-1:0}const Rr=Object.freeze({error:function(e,t,n,r,a){nn(!1,`invalid codepoint at offset ${t}; ${e}`,"bytes",n)},ignore:Pr,replace:function(e,t,n,r,a){return"OVERLONG"===e?(nn("number"==typeof a,"invalid bad code point for replacement","badCodepoint",a),r.push(a),0):(r.push(65533),Pr(e,t,n))}});function Ir(e,t){nn("string"==typeof e,"invalid string value","str",e),null!=t&&(sn(t),e=e.normalize(t));let n=[];for(let t=0;t<e.length;t++){const r=e.charCodeAt(t);if(r<128)n.push(r);else if(r<2048)n.push(r>>6|192),n.push(63&r|128);else if(55296==(64512&r)){t++;const a=e.charCodeAt(t);nn(t<e.length&&56320==(64512&a),"invalid surrogate pair","str",e);const s=65536+((1023&r)<<10)+(1023&a);n.push(s>>18|240),n.push(s>>12&63|128),n.push(s>>6&63|128),n.push(63&s|128)}else n.push(r>>12|224),n.push(r>>6&63|128),n.push(63&r|128)}return new Uint8Array(n)}function Tr(e,t){return function(e,t){null==t&&(t=Rr.error);const n=un(e,"bytes"),r=[];let a=0;for(;a<n.length;){const e=n[a++];if(!(e>>7)){r.push(e);continue}let s=null,i=null;if(192==(224&e))s=1,i=127;else if(224==(240&e))s=2,i=2047;else{if(240!=(248&e)){a+=t(128==(192&e)?"UNEXPECTED_CONTINUE":"BAD_PREFIX",a-1,n,r);continue}s=3,i=65535}if(a-1+s>=n.length){a+=t("OVERRUN",a-1,n,r);continue}let o=e&(1<<8-s-1)-1;for(let e=0;e<s;e++){let e=n[a];if(128!=(192&e)){a+=t("MISSING_CONTINUE",a,n,r),o=null;break}o=o<<6|63&e,a++}null!==o&&(o>1114111?a+=t("OUT_OF_RANGE",a-1-s,n,r,o):o>=55296&&o<=57343?a+=t("UTF16_SURROGATE",a-1-s,n,r,o):o<=i?a+=t("OVERLONG",a-1-s,n,r,o):r.push(o))}return r}(e,t).map((e=>e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(55296+(e>>10&1023),56320+(1023&e))))).join("")}function Or(e){const t=[];for(;e;)t.unshift(255&e),e>>=8;return t}function Br(e){if(Array.isArray(e)){let t=[];if(e.forEach((function(e){t=t.concat(Br(e))})),t.length<=55)return t.unshift(192+t.length),t;const n=Or(t.length);return n.unshift(247+n.length),n.concat(t)}const t=Array.prototype.slice.call(un(e,"object"));if(1===t.length&&t[0]<=127)return t;if(t.length<=55)return t.unshift(128+t.length),t;const n=Or(t.length);return n.unshift(183+n.length),n.concat(t)}const Lr="0123456789abcdef";function Ur(e){let t="0x";for(const n of Br(e))t+=Lr[n>>4],t+=Lr[15&n];return t}function Fr(e){return wr(Ir(e))}const Dr=new Uint8Array(32);Dr.fill(0);const Mr=BigInt(-1),jr=BigInt(0),zr=BigInt(1),_r=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),Gr=Tn(zr,32),Hr=Tn(jr,32),Vr={name:"string",version:"string",chainId:"uint256",verifyingContract:"address",salt:"bytes32"},Qr=["name","version","chainId","verifyingContract","salt"];function Kr(e){return function(t){return nn("string"==typeof t,`invalid domain value for ${JSON.stringify(e)}`,`domain.${e}`,t),t}}const Wr={name:Kr("name"),version:Kr("version"),chainId:function(e){const t=Sn(e,"domain.chainId");return nn(t>=0,"invalid chain ID","domain.chainId",e),Number.isSafeInteger(t)?Number(t):Bn(t)},verifyingContract:function(e){try{return xr(e).toLowerCase()}catch(e){}nn(!1,'invalid domain value "verifyingContract"',"domain.verifyingContract",e)},salt:function(e){const t=un(e,"domain.salt");return nn(32===t.length,'invalid domain value "salt"',"domain.salt",e),pn(t)}};function Jr(e){{const t=e.match(/^(u?)int(\d+)$/);if(t){const n=""===t[1],r=parseInt(t[2]);nn(r%8==0&&0!==r&&r<=256&&t[2]===String(r),"invalid numeric width","type",e);const a=Nn(_r,n?r-1:r),s=n?(a+zr)*Mr:jr;return function(t){const r=Sn(t,"value");return nn(r>=s&&r<=a,`value out-of-bounds for ${e}`,"value",r),Tn(n?xn(r,256):r,32)}}}{const t=e.match(/^bytes(\d+)$/);if(t){const n=parseInt(t[1]);return nn(0!==n&&n<=32&&t[1]===String(n),"invalid bytes width","type",e),function(t){return nn(un(t).length===n,`invalid length for ${e}`,"value",t),function(e){const t=un(e),n=t.length%32;return n?gn([t,Dr.slice(n)]):pn(t)}(t)}}}switch(e){case"address":return function(e){return bn(xr(e),32)};case"bool":return function(e){return e?Gr:Hr};case"bytes":return function(e){return wr(e)};case"string":return function(e){return Fr(e)}}return null}function qr(e,t){return`${e}(${t.map((({name:e,type:t})=>t+" "+e)).join(",")})`}function Yr(e){const t=e.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);return t?{base:t[1],index:t[2]+t[4],array:{base:t[1],prefix:t[1]+t[2],count:t[5]?parseInt(t[5]):-1}}:{base:e}}class Zr{primaryType;#s;get types(){return JSON.parse(this.#s)}#i;#o;constructor(e){this.#i=new Map,this.#o=new Map;const t=new Map,n=new Map,r=new Map,a={};Object.keys(e).forEach((s=>{a[s]=e[s].map((({name:t,type:n})=>{let{base:r,index:a}=Yr(n);return"int"!==r||e.int||(r="int256"),"uint"!==r||e.uint||(r="uint256"),{name:t,type:r+(a||"")}})),t.set(s,new Set),n.set(s,[]),r.set(s,new Set)})),this.#s=JSON.stringify(a);for(const r in a){const s=new Set;for(const i of a[r]){nn(!s.has(i.name),`duplicate variable name ${JSON.stringify(i.name)} in ${JSON.stringify(r)}`,"types",e),s.add(i.name);const a=Yr(i.type).base;nn(a!==r,`circular type reference to ${JSON.stringify(a)}`,"types",e),Jr(a)||(nn(n.has(a),`unknown type ${JSON.stringify(a)}`,"types",e),n.get(a).push(r),t.get(r).add(a))}}const s=Array.from(n.keys()).filter((e=>0===n.get(e).length));nn(0!==s.length,"missing primary type","types",e),nn(1===s.length,`ambiguous primary types or unused types: ${s.map((e=>JSON.stringify(e))).join(", ")}`,"types",e),Yt(this,{primaryType:s[0]}),function a(s,i){nn(!i.has(s),`circular type reference to ${JSON.stringify(s)}`,"types",e),i.add(s);for(const e of t.get(s))if(n.has(e)){a(e,i);for(const t of i)r.get(t).add(e)}i.delete(s)}(this.primaryType,new Set);for(const[e,t]of r){const n=Array.from(t);n.sort(),this.#i.set(e,qr(e,a[e])+n.map((e=>qr(e,a[e]))).join(""))}}getEncoder(e){let t=this.#o.get(e);return t||(t=this.#l(e),this.#o.set(e,t)),t}#l(e){{const t=Jr(e);if(t)return t}const t=Yr(e).array;if(t){const e=t.prefix,n=this.getEncoder(e);return r=>{nn(-1===t.count||t.count===r.length,`array length mismatch; expected length ${t.count}`,"value",r);let a=r.map(n);return this.#i.has(e)&&(a=a.map(wr)),wr(gn(a))}}const n=this.types[e];if(n){const t=Fr(this.#i.get(e));return e=>{const r=n.map((({name:t,type:n})=>{const r=this.getEncoder(n)(e[t]);return this.#i.has(n)?wr(r):r}));return r.unshift(t),gn(r)}}nn(!1,`unknown type: ${e}`,"type",e)}encodeType(e){const t=this.#i.get(e);return nn(t,`unknown type: ${JSON.stringify(e)}`,"name",e),t}encodeData(e,t){return this.getEncoder(e)(t)}hashStruct(e,t){return wr(this.encodeData(e,t))}encode(e){return this.encodeData(this.primaryType,e)}hash(e){return this.hashStruct(this.primaryType,e)}_visit(e,t,n){if(Jr(e))return n(e,t);const r=Yr(e).array;if(r)return nn(-1===r.count||r.count===t.length,`array length mismatch; expected length ${r.count}`,"value",t),t.map((e=>this._visit(r.prefix,e,n)));const a=this.types[e];if(a)return a.reduce(((e,{name:r,type:a})=>(e[r]=this._visit(a,t[r],n),e)),{});nn(!1,`unknown type: ${e}`,"type",e)}visit(e,t){return this._visit(this.primaryType,e,t)}static from(e){return new Zr(e)}static getPrimaryType(e){return Zr.from(e).primaryType}static hashStruct(e,t,n){return Zr.from(t).hashStruct(e,n)}static hashDomain(e){const t=[];for(const n in e){if(null==e[n])continue;const r=Vr[n];nn(r,`invalid typed-data domain key: ${JSON.stringify(n)}`,"domain",e),t.push({name:n,type:r})}return t.sort(((e,t)=>Qr.indexOf(e.name)-Qr.indexOf(t.name))),Zr.hashStruct("EIP712Domain",{EIP712Domain:t},e)}static encode(e,t,n){return gn(["0x1901",Zr.hashDomain(e),Zr.from(t).hash(n)])}static hash(e,t,n){return wr(Zr.encode(e,t,n))}static async resolveNames(e,t,n,r){e=Object.assign({},e);for(const t in e)null==e[t]&&delete e[t];const a={};e.verifyingContract&&!dn(e.verifyingContract,20)&&(a[e.verifyingContract]="0x");const s=Zr.from(t);s.visit(n,((e,t)=>("address"!==e||dn(t,20)||(a[t]="0x"),t)));for(const e in a)a[e]=await r(e);return e.verifyingContract&&a[e.verifyingContract]&&(e.verifyingContract=a[e.verifyingContract]),{domain:e,value:n=s.visit(n,((e,t)=>"address"===e&&a[t]?a[t]:t))}}static getPayload(e,t,n){Zr.hashDomain(e);const r={},a=[];Qr.forEach((t=>{const n=e[t];null!=n&&(r[t]=Wr[t](n),a.push({name:t,type:Vr[t]}))}));const s=Zr.from(t);t=s.types;const i=Object.assign({},t);return nn(null==i.EIP712Domain,"types must not contain EIP712Domain type","types.EIP712Domain",t),i.EIP712Domain=a,s.encode(n),{types:i,domain:r,primaryType:s.primaryType,message:s.visit(n,((e,t)=>{if(e.match(/^bytes(\d*)/))return pn(un(t));if(e.match(/^u?int/))return Sn(t).toString();switch(e){case"address":return t.toLowerCase();case"bool":return!!t;case"string":return nn("string"==typeof t,"invalid string","value",t),t}nn(!1,"unsupported type","type",e)}))}}}const $r="0x0000000000000000000000000000000000000000";function Xr(e,t,n,r){const{c:a,dkLen:s,DK:i,PRF:o,PRFSalt:l}=function(e,t,n,r){ke(e);const a=Fe({dkLen:32,asyncTick:10},r),{c:s,dkLen:i,asyncTick:o}=a;if(Ae(s),Ae(i),Ae(o),s<1)throw new Error("PBKDF2: iterations (c) should be >= 1");const l=Be(t),u=Be(n),c=new Uint8Array(i),d=Pt.create(e,l),f=d._cloneInto().update(u);return{c:s,dkLen:i,asyncTick:o,DK:c,PRF:d,PRFSalt:f}}(e,t,n,r);let u;const c=new Uint8Array(4),d=Re(c),f=new Uint8Array(o.outputLen);for(let e=1,t=0;t<s;e++,t+=o.outputLen){const n=i.subarray(t,t+o.outputLen);d.setInt32(0,e,!1),(u=l._cloneInto(u)).update(c).digestInto(f),n.set(f.subarray(0,n.length));for(let e=1;e<a;e++){o._cloneInto(u).update(f).digestInto(f);for(let e=0;e<n.length;e++)n[e]^=f[e]}}return function(e,t,n,r,a){return e.destroy(),t.destroy(),r&&r.destroy(),a.fill(0),n}(o,l,i,u,f)}const[ea,ta]=(()=>Xn.split(["0x428a2f98d728ae22","0x7137449123ef65cd","0xb5c0fbcfec4d3b2f","0xe9b5dba58189dbbc","0x3956c25bf348b538","0x59f111f1b605d019","0x923f82a4af194f9b","0xab1c5ed5da6d8118","0xd807aa98a3030242","0x12835b0145706fbe","0x243185be4ee4b28c","0x550c7dc3d5ffb4e2","0x72be5d74f27b896f","0x80deb1fe3b1696b1","0x9bdc06a725c71235","0xc19bf174cf692694","0xe49b69c19ef14ad2","0xefbe4786384f25e3","0x0fc19dc68b8cd5b5","0x240ca1cc77ac9c65","0x2de92c6f592b0275","0x4a7484aa6ea6e483","0x5cb0a9dcbd41fbd4","0x76f988da831153b5","0x983e5152ee66dfab","0xa831c66d2db43210","0xb00327c898fb213f","0xbf597fc7beef0ee4","0xc6e00bf33da88fc2","0xd5a79147930aa725","0x06ca6351e003826f","0x142929670a0e6e70","0x27b70a8546d22ffc","0x2e1b21385c26c926","0x4d2c6dfc5ac42aed","0x53380d139d95b3df","0x650a73548baf63de","0x766a0abb3c77b2a8","0x81c2c92e47edaee6","0x92722c851482353b","0xa2bfe8a14cf10364","0xa81a664bbc423001","0xc24b8b70d0f89791","0xc76c51a30654be30","0xd192e819d6ef5218","0xd69906245565a910","0xf40e35855771202a","0x106aa07032bbd1b8","0x19a4c116b8d2d0c8","0x1e376c085141ab53","0x2748774cdf8eeb99","0x34b0bcb5e19b48a8","0x391c0cb3c5c95a63","0x4ed8aa4ae3418acb","0x5b9cca4f7763e373","0x682e6ff3d6b2b8a3","0x748f82ee5defb2fc","0x78a5636f43172f60","0x84c87814a1f0ab72","0x8cc702081a6439ec","0x90befffa23631e28","0xa4506cebde82bde9","0xbef9a3f7b2c67915","0xc67178f2e372532b","0xca273eceea26619c","0xd186b8c721c0c207","0xeada7dd6cde0eb1e","0xf57d4f7fee6ed178","0x06f067aa72176fba","0x0a637dc5a2c898a6","0x113f9804bef90dae","0x1b710b35131c471b","0x28db77f523047d84","0x32caab7b40c72493","0x3c9ebe0a15c9bebc","0x431d67c49c100d4c","0x4cc5d4becb3e42b6","0x597f299cfc657e2a","0x5fcb6fab3ad6faec","0x6c44198c4a475817"].map((e=>BigInt(e)))))(),na=new Uint32Array(80),ra=new Uint32Array(80);class aa extends je{constructor(){super(128,64,16,!1),this.Ah=1779033703,this.Al=-205731576,this.Bh=-1150833019,this.Bl=-2067093701,this.Ch=1013904242,this.Cl=-23791573,this.Dh=-1521486534,this.Dl=1595750129,this.Eh=1359893119,this.El=-1377402159,this.Fh=-1694144372,this.Fl=725511199,this.Gh=528734635,this.Gl=-79577749,this.Hh=1541459225,this.Hl=327033209}get(){const{Ah:e,Al:t,Bh:n,Bl:r,Ch:a,Cl:s,Dh:i,Dl:o,Eh:l,El:u,Fh:c,Fl:d,Gh:f,Gl:h,Hh:p,Hl:g}=this;return[e,t,n,r,a,s,i,o,l,u,c,d,f,h,p,g]}set(e,t,n,r,a,s,i,o,l,u,c,d,f,h,p,g){this.Ah=0|e,this.Al=0|t,this.Bh=0|n,this.Bl=0|r,this.Ch=0|a,this.Cl=0|s,this.Dh=0|i,this.Dl=0|o,this.Eh=0|l,this.El=0|u,this.Fh=0|c,this.Fl=0|d,this.Gh=0|f,this.Gl=0|h,this.Hh=0|p,this.Hl=0|g}process(e,t){for(let n=0;n<16;n++,t+=4)na[n]=e.getUint32(t),ra[n]=e.getUint32(t+=4);for(let e=16;e<80;e++){const t=0|na[e-15],n=0|ra[e-15],r=Xn.rotrSH(t,n,1)^Xn.rotrSH(t,n,8)^Xn.shrSH(t,n,7),a=Xn.rotrSL(t,n,1)^Xn.rotrSL(t,n,8)^Xn.shrSL(t,n,7),s=0|na[e-2],i=0|ra[e-2],o=Xn.rotrSH(s,i,19)^Xn.rotrBH(s,i,61)^Xn.shrSH(s,i,6),l=Xn.rotrSL(s,i,19)^Xn.rotrBL(s,i,61)^Xn.shrSL(s,i,6),u=Xn.add4L(a,l,ra[e-7],ra[e-16]),c=Xn.add4H(u,r,o,na[e-7],na[e-16]);na[e]=0|c,ra[e]=0|u}let{Ah:n,Al:r,Bh:a,Bl:s,Ch:i,Cl:o,Dh:l,Dl:u,Eh:c,El:d,Fh:f,Fl:h,Gh:p,Gl:g,Hh:m,Hl:y}=this;for(let e=0;e<80;e++){const t=Xn.rotrSH(c,d,14)^Xn.rotrSH(c,d,18)^Xn.rotrBH(c,d,41),w=Xn.rotrSL(c,d,14)^Xn.rotrSL(c,d,18)^Xn.rotrBL(c,d,41),b=c&f^~c&p,v=d&h^~d&g,A=Xn.add5L(y,w,v,ta[e],ra[e]),E=Xn.add5H(A,m,t,b,ea[e],na[e]),k=0|A,x=Xn.rotrSH(n,r,28)^Xn.rotrBH(n,r,34)^Xn.rotrBH(n,r,39),N=Xn.rotrSL(n,r,28)^Xn.rotrBL(n,r,34)^Xn.rotrBL(n,r,39),S=n&a^n&i^a&i,C=r&s^r&o^s&o;m=0|p,y=0|g,p=0|f,g=0|h,f=0|c,h=0|d,({h:c,l:d}=Xn.add(0|l,0|u,0|E,0|k)),l=0|i,u=0|o,i=0|a,o=0|s,a=0|n,s=0|r;const P=Xn.add3L(k,N,C);n=Xn.add3H(P,E,x,S),r=0|P}({h:n,l:r}=Xn.add(0|this.Ah,0|this.Al,0|n,0|r)),({h:a,l:s}=Xn.add(0|this.Bh,0|this.Bl,0|a,0|s)),({h:i,l:o}=Xn.add(0|this.Ch,0|this.Cl,0|i,0|o)),({h:l,l:u}=Xn.add(0|this.Dh,0|this.Dl,0|l,0|u)),({h:c,l:d}=Xn.add(0|this.Eh,0|this.El,0|c,0|d)),({h:f,l:h}=Xn.add(0|this.Fh,0|this.Fl,0|f,0|h)),({h:p,l:g}=Xn.add(0|this.Gh,0|this.Gl,0|p,0|g)),({h:m,l:y}=Xn.add(0|this.Hh,0|this.Hl,0|m,0|y)),this.set(n,r,a,s,i,o,l,u,c,d,f,h,p,g,m,y)}roundClean(){na.fill(0),ra.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}const sa=De((()=>new aa)),ia=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof global)return global;throw new Error("unable to locate global object")}(),oa=ia.crypto||ia.msCrypto;function la(e){switch(e){case"sha256":return Ke.create();case"sha512":return sa.create()}nn(!1,"invalid hashing algorithm name","algorithm",e)}const ua=function(e){return la("sha256").update(e).digest()},ca=function(e){return la("sha512").update(e).digest()};let da=ua,fa=ca,ha=!1,pa=!1;function ga(e){const t=un(e,"data");return pn(da(t))}function ma(e){const t=un(e,"data");return pn(fa(t))}function ya(e){let t=e.toString(16);for(;t.length<2;)t="0"+t;return"0x"+t}function wa(e,t,n){let r=0;for(let a=0;a<n;a++)r=256*r+e[t+a];return r}function ba(e,t,n,r){const a=[];for(;n<t+1+r;){const s=va(e,n);a.push(s.result),tn((n+=s.consumed)<=t+1+r,"child data too short","BUFFER_OVERRUN",{buffer:e,length:r,offset:t})}return{consumed:1+r,result:a}}function va(e,t){tn(0!==e.length,"data too short","BUFFER_OVERRUN",{buffer:e,length:0,offset:1});const n=t=>{tn(t<=e.length,"data short segment too short","BUFFER_OVERRUN",{buffer:e,length:e.length,offset:t})};if(e[t]>=248){const r=e[t]-247;n(t+1+r);const a=wa(e,t+1,r);return n(t+1+r+a),ba(e,t,t+1+r,r+a)}if(e[t]>=192){const r=e[t]-192;return n(t+1+r),ba(e,t,t+1,r)}if(e[t]>=184){const r=e[t]-183;n(t+1+r);const a=wa(e,t+1,r);return n(t+1+r+a),{consumed:1+r+a,result:pn(e.slice(t+1+r,t+1+r+a))}}if(e[t]>=128){const r=e[t]-128;return n(t+1+r),{consumed:1+r,result:pn(e.slice(t+1,t+1+r))}}return{consumed:1,result:ya(e[t])}}function Aa(e){const t=un(e,"data"),n=va(t,0);return nn(n.consumed===t.length,"unexpected junk after rlp payload","data",e),n.result}function Ea(e,t){return{address:xr(e),storageKeys:t.map(((e,t)=>(nn(dn(e,32),"invalid slot",`storageKeys[${t}]`,e),e.toLowerCase())))}}function ka(e){if(Array.isArray(e))return e.map(((t,n)=>Array.isArray(t)?(nn(2===t.length,"invalid slot set",`value[${n}]`,t),Ea(t[0],t[1])):(nn(null!=t&&"object"==typeof t,"invalid address-slot set","value",e),Ea(t.address,t.storageKeys))));nn(null!=e&&"object"==typeof e,"invalid access list","value",e);const t=Object.keys(e).map((t=>{const n=e[t].reduce(((e,t)=>(e[t]=!0,e)),{});return Ea(t,Object.keys(n).sort())}));return t.sort(((e,t)=>e.address.localeCompare(t.address))),t}function xa(e){return{address:xr(e.address),nonce:Sn(null!=e.nonce?e.nonce:0),chainId:Sn(null!=e.chainId?e.chainId:0),signature:Hn.from(e.signature)}}function Na(e){let t;return t="string"==typeof e?Vn.computePublicKey(e,!1):e.publicKey,xr(wr("0x"+t.substring(4)).substring(26))}ga._=ua,ga.lock=function(){ha=!0},ga.register=function(e){if(ha)throw new Error("sha256 is locked");da=e},Object.freeze(ga),ma._=ca,ma.lock=function(){pa=!0},ma.register=function(e){if(pa)throw new Error("sha512 is locked");fa=e},Object.freeze(ga);const Sa=BigInt(0),Ca=BigInt(2),Pa=BigInt(27),Ra=BigInt(28),Ia=BigInt(35),Ta=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),Oa=131072;function Ba(e,t){let n=e.toString(16);for(;n.length<2;)n="0"+n;return n+=ga(t).substring(4),"0x"+n}function La(e){return"0x"===e?null:xr(e)}function Ua(e,t){try{return ka(e)}catch(n){nn(!1,n.message,t,e)}}function Fa(e,t){try{if(!Array.isArray(e))throw new Error("authorizationList: invalid array");const t=[];for(let n=0;n<e.length;n++){const r=e[n];if(!Array.isArray(r))throw new Error(`authorization[${n}]: invalid array`);if(6!==r.length)throw new Error(`authorization[${n}]: wrong length`);if(!r[1])throw new Error(`authorization[${n}]: null address`);t.push({address:La(r[1]),nonce:Ma(r[2],"nonce"),chainId:Ma(r[0],"chainId"),signature:Hn.from({yParity:Da(r[3],"yParity"),r:bn(r[4],32),s:bn(r[5],32)})})}return t}catch(n){nn(!1,n.message,t,e)}}function Da(e,t){return"0x"===e?0:In(e,t)}function Ma(e,t){if("0x"===e)return Sa;const n=Sn(e,t);return nn(n<=Ta,"value exceeds uint size",t,n),n}function ja(e,t){const n=Sn(e,"value"),r=On(n);return nn(r.length<=32,"value too large",`tx.${t}`,n),r}function za(e){return ka(e).map((e=>[e.address,e.storageKeys]))}function _a(e,t){nn(Array.isArray(e),`invalid ${t}`,"value",e);for(let t=0;t<e.length;t++)nn(dn(e[t],32),"invalid ${ param } hash",`value[${t}]`,e[t]);return e}function Ga(e,t){let n;try{if(n=Da(t[0],"yParity"),0!==n&&1!==n)throw new Error("bad yParity")}catch(e){nn(!1,"invalid yParity","yParity",t[0])}const r=bn(t[1],32),a=bn(t[2],32),s=Hn.from({r,s:a,yParity:n});e.signature=s}class Ha{#u;#c;#d;#f;#h;#p;#g;#m;#y;#w;#b;#v;#A;#E;#k;#x;#N;get type(){return this.#u}set type(e){switch(e){case null:this.#u=null;break;case 0:case"legacy":this.#u=0;break;case 1:case"berlin":case"eip-2930":this.#u=1;break;case 2:case"london":case"eip-1559":this.#u=2;break;case 3:case"cancun":case"eip-4844":this.#u=3;break;case 4:case"pectra":case"eip-7702":this.#u=4;break;default:nn(!1,"unsupported transaction type","type",e)}}get typeName(){switch(this.type){case 0:return"legacy";case 1:return"eip-2930";case 2:return"eip-1559";case 3:return"eip-4844";case 4:return"eip-7702"}return null}get to(){const e=this.#c;return null==e&&3===this.type?$r:e}set to(e){this.#c=null==e?null:xr(e)}get nonce(){return this.#f}set nonce(e){this.#f=In(e,"value")}get gasLimit(){return this.#h}set gasLimit(e){this.#h=Sn(e)}get gasPrice(){const e=this.#p;return null!=e||0!==this.type&&1!==this.type?e:Sa}set gasPrice(e){this.#p=null==e?null:Sn(e,"gasPrice")}get maxPriorityFeePerGas(){const e=this.#g;return null==e?2===this.type||3===this.type?Sa:null:e}set maxPriorityFeePerGas(e){this.#g=null==e?null:Sn(e,"maxPriorityFeePerGas")}get maxFeePerGas(){const e=this.#m;return null==e?2===this.type||3===this.type?Sa:null:e}set maxFeePerGas(e){this.#m=null==e?null:Sn(e,"maxFeePerGas")}get data(){return this.#d}set data(e){this.#d=pn(e)}get value(){return this.#y}set value(e){this.#y=Sn(e,"value")}get chainId(){return this.#w}set chainId(e){this.#w=Sn(e)}get signature(){return this.#b||null}set signature(e){this.#b=null==e?null:Hn.from(e)}get accessList(){const e=this.#v||null;return null==e?1===this.type||2===this.type||3===this.type?[]:null:e}set accessList(e){this.#v=null==e?null:ka(e)}get authorizationList(){const e=this.#N||null;return null==e&&4===this.type?[]:e}set authorizationList(e){this.#N=null==e?null:e.map((e=>xa(e)))}get maxFeePerBlobGas(){const e=this.#A;return null==e&&3===this.type?Sa:e}set maxFeePerBlobGas(e){this.#A=null==e?null:Sn(e,"maxFeePerBlobGas")}get blobVersionedHashes(){let e=this.#E;return null==e&&3===this.type?[]:e}set blobVersionedHashes(e){if(null!=e){nn(Array.isArray(e),"blobVersionedHashes must be an Array","value",e),e=e.slice();for(let t=0;t<e.length;t++)nn(dn(e[t],32),"invalid blobVersionedHash",`value[${t}]`,e[t])}this.#E=e}get blobs(){return null==this.#x?null:this.#x.map((e=>Object.assign({},e)))}set blobs(e){if(null==e)return void(this.#x=null);const t=[],n=[];for(let r=0;r<e.length;r++){const a=e[r];if(fn(a)){tn(this.#k,"adding a raw blob requires a KZG library","UNSUPPORTED_OPERATION",{operation:"set blobs()"});let e=un(a);if(nn(e.length<=Oa,"blob is too large",`blobs[${r}]`,a),e.length!==Oa){const t=new Uint8Array(Oa);t.set(e),e=t}const s=this.#k.blobToKzgCommitment(e),i=pn(this.#k.computeBlobKzgProof(e,s));t.push({data:pn(e),commitment:pn(s),proof:i}),n.push(Ba(1,s))}else{const e=pn(a.commitment);t.push({data:pn(a.data),commitment:e,proof:pn(a.proof)}),n.push(Ba(1,e))}}this.#x=t,this.#E=n}get kzg(){return this.#k}set kzg(e){this.#k=null==e?null:function(e){return{blobToKzgCommitment:t=>{if("computeBlobProof"in e){if("blobToKzgCommitment"in e&&"function"==typeof e.blobToKzgCommitment)return un(e.blobToKzgCommitment(pn(t)))}else if("blobToKzgCommitment"in e&&"function"==typeof e.blobToKzgCommitment)return un(e.blobToKzgCommitment(t));if("blobToKZGCommitment"in e&&"function"==typeof e.blobToKZGCommitment)return un(e.blobToKZGCommitment(pn(t)));nn(!1,"unsupported KZG library","kzg",e)},computeBlobKzgProof:(t,n)=>"computeBlobProof"in e&&"function"==typeof e.computeBlobProof?un(e.computeBlobProof(pn(t),pn(n))):"computeBlobKzgProof"in e&&"function"==typeof e.computeBlobKzgProof?e.computeBlobKzgProof(t,n):"computeBlobKZGProof"in e&&"function"==typeof e.computeBlobKZGProof?un(e.computeBlobKZGProof(pn(t),pn(n))):void nn(!1,"unsupported KZG library","kzg",e)}}(e)}constructor(){this.#u=null,this.#c=null,this.#f=0,this.#h=Sa,this.#p=null,this.#g=null,this.#m=null,this.#d="0x",this.#y=Sa,this.#w=Sa,this.#b=null,this.#v=null,this.#A=null,this.#E=null,this.#k=null,this.#x=null,this.#N=null}get hash(){return null==this.signature?null:wr(this.#S(!0,!1))}get unsignedHash(){return wr(this.unsignedSerialized)}get from(){return null==this.signature?null:(e=this.unsignedHash,t=this.signature,Na(Vn.recoverPublicKey(e,t)));var e,t}get fromPublicKey(){return null==this.signature?null:Vn.recoverPublicKey(this.unsignedHash,this.signature)}isSigned(){return null!=this.signature}#S(e,t){tn(!e||null!=this.signature,"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized","UNSUPPORTED_OPERATION",{operation:".serialized"});const n=e?this.signature:null;switch(this.inferType()){case 0:return function(e,t){const n=[ja(e.nonce,"nonce"),ja(e.gasPrice||0,"gasPrice"),ja(e.gasLimit,"gasLimit"),e.to||"0x",ja(e.value,"value"),e.data];let r=Sa;if(e.chainId!=Sa)r=Sn(e.chainId,"tx.chainId"),nn(!t||null==t.networkV||t.legacyChainId===r,"tx.chainId/sig.v mismatch","sig",t);else if(e.signature){const t=e.signature.legacyChainId;null!=t&&(r=t)}if(!t)return r!==Sa&&(n.push(On(r)),n.push("0x"),n.push("0x")),Ur(n);let a=BigInt(27+t.yParity);return r!==Sa?a=Hn.getChainIdV(r,t.v):BigInt(t.v)!==a&&nn(!1,"tx.chainId/sig.v mismatch","sig",t),n.push(On(a)),n.push(On(t.r)),n.push(On(t.s)),Ur(n)}(this,n);case 1:return function(e,t){const n=[ja(e.chainId,"chainId"),ja(e.nonce,"nonce"),ja(e.gasPrice||0,"gasPrice"),ja(e.gasLimit,"gasLimit"),e.to||"0x",ja(e.value,"value"),e.data,za(e.accessList||[])];return t&&(n.push(ja(t.yParity,"recoveryParam")),n.push(On(t.r)),n.push(On(t.s))),gn(["0x01",Ur(n)])}(this,n);case 2:return function(e,t){const n=[ja(e.chainId,"chainId"),ja(e.nonce,"nonce"),ja(e.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),ja(e.maxFeePerGas||0,"maxFeePerGas"),ja(e.gasLimit,"gasLimit"),e.to||"0x",ja(e.value,"value"),e.data,za(e.accessList||[])];return t&&(n.push(ja(t.yParity,"yParity")),n.push(On(t.r)),n.push(On(t.s))),gn(["0x02",Ur(n)])}(this,n);case 3:return function(e,t,n){const r=[ja(e.chainId,"chainId"),ja(e.nonce,"nonce"),ja(e.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),ja(e.maxFeePerGas||0,"maxFeePerGas"),ja(e.gasLimit,"gasLimit"),e.to||$r,ja(e.value,"value"),e.data,za(e.accessList||[]),ja(e.maxFeePerBlobGas||0,"maxFeePerBlobGas"),_a(e.blobVersionedHashes||[],"blobVersionedHashes")];return t&&(r.push(ja(t.yParity,"yParity")),r.push(On(t.r)),r.push(On(t.s)),n)?gn(["0x03",Ur([r,n.map((e=>e.data)),n.map((e=>e.commitment)),n.map((e=>e.proof))])]):gn(["0x03",Ur(r)])}(this,n,t?this.blobs:null);case 4:return function(e,t){const n=[ja(e.chainId,"chainId"),ja(e.nonce,"nonce"),ja(e.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),ja(e.maxFeePerGas||0,"maxFeePerGas"),ja(e.gasLimit,"gasLimit"),e.to||"0x",ja(e.value,"value"),e.data,za(e.accessList||[]),(r=e.authorizationList||[],r.map((e=>[ja(e.chainId,"chainId"),e.address,ja(e.nonce,"nonce"),ja(e.signature.yParity,"yParity"),e.signature.r,e.signature.s])))];var r;return t&&(n.push(ja(t.yParity,"yParity")),n.push(On(t.r)),n.push(On(t.s))),gn(["0x04",Ur(n)])}(this,n)}tn(!1,"unsupported transaction type","UNSUPPORTED_OPERATION",{operation:".serialized"})}get serialized(){return this.#S(!0,!0)}get unsignedSerialized(){return this.#S(!1,!1)}inferType(){const e=this.inferTypes();return e.indexOf(2)>=0?2:e.pop()}inferTypes(){const e=null!=this.gasPrice,t=null!=this.maxFeePerGas||null!=this.maxPriorityFeePerGas,n=null!=this.accessList,r=null!=this.#A||this.#E;null!=this.maxFeePerGas&&null!=this.maxPriorityFeePerGas&&tn(this.maxFeePerGas>=this.maxPriorityFeePerGas,"priorityFee cannot be more than maxFee","BAD_DATA",{value:this}),tn(!t||0!==this.type&&1!==this.type,"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas","BAD_DATA",{value:this}),tn(0!==this.type||!n,"legacy transaction cannot have accessList","BAD_DATA",{value:this});const a=[];return null!=this.type?a.push(this.type):this.authorizationList&&this.authorizationList.length?a.push(4):t?a.push(2):e?(a.push(1),n||a.push(0)):n?(a.push(1),a.push(2)):(r&&this.to||(a.push(0),a.push(1),a.push(2)),a.push(3)),a.sort(),a}isLegacy(){return 0===this.type}isBerlin(){return 1===this.type}isLondon(){return 2===this.type}isCancun(){return 3===this.type}clone(){return Ha.from(this)}toJSON(){const e=e=>null==e?null:e.toString();return{type:this.type,to:this.to,data:this.data,nonce:this.nonce,gasLimit:e(this.gasLimit),gasPrice:e(this.gasPrice),maxPriorityFeePerGas:e(this.maxPriorityFeePerGas),maxFeePerGas:e(this.maxFeePerGas),value:e(this.value),chainId:e(this.chainId),sig:this.signature?this.signature.toJSON():null,accessList:this.accessList}}static from(e){if(null==e)return new Ha;if("string"==typeof e){const t=un(e);if(t[0]>=127)return Ha.from(function(e){const t=Aa(e);nn(Array.isArray(t)&&(9===t.length||6===t.length),"invalid field count for legacy transaction","data",e);const n={type:0,nonce:Da(t[0],"nonce"),gasPrice:Ma(t[1],"gasPrice"),gasLimit:Ma(t[2],"gasLimit"),to:La(t[3]),value:Ma(t[4],"value"),data:pn(t[5]),chainId:Sa};if(6===t.length)return n;const r=Ma(t[6],"v"),a=Ma(t[7],"r"),s=Ma(t[8],"s");if(a===Sa&&s===Sa)n.chainId=r;else{let e=(r-Ia)/Ca;e<Sa&&(e=Sa),n.chainId=e,nn(e!==Sa||r===Pa||r===Ra,"non-canonical legacy v","v",t[6]),n.signature=Hn.from({r:bn(t[7],32),s:bn(t[8],32),v:r})}return n}(t));switch(t[0]){case 1:return Ha.from(function(e){const t=Aa(un(e).slice(1));nn(Array.isArray(t)&&(8===t.length||11===t.length),"invalid field count for transaction type: 1","data",pn(e));const n={type:1,chainId:Ma(t[0],"chainId"),nonce:Da(t[1],"nonce"),gasPrice:Ma(t[2],"gasPrice"),gasLimit:Ma(t[3],"gasLimit"),to:La(t[4]),value:Ma(t[5],"value"),data:pn(t[6]),accessList:Ua(t[7],"accessList")};return 8===t.length||Ga(n,t.slice(8)),n}(t));case 2:return Ha.from(function(e){const t=Aa(un(e).slice(1));nn(Array.isArray(t)&&(9===t.length||12===t.length),"invalid field count for transaction type: 2","data",pn(e));const n={type:2,chainId:Ma(t[0],"chainId"),nonce:Da(t[1],"nonce"),maxPriorityFeePerGas:Ma(t[2],"maxPriorityFeePerGas"),maxFeePerGas:Ma(t[3],"maxFeePerGas"),gasPrice:null,gasLimit:Ma(t[4],"gasLimit"),to:La(t[5]),value:Ma(t[6],"value"),data:pn(t[7]),accessList:Ua(t[8],"accessList")};return 9===t.length||Ga(n,t.slice(9)),n}(t));case 3:return Ha.from(function(e){let t=Aa(un(e).slice(1)),n="3",r=null;if(4===t.length&&Array.isArray(t[0])){n="3 (network format)";const e=t[1],a=t[2],s=t[3];nn(Array.isArray(e),"invalid network format: blobs not an array","fields[1]",e),nn(Array.isArray(a),"invalid network format: commitments not an array","fields[2]",a),nn(Array.isArray(s),"invalid network format: proofs not an array","fields[3]",s),nn(e.length===a.length,"invalid network format: blobs/commitments length mismatch","fields",t),nn(e.length===s.length,"invalid network format: blobs/proofs length mismatch","fields",t),r=[];for(let n=0;n<t[1].length;n++)r.push({data:e[n],commitment:a[n],proof:s[n]});t=t[0]}nn(Array.isArray(t)&&(11===t.length||14===t.length),`invalid field count for transaction type: ${n}`,"data",pn(e));const a={type:3,chainId:Ma(t[0],"chainId"),nonce:Da(t[1],"nonce"),maxPriorityFeePerGas:Ma(t[2],"maxPriorityFeePerGas"),maxFeePerGas:Ma(t[3],"maxFeePerGas"),gasPrice:null,gasLimit:Ma(t[4],"gasLimit"),to:La(t[5]),value:Ma(t[6],"value"),data:pn(t[7]),accessList:Ua(t[8],"accessList"),maxFeePerBlobGas:Ma(t[9],"maxFeePerBlobGas"),blobVersionedHashes:t[10]};r&&(a.blobs=r),nn(null!=a.to,`invalid address for transaction type: ${n}`,"data",e),nn(Array.isArray(a.blobVersionedHashes),"invalid blobVersionedHashes: must be an array","data",e);for(let t=0;t<a.blobVersionedHashes.length;t++)nn(dn(a.blobVersionedHashes[t],32),`invalid blobVersionedHash at index ${t}: must be length 32`,"data",e);return 11===t.length||Ga(a,t.slice(11)),a}(t));case 4:return Ha.from(function(e){const t=Aa(un(e).slice(1));nn(Array.isArray(t)&&(10===t.length||13===t.length),"invalid field count for transaction type: 4","data",pn(e));const n={type:4,chainId:Ma(t[0],"chainId"),nonce:Da(t[1],"nonce"),maxPriorityFeePerGas:Ma(t[2],"maxPriorityFeePerGas"),maxFeePerGas:Ma(t[3],"maxFeePerGas"),gasPrice:null,gasLimit:Ma(t[4],"gasLimit"),to:La(t[5]),value:Ma(t[6],"value"),data:pn(t[7]),accessList:Ua(t[8],"accessList"),authorizationList:Fa(t[9],"authorizationList")};return 10===t.length||Ga(n,t.slice(10)),n}(t))}tn(!1,"unsupported transaction type","UNSUPPORTED_OPERATION",{operation:"from"})}const t=new Ha;return null!=e.type&&(t.type=e.type),null!=e.to&&(t.to=e.to),null!=e.nonce&&(t.nonce=e.nonce),null!=e.gasLimit&&(t.gasLimit=e.gasLimit),null!=e.gasPrice&&(t.gasPrice=e.gasPrice),null!=e.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=e.maxPriorityFeePerGas),null!=e.maxFeePerGas&&(t.maxFeePerGas=e.maxFeePerGas),null!=e.maxFeePerBlobGas&&(t.maxFeePerBlobGas=e.maxFeePerBlobGas),null!=e.data&&(t.data=e.data),null!=e.value&&(t.value=e.value),null!=e.chainId&&(t.chainId=e.chainId),null!=e.signature&&(t.signature=Hn.from(e.signature)),null!=e.accessList&&(t.accessList=e.accessList),null!=e.authorizationList&&(t.authorizationList=e.authorizationList),null!=e.blobVersionedHashes&&(t.blobVersionedHashes=e.blobVersionedHashes),null!=e.kzg&&(t.kzg=e.kzg),null!=e.blobs&&(t.blobs=e.blobs),null!=e.hash&&(nn(t.isSigned(),"unsigned transaction cannot define '.hash'","tx",e),nn(t.hash===e.hash,"hash mismatch","tx",e)),null!=e.from&&(nn(t.isSigned(),"unsigned transaction cannot define '.from'","tx",e),nn(t.from.toLowerCase()===(e.from||"").toLowerCase(),"from mismatch","tx",e)),t}}const Va=BigInt(0);function Qa(e){return null==e?null:e}function Ka(e){return null==e?null:e.toString()}class Wa{gasPrice;maxFeePerGas;maxPriorityFeePerGas;constructor(e,t,n){Yt(this,{gasPrice:Qa(e),maxFeePerGas:Qa(t),maxPriorityFeePerGas:Qa(n)})}toJSON(){const{gasPrice:e,maxFeePerGas:t,maxPriorityFeePerGas:n}=this;return{_type:"FeeData",gasPrice:Ka(e),maxFeePerGas:Ka(t),maxPriorityFeePerGas:Ka(n)}}}function Ja(e){const t={};e.to&&(t.to=e.to),e.from&&(t.from=e.from),e.data&&(t.data=pn(e.data));const n="chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);for(const r of n)r in e&&null!=e[r]&&(t[r]=Sn(e[r],`request.${r}`));const r="type,nonce".split(/,/);for(const n of r)n in e&&null!=e[n]&&(t[n]=In(e[n],`request.${n}`));return e.accessList&&(t.accessList=ka(e.accessList)),e.authorizationList&&(t.authorizationList=e.authorizationList.slice()),"blockTag"in e&&(t.blockTag=e.blockTag),"enableCcipRead"in e&&(t.enableCcipRead=!!e.enableCcipRead),"customData"in e&&(t.customData=e.customData),"blobVersionedHashes"in e&&e.blobVersionedHashes&&(t.blobVersionedHashes=e.blobVersionedHashes.slice()),"kzg"in e&&(t.kzg=e.kzg),"blobs"in e&&e.blobs&&(t.blobs=e.blobs.map((e=>fn(e)?pn(e):Object.assign({},e)))),t}class qa{provider;number;hash;timestamp;parentHash;parentBeaconBlockRoot;nonce;difficulty;gasLimit;gasUsed;stateRoot;receiptsRoot;blobGasUsed;excessBlobGas;miner;prevRandao;extraData;baseFeePerGas;#C;constructor(e,t){this.#C=e.transactions.map((e=>"string"!=typeof e?new $a(e,t):e)),Yt(this,{provider:t,hash:Qa(e.hash),number:e.number,timestamp:e.timestamp,parentHash:e.parentHash,parentBeaconBlockRoot:e.parentBeaconBlockRoot,nonce:e.nonce,difficulty:e.difficulty,gasLimit:e.gasLimit,gasUsed:e.gasUsed,blobGasUsed:e.blobGasUsed,excessBlobGas:e.excessBlobGas,miner:e.miner,prevRandao:Qa(e.prevRandao),extraData:e.extraData,baseFeePerGas:Qa(e.baseFeePerGas),stateRoot:e.stateRoot,receiptsRoot:e.receiptsRoot})}get transactions(){return this.#C.map((e=>"string"==typeof e?e:e.hash))}get prefetchedTransactions(){const e=this.#C.slice();return 0===e.length?[]:(tn("object"==typeof e[0],"transactions were not prefetched with block request","UNSUPPORTED_OPERATION",{operation:"transactionResponses()"}),e)}toJSON(){const{baseFeePerGas:e,difficulty:t,extraData:n,gasLimit:r,gasUsed:a,hash:s,miner:i,prevRandao:o,nonce:l,number:u,parentHash:c,parentBeaconBlockRoot:d,stateRoot:f,receiptsRoot:h,timestamp:p,transactions:g}=this;return{_type:"Block",baseFeePerGas:Ka(e),difficulty:Ka(t),extraData:n,gasLimit:Ka(r),gasUsed:Ka(a),blobGasUsed:Ka(this.blobGasUsed),excessBlobGas:Ka(this.excessBlobGas),hash:s,miner:i,prevRandao:o,nonce:l,number:u,parentHash:c,timestamp:p,parentBeaconBlockRoot:d,stateRoot:f,receiptsRoot:h,transactions:g}}[Symbol.iterator](){let e=0;const t=this.transactions;return{next:()=>e<this.length?{value:t[e++],done:!1}:{value:void 0,done:!0}}}get length(){return this.#C.length}get date(){return null==this.timestamp?null:new Date(1e3*this.timestamp)}async getTransaction(e){let t;if("number"==typeof e)t=this.#C[e];else{const n=e.toLowerCase();for(const e of this.#C){if("string"==typeof e){if(e!==n)continue;t=e;break}if(e.hash===n){t=e;break}}}if(null==t)throw new Error("no such tx");return"string"==typeof t?await this.provider.getTransaction(t):t}getPrefetchedTransaction(e){const t=this.prefetchedTransactions;if("number"==typeof e)return t[e];e=e.toLowerCase();for(const n of t)if(n.hash===e)return n;nn(!1,"no matching transaction","indexOrHash",e)}isMined(){return!!this.hash}isLondon(){return!!this.baseFeePerGas}orphanedEvent(){if(!this.isMined())throw new Error("");return{orphan:"drop-block",hash:this.hash,number:this.number}}}class Ya{provider;transactionHash;blockHash;blockNumber;removed;address;data;topics;index;transactionIndex;constructor(e,t){this.provider=t;const n=Object.freeze(e.topics.slice());Yt(this,{transactionHash:e.transactionHash,blockHash:e.blockHash,blockNumber:e.blockNumber,removed:e.removed,address:e.address,data:e.data,topics:n,index:e.index,transactionIndex:e.transactionIndex})}toJSON(){const{address:e,blockHash:t,blockNumber:n,data:r,index:a,removed:s,topics:i,transactionHash:o,transactionIndex:l}=this;return{_type:"log",address:e,blockHash:t,blockNumber:n,data:r,index:a,removed:s,topics:i,transactionHash:o,transactionIndex:l}}async getBlock(){const e=await this.provider.getBlock(this.blockHash);return tn(!!e,"failed to find transaction","UNKNOWN_ERROR",{}),e}async getTransaction(){const e=await this.provider.getTransaction(this.transactionHash);return tn(!!e,"failed to find transaction","UNKNOWN_ERROR",{}),e}async getTransactionReceipt(){const e=await this.provider.getTransactionReceipt(this.transactionHash);return tn(!!e,"failed to find transaction receipt","UNKNOWN_ERROR",{}),e}removedEvent(){return{orphan:"drop-log",log:{transactionHash:(e=this).transactionHash,blockHash:e.blockHash,blockNumber:e.blockNumber,address:e.address,data:e.data,topics:Object.freeze(e.topics.slice()),index:e.index}};var e}}class Za{provider;to;from;contractAddress;hash;index;blockHash;blockNumber;logsBloom;gasUsed;blobGasUsed;cumulativeGasUsed;gasPrice;blobGasPrice;type;status;root;#P;constructor(e,t){this.#P=Object.freeze(e.logs.map((e=>new Ya(e,t))));let n=Va;null!=e.effectiveGasPrice?n=e.effectiveGasPrice:null!=e.gasPrice&&(n=e.gasPrice),Yt(this,{provider:t,to:e.to,from:e.from,contractAddress:e.contractAddress,hash:e.hash,index:e.index,blockHash:e.blockHash,blockNumber:e.blockNumber,logsBloom:e.logsBloom,gasUsed:e.gasUsed,cumulativeGasUsed:e.cumulativeGasUsed,blobGasUsed:e.blobGasUsed,gasPrice:n,blobGasPrice:e.blobGasPrice,type:e.type,status:e.status,root:e.root})}get logs(){return this.#P}toJSON(){const{to:e,from:t,contractAddress:n,hash:r,index:a,blockHash:s,blockNumber:i,logsBloom:o,logs:l,status:u,root:c}=this;return{_type:"TransactionReceipt",blockHash:s,blockNumber:i,contractAddress:n,cumulativeGasUsed:Ka(this.cumulativeGasUsed),from:t,gasPrice:Ka(this.gasPrice),blobGasUsed:Ka(this.blobGasUsed),blobGasPrice:Ka(this.blobGasPrice),gasUsed:Ka(this.gasUsed),hash:r,index:a,logs:l,logsBloom:o,root:c,status:u,to:e}}get length(){return this.logs.length}[Symbol.iterator](){let e=0;return{next:()=>e<this.length?{value:this.logs[e++],done:!1}:{value:void 0,done:!0}}}get fee(){return this.gasUsed*this.gasPrice}async getBlock(){const e=await this.provider.getBlock(this.blockHash);if(null==e)throw new Error("TODO");return e}async getTransaction(){const e=await this.provider.getTransaction(this.hash);if(null==e)throw new Error("TODO");return e}async getResult(){return await this.provider.getTransactionResult(this.hash)}async confirmations(){return await this.provider.getBlockNumber()-this.blockNumber+1}removedEvent(){return es(this)}reorderedEvent(e){return tn(!e||e.isMined(),"unmined 'other' transction cannot be orphaned","UNSUPPORTED_OPERATION",{operation:"reorderedEvent(other)"}),Xa(this,e)}}class $a{provider;blockNumber;blockHash;index;hash;type;to;from;nonce;gasLimit;gasPrice;maxPriorityFeePerGas;maxFeePerGas;maxFeePerBlobGas;data;value;chainId;signature;accessList;blobVersionedHashes;authorizationList;#R;constructor(e,t){this.provider=t,this.blockNumber=null!=e.blockNumber?e.blockNumber:null,this.blockHash=null!=e.blockHash?e.blockHash:null,this.hash=e.hash,this.index=e.index,this.type=e.type,this.from=e.from,this.to=e.to||null,this.gasLimit=e.gasLimit,this.nonce=e.nonce,this.data=e.data,this.value=e.value,this.gasPrice=e.gasPrice,this.maxPriorityFeePerGas=null!=e.maxPriorityFeePerGas?e.maxPriorityFeePerGas:null,this.maxFeePerGas=null!=e.maxFeePerGas?e.maxFeePerGas:null,this.maxFeePerBlobGas=null!=e.maxFeePerBlobGas?e.maxFeePerBlobGas:null,this.chainId=e.chainId,this.signature=e.signature,this.accessList=null!=e.accessList?e.accessList:null,this.blobVersionedHashes=null!=e.blobVersionedHashes?e.blobVersionedHashes:null,this.authorizationList=null!=e.authorizationList?e.authorizationList:null,this.#R=-1}toJSON(){const{blockNumber:e,blockHash:t,index:n,hash:r,type:a,to:s,from:i,nonce:o,data:l,signature:u,accessList:c,blobVersionedHashes:d}=this;return{_type:"TransactionResponse",accessList:c,blockNumber:e,blockHash:t,blobVersionedHashes:d,chainId:Ka(this.chainId),data:l,from:i,gasLimit:Ka(this.gasLimit),gasPrice:Ka(this.gasPrice),hash:r,maxFeePerGas:Ka(this.maxFeePerGas),maxPriorityFeePerGas:Ka(this.maxPriorityFeePerGas),maxFeePerBlobGas:Ka(this.maxFeePerBlobGas),nonce:o,signature:u,to:s,index:n,type:a,value:Ka(this.value)}}async getBlock(){let e=this.blockNumber;if(null==e){const t=await this.getTransaction();t&&(e=t.blockNumber)}if(null==e)return null;const t=this.provider.getBlock(e);if(null==t)throw new Error("TODO");return t}async getTransaction(){return this.provider.getTransaction(this.hash)}async confirmations(){if(null==this.blockNumber){const{tx:e,blockNumber:t}=await qt({tx:this.getTransaction(),blockNumber:this.provider.getBlockNumber()});return null==e||null==e.blockNumber?0:t-e.blockNumber+1}return await this.provider.getBlockNumber()-this.blockNumber+1}async wait(e,t){const n=null==e?1:e,r=null==t?0:t;let a=this.#R,s=-1,i=-1===a;const o=async()=>{if(i)return null;const{blockNumber:e,nonce:t}=await qt({blockNumber:this.provider.getBlockNumber(),nonce:this.provider.getTransactionCount(this.from)});if(t<this.nonce)return void(a=e);if(i)return null;const r=await this.getTransaction();if(!r||null==r.blockNumber)for(-1===s&&(s=a-3,s<this.#R&&(s=this.#R));s<=e;){if(i)return null;const t=await this.provider.getBlock(s,!0);if(null==t)return;for(const e of t)if(e===this.hash)return;for(let r=0;r<t.length;r++){const s=await t.getTransaction(r);if(s.from===this.from&&s.nonce===this.nonce){if(i)return null;const t=await this.provider.getTransactionReceipt(s.hash);if(null==t)return;if(e-t.blockNumber+1<n)return;let r="replaced";s.data===this.data&&s.to===this.to&&s.value===this.value?r="repriced":"0x"===s.data&&s.from===s.to&&s.value===Va&&(r="cancelled"),tn(!1,"transaction was replaced","TRANSACTION_REPLACED",{cancelled:"replaced"===r||"cancelled"===r,reason:r,replacement:s.replaceableTransaction(a),hash:s.hash,receipt:t})}}s++}},l=e=>{if(null==e||0!==e.status)return e;tn(!1,"transaction execution reverted","CALL_EXCEPTION",{action:"sendTransaction",data:null,reason:null,invocation:null,revert:null,transaction:{to:e.to,from:e.from,data:""},receipt:e})},u=await this.provider.getTransactionReceipt(this.hash);if(0===n)return l(u);if(u){if(1===n||await u.confirmations()>=n)return l(u)}else if(await o(),0===n)return null;const c=new Promise(((e,t)=>{const s=[],u=()=>{s.forEach((e=>e()))};if(s.push((()=>{i=!0})),r>0){const e=setTimeout((()=>{u(),t(en("wait for transaction timeout","TIMEOUT"))}),r);s.push((()=>{clearTimeout(e)}))}const c=async r=>{if(await r.confirmations()>=n){u();try{e(l(r))}catch(e){t(e)}}};if(s.push((()=>{this.provider.off(this.hash,c)})),this.provider.on(this.hash,c),a>=0){const e=async()=>{try{await o()}catch(e){if($t(e,"TRANSACTION_REPLACED"))return u(),void t(e)}i||this.provider.once("block",e)};s.push((()=>{this.provider.off("block",e)})),this.provider.once("block",e)}}));return await c}isMined(){return null!=this.blockHash}isLegacy(){return 0===this.type}isBerlin(){return 1===this.type}isLondon(){return 2===this.type}isCancun(){return 3===this.type}removedEvent(){return tn(this.isMined(),"unmined transaction canot be orphaned","UNSUPPORTED_OPERATION",{operation:"removeEvent()"}),es(this)}reorderedEvent(e){return tn(this.isMined(),"unmined transaction canot be orphaned","UNSUPPORTED_OPERATION",{operation:"removeEvent()"}),tn(!e||e.isMined(),"unmined 'other' transaction canot be orphaned","UNSUPPORTED_OPERATION",{operation:"removeEvent()"}),Xa(this,e)}replaceableTransaction(e){nn(Number.isInteger(e)&&e>=0,"invalid startBlock","startBlock",e);const t=new $a(this,this.provider);return t.#R=e,t}}function Xa(e,t){return{orphan:"reorder-transaction",tx:e,other:t}}function es(e){return{orphan:"drop-transaction",tx:e}}function ts(e,t){if(e.provider)return e.provider;tn(!1,"missing provider","UNSUPPORTED_OPERATION",{operation:t})}async function ns(e,t){let n=Ja(t);if(null!=n.to&&(n.to=Cr(n.to,e)),null!=n.from){const t=n.from;n.from=Promise.all([e.getAddress(),Cr(t,e)]).then((([e,t])=>(nn(e.toLowerCase()===t.toLowerCase(),"transaction from mismatch","tx.from",t),e)))}else n.from=e.getAddress();return await qt(n)}class rs{provider;constructor(e){Yt(this,{provider:e||null})}async getNonce(e){return ts(this,"getTransactionCount").getTransactionCount(await this.getAddress(),e)}async populateCall(e){return await ns(this,e)}async populateTransaction(e){const t=ts(this,"populateTransaction"),n=await ns(this,e);null==n.nonce&&(n.nonce=await this.getNonce("pending")),null==n.gasLimit&&(n.gasLimit=await this.estimateGas(n));const r=await this.provider.getNetwork();null!=n.chainId?nn(Sn(n.chainId)===r.chainId,"transaction chainId mismatch","tx.chainId",e.chainId):n.chainId=r.chainId;const a=null!=n.maxFeePerGas||null!=n.maxPriorityFeePerGas;if(null==n.gasPrice||2!==n.type&&!a?0!==n.type&&1!==n.type||!a||nn(!1,"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas","tx",e):nn(!1,"eip-1559 transaction do not support gasPrice","tx",e),2!==n.type&&null!=n.type||null==n.maxFeePerGas||null==n.maxPriorityFeePerGas)if(0===n.type||1===n.type){const e=await t.getFeeData();tn(null!=e.gasPrice,"network does not support gasPrice","UNSUPPORTED_OPERATION",{operation:"getGasPrice"}),null==n.gasPrice&&(n.gasPrice=e.gasPrice)}else{const e=await t.getFeeData();if(null==n.type)if(null!=e.maxFeePerGas&&null!=e.maxPriorityFeePerGas)if(n.authorizationList&&n.authorizationList.length?n.type=4:n.type=2,null!=n.gasPrice){const e=n.gasPrice;delete n.gasPrice,n.maxFeePerGas=e,n.maxPriorityFeePerGas=e}else null==n.maxFeePerGas&&(n.maxFeePerGas=e.maxFeePerGas),null==n.maxPriorityFeePerGas&&(n.maxPriorityFeePerGas=e.maxPriorityFeePerGas);else null!=e.gasPrice?(tn(!a,"network does not support EIP-1559","UNSUPPORTED_OPERATION",{operation:"populateTransaction"}),null==n.gasPrice&&(n.gasPrice=e.gasPrice),n.type=0):tn(!1,"failed to get consistent fee data","UNSUPPORTED_OPERATION",{operation:"signer.getFeeData"});else 2!==n.type&&3!==n.type&&4!==n.type||(null==n.maxFeePerGas&&(n.maxFeePerGas=e.maxFeePerGas),null==n.maxPriorityFeePerGas&&(n.maxPriorityFeePerGas=e.maxPriorityFeePerGas))}else n.type=2;return await qt(n)}async populateAuthorization(e){const t=Object.assign({},e);return null==t.chainId&&(t.chainId=(await ts(this,"getNetwork").getNetwork()).chainId),null==t.nonce&&(t.nonce=await this.getNonce()),t}async estimateGas(e){return ts(this,"estimateGas").estimateGas(await this.populateCall(e))}async call(e){return ts(this,"call").call(await this.populateCall(e))}async resolveName(e){const t=ts(this,"resolveName");return await t.resolveName(e)}async sendTransaction(e){const t=ts(this,"sendTransaction"),n=await this.populateTransaction(e);delete n.from;const r=Ha.from(n);return await t.broadcastTransaction(await this.signTransaction(r))}authorize(e){tn(!1,"authorization not implemented for this signer","UNSUPPORTED_OPERATION",{operation:"authorize"})}}class as extends rs{address;constructor(e,t){super(t),Yt(this,{address:e})}async getAddress(){return this.address}connect(e){return new as(this.address,e)}#I(e,t){tn(!1,`VoidSigner cannot sign ${e}`,"UNSUPPORTED_OPERATION",{operation:t})}async signTransaction(e){this.#I("transactions","signTransaction")}async signMessage(e){this.#I("messages","signMessage")}async signTypedData(e,t,n){this.#I("typed-data","signTypedData")}}class ss extends rs{address;#T;constructor(e,t){super(t),nn(e&&"function"==typeof e.sign,"invalid private key","privateKey","[ REDACTED ]"),this.#T=e,Yt(this,{address:Na(this.signingKey.publicKey)})}get signingKey(){return this.#T}get privateKey(){return this.signingKey.privateKey}async getAddress(){return this.address}connect(e){return new ss(this.#T,e)}async signTransaction(e){e=Ja(e);const{to:t,from:n}=await qt({to:e.to?Cr(e.to,this):void 0,from:e.from?Cr(e.from,this):void 0});null!=t&&(e.to=t),null!=n&&(e.from=n),null!=e.from&&(nn(xr(e.from)===this.address,"transaction from address mismatch","tx.from",e.from),delete e.from);const r=Ha.from(e);return r.signature=this.signingKey.sign(r.unsignedHash),r.serialized}async signMessage(e){return this.signMessageSync(e)}signMessageSync(e){return this.signingKey.sign(function(e){return"string"==typeof e&&(e=Ir(e)),wr(gn([Ir("Ethereum Signed Message:\n"),Ir(String(e.length)),e]))}(e)).serialized}authorizeSync(e){nn("string"==typeof e.address,"invalid address for authorizeSync","auth.address",e);const t=this.signingKey.sign(function(e){return nn("string"==typeof e.address,"invalid address for hashAuthorization","auth.address",e),wr(gn(["0x05",Ur([null!=e.chainId?On(e.chainId):"0x",xr(e.address),null!=e.nonce?On(e.nonce):"0x"])]))}(e));return Object.assign({},{address:xr(e.address),nonce:Sn(e.nonce||0),chainId:Sn(e.chainId||0)},{signature:t})}async authorize(e){return e=Object.assign({},e,{address:await Cr(e.address,this)}),this.authorizeSync(await this.populateAuthorization(e))}async signTypedData(e,t,n){const r=await Zr.resolveNames(e,t,n,(async e=>{tn(null!=this.provider,"cannot resolve ENS names without a provider","UNSUPPORTED_OPERATION",{operation:"resolveName",info:{name:e}});const t=await this.provider.resolveName(e);return tn(null!=t,"unconfigured ENS name","UNCONFIGURED_NAME",{value:e}),t}));return this.signingKey.sign(Zr.hash(r.domain,t,r.value)).serialized}}let is=!1;const os=function(e,t,n){return function(e,t){const n={sha256:Ke,sha512:sa}[e];return nn(null!=n,"invalid hmac algorithm","algorithm",e),Pt.create(n,t)}(e,t).update(n).digest()};let ls=os;function us(e,t,n){const r=un(t,"key"),a=un(n,"data");return pn(ls(e,r,a))}us._=os,us.lock=function(){is=!0},us.register=function(e){if(is)throw new Error("computeHmac is locked");ls=e},Object.freeze(us);const cs=new Uint8Array([7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8]),ds=Uint8Array.from({length:16},((e,t)=>t));let fs=[ds],hs=[ds.map((e=>(9*e+5)%16))];for(let e=0;e<4;e++)for(let t of[fs,hs])t.push(t[e].map((e=>cs[e])));const ps=[[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8],[12,13,11,15,6,9,9,7,12,15,11,13,7,8,7,7],[13,15,14,11,7,7,6,8,13,14,13,12,5,5,6,9],[14,11,12,14,8,6,5,5,15,12,15,14,9,9,8,6],[15,12,13,13,9,5,8,6,14,11,12,11,8,6,5,5]].map((e=>new Uint8Array(e))),gs=fs.map(((e,t)=>e.map((e=>ps[t][e])))),ms=hs.map(((e,t)=>e.map((e=>ps[t][e])))),ys=new Uint32Array([0,1518500249,1859775393,2400959708,2840853838]),ws=new Uint32Array([1352829926,1548603684,1836072691,2053994217,0]),bs=(e,t)=>e<<t|e>>>32-t;function vs(e,t,n,r){return 0===e?t^n^r:1===e?t&n|~t&r:2===e?(t|~n)^r:3===e?t&r|n&~r:t^(n|~r)}const As=new Uint32Array(16);class Es extends je{constructor(){super(64,20,8,!0),this.h0=1732584193,this.h1=-271733879,this.h2=-1732584194,this.h3=271733878,this.h4=-1009589776}get(){const{h0:e,h1:t,h2:n,h3:r,h4:a}=this;return[e,t,n,r,a]}set(e,t,n,r,a){this.h0=0|e,this.h1=0|t,this.h2=0|n,this.h3=0|r,this.h4=0|a}process(e,t){for(let n=0;n<16;n++,t+=4)As[n]=e.getUint32(t,!0);let n=0|this.h0,r=n,a=0|this.h1,s=a,i=0|this.h2,o=i,l=0|this.h3,u=l,c=0|this.h4,d=c;for(let e=0;e<5;e++){const t=4-e,f=ys[e],h=ws[e],p=fs[e],g=hs[e],m=gs[e],y=ms[e];for(let t=0;t<16;t++){const r=bs(n+vs(e,a,i,l)+As[p[t]]+f,m[t])+c|0;n=c,c=l,l=0|bs(i,10),i=a,a=r}for(let e=0;e<16;e++){const n=bs(r+vs(t,s,o,u)+As[g[e]]+h,y[e])+d|0;r=d,d=u,u=0|bs(o,10),o=s,s=n}}this.set(this.h1+i+u|0,this.h2+l+d|0,this.h3+c+r|0,this.h4+n+s|0,this.h0+a+o|0)}roundClean(){As.fill(0)}destroy(){this.destroyed=!0,this.buffer.fill(0),this.set(0,0,0,0,0)}}const ks=De((()=>new Es));let xs=!1;const Ns=function(e){return ks(e)};let Ss=Ns;function Cs(e){const t=un(e,"data");return pn(Ss(t))}Cs._=Ns,Cs.lock=function(){xs=!0},Cs.register=function(e){if(xs)throw new TypeError("ripemd160 is locked");Ss=e},Object.freeze(Cs);let Ps=!1;const Rs=function(e){return new Uint8Array(function(e){tn(null!=oa,"platform does not support secure random numbers","UNSUPPORTED_OPERATION",{operation:"randomBytes"}),nn(Number.isInteger(e)&&e>0&&e<=1024,"invalid length","length",e);const t=new Uint8Array(e);return oa.getRandomValues(t),t}(e))};let Is=Rs;function Ts(e){return Is(e)}Ts._=Rs,Ts.lock=function(){Ps=!0},Ts.register=function(e){if(Ps)throw new Error("randomBytes is locked");Is=e},Object.freeze(Ts);const Os="123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";let Bs=null;function Ls(e){if(null==Bs){Bs={};for(let e=0;e<58;e++)Bs[Os[e]]=BigInt(e)}const t=Bs[e];return nn(null!=t,"invalid base58 value","letter",e),t}const Us=BigInt(0),Fs=BigInt(58);function Ds(e){const t=un(e);let n=Rn(t),r="";for(;n;)r=Os[Number(n%Fs)]+r,n/=Fs;for(let e=0;e<t.length&&!t[e];e++)r=Os[0]+r;return r}const Ms=/^[a-z]*$/i;function js(e,t){let n=97;return e.reduce(((e,r)=>(r===t?n++:r.match(Ms)?e.push(String.fromCharCode(n)+r):(n=97,e.push(r)),e)),[])}class zs{locale;constructor(e){Yt(this,{locale:e})}split(e){return e.toLowerCase().split(/\s+/g)}join(e){return e.join(" ")}}class _s extends zs{#d;#O;constructor(e,t,n){super(e),this.#d=t,this.#O=n,this.#B=null}get _data(){return this.#d}_decodeWords(){return nn("0"===(e=this.#d)[0],"unsupported auwl data","data",e),function(e,t){for(let n=28;n>=0;n--)e=e.split(" !#$%&'()*+,-./<=>?@[]^_`{|}~"[n]).join(t.substring(2*n,2*n+2));const n=[],r=e.replace(/(:|([0-9])|([A-Z][a-z]*))/g,((e,t,r,a)=>{if(r)for(let e=parseInt(r);e>=0;e--)n.push(";");else n.push(t.toLowerCase());return""}));if(r)throw new Error(`leftovers: ${JSON.stringify(r)}`);return js(js(n,";"),":")}(e.substring(59),e.substring(1,59));var e}#B;#L(){if(null==this.#B){const e=this._decodeWords();if(Fr(e.join("\n")+"\n")!==this.#O)throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);this.#B=e}return this.#B}getWord(e){const t=this.#L();return nn(e>=0&&e<t.length,`invalid word index: ${e}`,"index",e),t[e]}getWordIndex(e){return this.#L().indexOf(e)}}let Gs=null;class Hs extends _s{constructor(){super("en","0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO","0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60")}static wordlist(){return null==Gs&&(Gs=new Hs),Gs}}let Vs=!1;const Qs=function(e,t,n,r,a){return function(e,t,n,r,a){const s={sha256:Ke,sha512:sa}[a];return nn(null!=s,"invalid pbkdf2 algorithm","algorithm",a),Xr(s,e,t,{c:n,dkLen:r})}(e,t,n,r,a)};let Ks=Qs;function Ws(e,t,n,r,a){const s=un(e,"password"),i=un(t,"salt");return pn(Ks(s,i,n,r,a))}function Js(e){return(1<<e)-1<<8-e&255}function qs(e,t){sn("NFKD"),null==t&&(t=Hs.wordlist());const n=t.split(e);nn(n.length%3==0&&n.length>=12&&n.length<=24,"invalid mnemonic length","mnemonic","[ REDACTED ]");const r=new Uint8Array(Math.ceil(11*n.length/8));let a=0;for(let e=0;e<n.length;e++){let s=t.getWordIndex(n[e].normalize("NFKD"));nn(s>=0,`invalid mnemonic word at index ${e}`,"mnemonic","[ REDACTED ]");for(let e=0;e<11;e++)s&1<<10-e&&(r[a>>3]|=1<<7-a%8),a++}const s=32*n.length/3,i=Js(n.length/3);return nn((un(ga(r.slice(0,s/8)))[0]&i)===(r[r.length-1]&i),"invalid mnemonic checksum","mnemonic","[ REDACTED ]"),pn(r.slice(0,s/8))}function Ys(e,t){nn(e.length%4==0&&e.length>=16&&e.length<=32,"invalid entropy size","entropy","[ REDACTED ]"),null==t&&(t=Hs.wordlist());const n=[0];let r=11;for(let t=0;t<e.length;t++)r>8?(n[n.length-1]<<=8,n[n.length-1]|=e[t],r-=8):(n[n.length-1]<<=r,n[n.length-1]|=e[t]>>8-r,n.push(e[t]&(1<<8-r)-1&255),r+=3);const a=e.length/4,s=parseInt(ga(e).substring(2,4),16)&Js(a);return n[n.length-1]<<=a,n[n.length-1]|=s>>8-a,t.join(n.map((e=>t.getWord(e))))}Ws._=Qs,Ws.lock=function(){Vs=!0},Ws.register=function(e){if(Vs)throw new Error("pbkdf2 is locked");Ks=e},Object.freeze(Ws);const Zs={};class $s{phrase;password;wordlist;entropy;constructor(e,t,n,r,a){null==r&&(r=""),null==a&&(a=Hs.wordlist()),on(e,Zs,"Mnemonic"),Yt(this,{phrase:n,password:r,wordlist:a,entropy:t})}computeSeed(){const e=Ir("mnemonic"+this.password,"NFKD");return Ws(Ir(this.phrase,"NFKD"),e,2048,64,"sha512")}static fromPhrase(e,t,n){const r=qs(e,n);return e=Ys(un(r),n),new $s(Zs,r,e,t,n)}static fromEntropy(e,t,n){const r=un(e,"entropy"),a=Ys(r,n);return new $s(Zs,pn(r),a,t,n)}static entropyToPhrase(e,t){return Ys(un(e,"entropy"),t)}static phraseToEntropy(e,t){return qs(e,t)}static isValidMnemonic(e,t){try{return qs(e,t),!0}catch(e){}return!1}}var Xs,ei,ti,ni=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},ri=function(e,t,n,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!a:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(e,n):a?a.value=n:t.set(e,n),n};const ai={16:10,24:12,32:14},si=[1,2,4,8,16,32,64,128,27,54,108,216,171,77,154,47,94,188,99,198,151,53,106,212,179,125,250,239,197,145],ii=[99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22],oi=[82,9,106,213,48,54,165,56,191,64,163,158,129,243,215,251,124,227,57,130,155,47,255,135,52,142,67,68,196,222,233,203,84,123,148,50,166,194,35,61,238,76,149,11,66,250,195,78,8,46,161,102,40,217,36,178,118,91,162,73,109,139,209,37,114,248,246,100,134,104,152,22,212,164,92,204,93,101,182,146,108,112,72,80,253,237,185,218,94,21,70,87,167,141,157,132,144,216,171,0,140,188,211,10,247,228,88,5,184,179,69,6,208,44,30,143,202,63,15,2,193,175,189,3,1,19,138,107,58,145,17,65,79,103,220,234,151,242,207,206,240,180,230,115,150,172,116,34,231,173,53,133,226,249,55,232,28,117,223,110,71,241,26,113,29,41,197,137,111,183,98,14,170,24,190,27,252,86,62,75,198,210,121,32,154,219,192,254,120,205,90,244,31,221,168,51,136,7,199,49,177,18,16,89,39,128,236,95,96,81,127,169,25,181,74,13,45,229,122,159,147,201,156,239,160,224,59,77,174,42,245,176,200,235,187,60,131,83,153,97,23,43,4,126,186,119,214,38,225,105,20,99,85,33,12,125],li=[3328402341,4168907908,4000806809,4135287693,4294111757,3597364157,3731845041,2445657428,1613770832,33620227,3462883241,1445669757,3892248089,3050821474,1303096294,3967186586,2412431941,528646813,2311702848,4202528135,4026202645,2992200171,2387036105,4226871307,1101901292,3017069671,1604494077,1169141738,597466303,1403299063,3832705686,2613100635,1974974402,3791519004,1033081774,1277568618,1815492186,2118074177,4126668546,2211236943,1748251740,1369810420,3521504564,4193382664,3799085459,2883115123,1647391059,706024767,134480908,2512897874,1176707941,2646852446,806885416,932615841,168101135,798661301,235341577,605164086,461406363,3756188221,3454790438,1311188841,2142417613,3933566367,302582043,495158174,1479289972,874125870,907746093,3698224818,3025820398,1537253627,2756858614,1983593293,3084310113,2108928974,1378429307,3722699582,1580150641,327451799,2790478837,3117535592,0,3253595436,1075847264,3825007647,2041688520,3059440621,3563743934,2378943302,1740553945,1916352843,2487896798,2555137236,2958579944,2244988746,3151024235,3320835882,1336584933,3992714006,2252555205,2588757463,1714631509,293963156,2319795663,3925473552,67240454,4269768577,2689618160,2017213508,631218106,1269344483,2723238387,1571005438,2151694528,93294474,1066570413,563977660,1882732616,4059428100,1673313503,2008463041,2950355573,1109467491,537923632,3858759450,4260623118,3218264685,2177748300,403442708,638784309,3287084079,3193921505,899127202,2286175436,773265209,2479146071,1437050866,4236148354,2050833735,3362022572,3126681063,840505643,3866325909,3227541664,427917720,2655997905,2749160575,1143087718,1412049534,999329963,193497219,2353415882,3354324521,1807268051,672404540,2816401017,3160301282,369822493,2916866934,3688947771,1681011286,1949973070,336202270,2454276571,201721354,1210328172,3093060836,2680341085,3184776046,1135389935,3294782118,965841320,831886756,3554993207,4068047243,3588745010,2345191491,1849112409,3664604599,26054028,2983581028,2622377682,1235855840,3630984372,2891339514,4092916743,3488279077,3395642799,4101667470,1202630377,268961816,1874508501,4034427016,1243948399,1546530418,941366308,1470539505,1941222599,2546386513,3421038627,2715671932,3899946140,1042226977,2521517021,1639824860,227249030,260737669,3765465232,2084453954,1907733956,3429263018,2420656344,100860677,4160157185,470683154,3261161891,1781871967,2924959737,1773779408,394692241,2579611992,974986535,664706745,3655459128,3958962195,731420851,571543859,3530123707,2849626480,126783113,865375399,765172662,1008606754,361203602,3387549984,2278477385,2857719295,1344809080,2782912378,59542671,1503764984,160008576,437062935,1707065306,3622233649,2218934982,3496503480,2185314755,697932208,1512910199,504303377,2075177163,2824099068,1841019862,739644986],ui=[2781242211,2230877308,2582542199,2381740923,234877682,3184946027,2984144751,1418839493,1348481072,50462977,2848876391,2102799147,434634494,1656084439,3863849899,2599188086,1167051466,2636087938,1082771913,2281340285,368048890,3954334041,3381544775,201060592,3963727277,1739838676,4250903202,3930435503,3206782108,4149453988,2531553906,1536934080,3262494647,484572669,2923271059,1783375398,1517041206,1098792767,49674231,1334037708,1550332980,4098991525,886171109,150598129,2481090929,1940642008,1398944049,1059722517,201851908,1385547719,1699095331,1587397571,674240536,2704774806,252314885,3039795866,151914247,908333586,2602270848,1038082786,651029483,1766729511,3447698098,2682942837,454166793,2652734339,1951935532,775166490,758520603,3000790638,4004797018,4217086112,4137964114,1299594043,1639438038,3464344499,2068982057,1054729187,1901997871,2534638724,4121318227,1757008337,0,750906861,1614815264,535035132,3363418545,3988151131,3201591914,1183697867,3647454910,1265776953,3734260298,3566750796,3903871064,1250283471,1807470800,717615087,3847203498,384695291,3313910595,3617213773,1432761139,2484176261,3481945413,283769337,100925954,2180939647,4037038160,1148730428,3123027871,3813386408,4087501137,4267549603,3229630528,2315620239,2906624658,3156319645,1215313976,82966005,3747855548,3245848246,1974459098,1665278241,807407632,451280895,251524083,1841287890,1283575245,337120268,891687699,801369324,3787349855,2721421207,3431482436,959321879,1469301956,4065699751,2197585534,1199193405,2898814052,3887750493,724703513,2514908019,2696962144,2551808385,3516813135,2141445340,1715741218,2119445034,2872807568,2198571144,3398190662,700968686,3547052216,1009259540,2041044702,3803995742,487983883,1991105499,1004265696,1449407026,1316239930,504629770,3683797321,168560134,1816667172,3837287516,1570751170,1857934291,4014189740,2797888098,2822345105,2754712981,936633572,2347923833,852879335,1133234376,1500395319,3084545389,2348912013,1689376213,3533459022,3762923945,3034082412,4205598294,133428468,634383082,2949277029,2398386810,3913789102,403703816,3580869306,2297460856,1867130149,1918643758,607656988,4049053350,3346248884,1368901318,600565992,2090982877,2632479860,557719327,3717614411,3697393085,2249034635,2232388234,2430627952,1115438654,3295786421,2865522278,3633334344,84280067,33027830,303828494,2747425121,1600795957,4188952407,3496589753,2434238086,1486471617,658119965,3106381470,953803233,334231800,3005978776,857870609,3151128937,1890179545,2298973838,2805175444,3056442267,574365214,2450884487,550103529,1233637070,4289353045,2018519080,2057691103,2399374476,4166623649,2148108681,387583245,3664101311,836232934,3330556482,3100665960,3280093505,2955516313,2002398509,287182607,3413881008,4238890068,3597515707,975967766],ci=[1671808611,2089089148,2006576759,2072901243,4061003762,1807603307,1873927791,3310653893,810573872,16974337,1739181671,729634347,4263110654,3613570519,2883997099,1989864566,3393556426,2191335298,3376449993,2106063485,4195741690,1508618841,1204391495,4027317232,2917941677,3563566036,2734514082,2951366063,2629772188,2767672228,1922491506,3227229120,3082974647,4246528509,2477669779,644500518,911895606,1061256767,4144166391,3427763148,878471220,2784252325,3845444069,4043897329,1905517169,3631459288,827548209,356461077,67897348,3344078279,593839651,3277757891,405286936,2527147926,84871685,2595565466,118033927,305538066,2157648768,3795705826,3945188843,661212711,2999812018,1973414517,152769033,2208177539,745822252,439235610,455947803,1857215598,1525593178,2700827552,1391895634,994932283,3596728278,3016654259,695947817,3812548067,795958831,2224493444,1408607827,3513301457,0,3979133421,543178784,4229948412,2982705585,1542305371,1790891114,3410398667,3201918910,961245753,1256100938,1289001036,1491644504,3477767631,3496721360,4012557807,2867154858,4212583931,1137018435,1305975373,861234739,2241073541,1171229253,4178635257,33948674,2139225727,1357946960,1011120188,2679776671,2833468328,1374921297,2751356323,1086357568,2408187279,2460827538,2646352285,944271416,4110742005,3168756668,3066132406,3665145818,560153121,271589392,4279952895,4077846003,3530407890,3444343245,202643468,322250259,3962553324,1608629855,2543990167,1154254916,389623319,3294073796,2817676711,2122513534,1028094525,1689045092,1575467613,422261273,1939203699,1621147744,2174228865,1339137615,3699352540,577127458,712922154,2427141008,2290289544,1187679302,3995715566,3100863416,339486740,3732514782,1591917662,186455563,3681988059,3762019296,844522546,978220090,169743370,1239126601,101321734,611076132,1558493276,3260915650,3547250131,2901361580,1655096418,2443721105,2510565781,3828863972,2039214713,3878868455,3359869896,928607799,1840765549,2374762893,3580146133,1322425422,2850048425,1823791212,1459268694,4094161908,3928346602,1706019429,2056189050,2934523822,135794696,3134549946,2022240376,628050469,779246638,472135708,2800834470,3032970164,3327236038,3894660072,3715932637,1956440180,522272287,1272813131,3185336765,2340818315,2323976074,1888542832,1044544574,3049550261,1722469478,1222152264,50660867,4127324150,236067854,1638122081,895445557,1475980887,3117443513,2257655686,3243809217,489110045,2662934430,3778599393,4162055160,2561878936,288563729,1773916777,3648039385,2391345038,2493985684,2612407707,505560094,2274497927,3911240169,3460925390,1442818645,678973480,3749357023,2358182796,2717407649,2306869641,219617805,3218761151,3862026214,1120306242,1756942440,1103331905,2578459033,762796589,252780047,2966125488,1425844308,3151392187,372911126],di=[1667474886,2088535288,2004326894,2071694838,4075949567,1802223062,1869591006,3318043793,808472672,16843522,1734846926,724270422,4278065639,3621216949,2880169549,1987484396,3402253711,2189597983,3385409673,2105378810,4210693615,1499065266,1195886990,4042263547,2913856577,3570689971,2728590687,2947541573,2627518243,2762274643,1920112356,3233831835,3082273397,4261223649,2475929149,640051788,909531756,1061110142,4160160501,3435941763,875846760,2779116625,3857003729,4059105529,1903268834,3638064043,825316194,353713962,67374088,3351728789,589522246,3284360861,404236336,2526454071,84217610,2593830191,117901582,303183396,2155911963,3806477791,3958056653,656894286,2998062463,1970642922,151591698,2206440989,741110872,437923380,454765878,1852748508,1515908788,2694904667,1381168804,993742198,3604373943,3014905469,690584402,3823320797,791638366,2223281939,1398011302,3520161977,0,3991743681,538992704,4244381667,2981218425,1532751286,1785380564,3419096717,3200178535,960056178,1246420628,1280103576,1482221744,3486468741,3503319995,4025428677,2863326543,4227536621,1128514950,1296947098,859002214,2240123921,1162203018,4193849577,33687044,2139062782,1347481760,1010582648,2678045221,2829640523,1364325282,2745433693,1077985408,2408548869,2459086143,2644360225,943212656,4126475505,3166494563,3065430391,3671750063,555836226,269496352,4294908645,4092792573,3537006015,3452783745,202118168,320025894,3974901699,1600119230,2543297077,1145359496,387397934,3301201811,2812801621,2122220284,1027426170,1684319432,1566435258,421079858,1936954854,1616945344,2172753945,1330631070,3705438115,572679748,707427924,2425400123,2290647819,1179044492,4008585671,3099120491,336870440,3739122087,1583276732,185277718,3688593069,3772791771,842159716,976899700,168435220,1229577106,101059084,606366792,1549591736,3267517855,3553849021,2897014595,1650632388,2442242105,2509612081,3840161747,2038008818,3890688725,3368567691,926374254,1835907034,2374863873,3587531953,1313788572,2846482505,1819063512,1448540844,4109633523,3941213647,1701162954,2054852340,2930698567,134748176,3132806511,2021165296,623210314,774795868,471606328,2795958615,3031746419,3334885783,3907527627,3722280097,1953799400,522133822,1263263126,3183336545,2341176845,2324333839,1886425312,1044267644,3048588401,1718004428,1212733584,50529542,4143317495,235803164,1633788866,892690282,1465383342,3115962473,2256965911,3250673817,488449850,2661202215,3789633753,4177007595,2560144171,286339874,1768537042,3654906025,2391705863,2492770099,2610673197,505291324,2273808917,3924369609,3469625735,1431699370,673740880,3755965093,2358021891,2711746649,2307489801,218961690,3217021541,3873845719,1111672452,1751693520,1094828930,2576986153,757954394,252645662,2964376443,1414855848,3149649517,370555436],fi=[1374988112,2118214995,437757123,975658646,1001089995,530400753,2902087851,1273168787,540080725,2910219766,2295101073,4110568485,1340463100,3307916247,641025152,3043140495,3736164937,632953703,1172967064,1576976609,3274667266,2169303058,2370213795,1809054150,59727847,361929877,3211623147,2505202138,3569255213,1484005843,1239443753,2395588676,1975683434,4102977912,2572697195,666464733,3202437046,4035489047,3374361702,2110667444,1675577880,3843699074,2538681184,1649639237,2976151520,3144396420,4269907996,4178062228,1883793496,2403728665,2497604743,1383856311,2876494627,1917518562,3810496343,1716890410,3001755655,800440835,2261089178,3543599269,807962610,599762354,33778362,3977675356,2328828971,2809771154,4077384432,1315562145,1708848333,101039829,3509871135,3299278474,875451293,2733856160,92987698,2767645557,193195065,1080094634,1584504582,3178106961,1042385657,2531067453,3711829422,1306967366,2438237621,1908694277,67556463,1615861247,429456164,3602770327,2302690252,1742315127,2968011453,126454664,3877198648,2043211483,2709260871,2084704233,4169408201,0,159417987,841739592,504459436,1817866830,4245618683,260388950,1034867998,908933415,168810852,1750902305,2606453969,607530554,202008497,2472011535,3035535058,463180190,2160117071,1641816226,1517767529,470948374,3801332234,3231722213,1008918595,303765277,235474187,4069246893,766945465,337553864,1475418501,2943682380,4003061179,2743034109,4144047775,1551037884,1147550661,1543208500,2336434550,3408119516,3069049960,3102011747,3610369226,1113818384,328671808,2227573024,2236228733,3535486456,2935566865,3341394285,496906059,3702665459,226906860,2009195472,733156972,2842737049,294930682,1206477858,2835123396,2700099354,1451044056,573804783,2269728455,3644379585,2362090238,2564033334,2801107407,2776292904,3669462566,1068351396,742039012,1350078989,1784663195,1417561698,4136440770,2430122216,775550814,2193862645,2673705150,1775276924,1876241833,3475313331,3366754619,270040487,3902563182,3678124923,3441850377,1851332852,3969562369,2203032232,3868552805,2868897406,566021896,4011190502,3135740889,1248802510,3936291284,699432150,832877231,708780849,3332740144,899835584,1951317047,4236429990,3767586992,866637845,4043610186,1106041591,2144161806,395441711,1984812685,1139781709,3433712980,3835036895,2664543715,1282050075,3240894392,1181045119,2640243204,25965917,4203181171,4211818798,3009879386,2463879762,3910161971,1842759443,2597806476,933301370,1509430414,3943906441,3467192302,3076639029,3776767469,2051518780,2631065433,1441952575,404016761,1942435775,1408749034,1610459739,3745345300,2017778566,3400528769,3110650942,941896748,3265478751,371049330,3168937228,675039627,4279080257,967311729,135050206,3635733660,1683407248,2076935265,3576870512,1215061108,3501741890],hi=[1347548327,1400783205,3273267108,2520393566,3409685355,4045380933,2880240216,2471224067,1428173050,4138563181,2441661558,636813900,4233094615,3620022987,2149987652,2411029155,1239331162,1730525723,2554718734,3781033664,46346101,310463728,2743944855,3328955385,3875770207,2501218972,3955191162,3667219033,768917123,3545789473,692707433,1150208456,1786102409,2029293177,1805211710,3710368113,3065962831,401639597,1724457132,3028143674,409198410,2196052529,1620529459,1164071807,3769721975,2226875310,486441376,2499348523,1483753576,428819965,2274680428,3075636216,598438867,3799141122,1474502543,711349675,129166120,53458370,2592523643,2782082824,4063242375,2988687269,3120694122,1559041666,730517276,2460449204,4042459122,2706270690,3446004468,3573941694,533804130,2328143614,2637442643,2695033685,839224033,1973745387,957055980,2856345839,106852767,1371368976,4181598602,1033297158,2933734917,1179510461,3046200461,91341917,1862534868,4284502037,605657339,2547432937,3431546947,2003294622,3182487618,2282195339,954669403,3682191598,1201765386,3917234703,3388507166,0,2198438022,1211247597,2887651696,1315723890,4227665663,1443857720,507358933,657861945,1678381017,560487590,3516619604,975451694,2970356327,261314535,3535072918,2652609425,1333838021,2724322336,1767536459,370938394,182621114,3854606378,1128014560,487725847,185469197,2918353863,3106780840,3356761769,2237133081,1286567175,3152976349,4255350624,2683765030,3160175349,3309594171,878443390,1988838185,3704300486,1756818940,1673061617,3403100636,272786309,1075025698,545572369,2105887268,4174560061,296679730,1841768865,1260232239,4091327024,3960309330,3497509347,1814803222,2578018489,4195456072,575138148,3299409036,446754879,3629546796,4011996048,3347532110,3252238545,4270639778,915985419,3483825537,681933534,651868046,2755636671,3828103837,223377554,2607439820,1649704518,3270937875,3901806776,1580087799,4118987695,3198115200,2087309459,2842678573,3016697106,1003007129,2802849917,1860738147,2077965243,164439672,4100872472,32283319,2827177882,1709610350,2125135846,136428751,3874428392,3652904859,3460984630,3572145929,3593056380,2939266226,824852259,818324884,3224740454,930369212,2801566410,2967507152,355706840,1257309336,4148292826,243256656,790073846,2373340630,1296297904,1422699085,3756299780,3818836405,457992840,3099667487,2135319889,77422314,1560382517,1945798516,788204353,1521706781,1385356242,870912086,325965383,2358957921,2050466060,2388260884,2313884476,4006521127,901210569,3990953189,1014646705,1503449823,1062597235,2031621326,3212035895,3931371469,1533017514,350174575,2256028891,2177544179,1052338372,741876788,1606591296,1914052035,213705253,2334669897,1107234197,1899603969,3725069491,2631447780,2422494913,1635502980,1893020342,1950903388,1120974935],pi=[2807058932,1699970625,2764249623,1586903591,1808481195,1173430173,1487645946,59984867,4199882800,1844882806,1989249228,1277555970,3623636965,3419915562,1149249077,2744104290,1514790577,459744698,244860394,3235995134,1963115311,4027744588,2544078150,4190530515,1608975247,2627016082,2062270317,1507497298,2200818878,567498868,1764313568,3359936201,2305455554,2037970062,1047239e3,1910319033,1337376481,2904027272,2892417312,984907214,1243112415,830661914,861968209,2135253587,2011214180,2927934315,2686254721,731183368,1750626376,4246310725,1820824798,4172763771,3542330227,48394827,2404901663,2871682645,671593195,3254988725,2073724613,145085239,2280796200,2779915199,1790575107,2187128086,472615631,3029510009,4075877127,3802222185,4107101658,3201631749,1646252340,4270507174,1402811438,1436590835,3778151818,3950355702,3963161475,4020912224,2667994737,273792366,2331590177,104699613,95345982,3175501286,2377486676,1560637892,3564045318,369057872,4213447064,3919042237,1137477952,2658625497,1119727848,2340947849,1530455833,4007360968,172466556,266959938,516552836,0,2256734592,3980931627,1890328081,1917742170,4294704398,945164165,3575528878,958871085,3647212047,2787207260,1423022939,775562294,1739656202,3876557655,2530391278,2443058075,3310321856,547512796,1265195639,437656594,3121275539,719700128,3762502690,387781147,218828297,3350065803,2830708150,2848461854,428169201,122466165,3720081049,1627235199,648017665,4122762354,1002783846,2117360635,695634755,3336358691,4234721005,4049844452,3704280881,2232435299,574624663,287343814,612205898,1039717051,840019705,2708326185,793451934,821288114,1391201670,3822090177,376187827,3113855344,1224348052,1679968233,2361698556,1058709744,752375421,2431590963,1321699145,3519142200,2734591178,188127444,2177869557,3727205754,2384911031,3215212461,2648976442,2450346104,3432737375,1180849278,331544205,3102249176,4150144569,2952102595,2159976285,2474404304,766078933,313773861,2570832044,2108100632,1668212892,3145456443,2013908262,418672217,3070356634,2594734927,1852171925,3867060991,3473416636,3907448597,2614737639,919489135,164948639,2094410160,2997825956,590424639,2486224549,1723872674,3157750862,3399941250,3501252752,3625268135,2555048196,3673637356,1343127501,4130281361,3599595085,2957853679,1297403050,81781910,3051593425,2283490410,532201772,1367295589,3926170974,895287692,1953757831,1093597963,492483431,3528626907,1446242576,1192455638,1636604631,209336225,344873464,1015671571,669961897,3375740769,3857572124,2973530695,3747192018,1933530610,3464042516,935293895,3454686199,2858115069,1863638845,3683022916,4085369519,3292445032,875313188,1080017571,3279033885,621591778,1233856572,2504130317,24197544,3017672716,3835484340,3247465558,2220981195,3060847922,1551124588,1463996600],gi=[4104605777,1097159550,396673818,660510266,2875968315,2638606623,4200115116,3808662347,821712160,1986918061,3430322568,38544885,3856137295,718002117,893681702,1654886325,2975484382,3122358053,3926825029,4274053469,796197571,1290801793,1184342925,3556361835,2405426947,2459735317,1836772287,1381620373,3196267988,1948373848,3764988233,3385345166,3263785589,2390325492,1480485785,3111247143,3780097726,2293045232,548169417,3459953789,3746175075,439452389,1362321559,1400849762,1685577905,1806599355,2174754046,137073913,1214797936,1174215055,3731654548,2079897426,1943217067,1258480242,529487843,1437280870,3945269170,3049390895,3313212038,923313619,679998e3,3215307299,57326082,377642221,3474729866,2041877159,133361907,1776460110,3673476453,96392454,878845905,2801699524,777231668,4082475170,2330014213,4142626212,2213296395,1626319424,1906247262,1846563261,562755902,3708173718,1040559837,3871163981,1418573201,3294430577,114585348,1343618912,2566595609,3186202582,1078185097,3651041127,3896688048,2307622919,425408743,3371096953,2081048481,1108339068,2216610296,0,2156299017,736970802,292596766,1517440620,251657213,2235061775,2933202493,758720310,265905162,1554391400,1532285339,908999204,174567692,1474760595,4002861748,2610011675,3234156416,3693126241,2001430874,303699484,2478443234,2687165888,585122620,454499602,151849742,2345119218,3064510765,514443284,4044981591,1963412655,2581445614,2137062819,19308535,1928707164,1715193156,4219352155,1126790795,600235211,3992742070,3841024952,836553431,1669664834,2535604243,3323011204,1243905413,3141400786,4180808110,698445255,2653899549,2989552604,2253581325,3252932727,3004591147,1891211689,2487810577,3915653703,4237083816,4030667424,2100090966,865136418,1229899655,953270745,3399679628,3557504664,4118925222,2061379749,3079546586,2915017791,983426092,2022837584,1607244650,2118541908,2366882550,3635996816,972512814,3283088770,1568718495,3499326569,3576539503,621982671,2895723464,410887952,2623762152,1002142683,645401037,1494807662,2595684844,1335535747,2507040230,4293295786,3167684641,367585007,3885750714,1865862730,2668221674,2960971305,2763173681,1059270954,2777952454,2724642869,1320957812,2194319100,2429595872,2815956275,77089521,3973773121,3444575871,2448830231,1305906550,4021308739,2857194700,2516901860,3518358430,1787304780,740276417,1699839814,1592394909,2352307457,2272556026,188821243,1729977011,3687994002,274084841,3594982253,3613494426,2701949495,4162096729,322734571,2837966542,1640576439,484830689,1202797690,3537852828,4067639125,349075736,3342319475,4157467219,4255800159,1030690015,1155237496,2951971274,1757691577,607398968,2738905026,499347990,3794078908,1011452712,227885567,2818666809,213114376,3034881240,1455525988,3414450555,850817237,1817998408,3092726480],mi=[0,235474187,470948374,303765277,941896748,908933415,607530554,708780849,1883793496,2118214995,1817866830,1649639237,1215061108,1181045119,1417561698,1517767529,3767586992,4003061179,4236429990,4069246893,3635733660,3602770327,3299278474,3400528769,2430122216,2664543715,2362090238,2193862645,2835123396,2801107407,3035535058,3135740889,3678124923,3576870512,3341394285,3374361702,3810496343,3977675356,4279080257,4043610186,2876494627,2776292904,3076639029,3110650942,2472011535,2640243204,2403728665,2169303058,1001089995,899835584,666464733,699432150,59727847,226906860,530400753,294930682,1273168787,1172967064,1475418501,1509430414,1942435775,2110667444,1876241833,1641816226,2910219766,2743034109,2976151520,3211623147,2505202138,2606453969,2302690252,2269728455,3711829422,3543599269,3240894392,3475313331,3843699074,3943906441,4178062228,4144047775,1306967366,1139781709,1374988112,1610459739,1975683434,2076935265,1775276924,1742315127,1034867998,866637845,566021896,800440835,92987698,193195065,429456164,395441711,1984812685,2017778566,1784663195,1683407248,1315562145,1080094634,1383856311,1551037884,101039829,135050206,437757123,337553864,1042385657,807962610,573804783,742039012,2531067453,2564033334,2328828971,2227573024,2935566865,2700099354,3001755655,3168937228,3868552805,3902563182,4203181171,4102977912,3736164937,3501741890,3265478751,3433712980,1106041591,1340463100,1576976609,1408749034,2043211483,2009195472,1708848333,1809054150,832877231,1068351396,766945465,599762354,159417987,126454664,361929877,463180190,2709260871,2943682380,3178106961,3009879386,2572697195,2538681184,2236228733,2336434550,3509871135,3745345300,3441850377,3274667266,3910161971,3877198648,4110568485,4211818798,2597806476,2497604743,2261089178,2295101073,2733856160,2902087851,3202437046,2968011453,3936291284,3835036895,4136440770,4169408201,3535486456,3702665459,3467192302,3231722213,2051518780,1951317047,1716890410,1750902305,1113818384,1282050075,1584504582,1350078989,168810852,67556463,371049330,404016761,841739592,1008918595,775550814,540080725,3969562369,3801332234,4035489047,4269907996,3569255213,3669462566,3366754619,3332740144,2631065433,2463879762,2160117071,2395588676,2767645557,2868897406,3102011747,3069049960,202008497,33778362,270040487,504459436,875451293,975658646,675039627,641025152,2084704233,1917518562,1615861247,1851332852,1147550661,1248802510,1484005843,1451044056,933301370,967311729,733156972,632953703,260388950,25965917,328671808,496906059,1206477858,1239443753,1543208500,1441952575,2144161806,1908694277,1675577880,1842759443,3610369226,3644379585,3408119516,3307916247,4011190502,3776767469,4077384432,4245618683,2809771154,2842737049,3144396420,3043140495,2673705150,2438237621,2203032232,2370213795],yi=[0,185469197,370938394,487725847,741876788,657861945,975451694,824852259,1483753576,1400783205,1315723890,1164071807,1950903388,2135319889,1649704518,1767536459,2967507152,3152976349,2801566410,2918353863,2631447780,2547432937,2328143614,2177544179,3901806776,3818836405,4270639778,4118987695,3299409036,3483825537,3535072918,3652904859,2077965243,1893020342,1841768865,1724457132,1474502543,1559041666,1107234197,1257309336,598438867,681933534,901210569,1052338372,261314535,77422314,428819965,310463728,3409685355,3224740454,3710368113,3593056380,3875770207,3960309330,4045380933,4195456072,2471224067,2554718734,2237133081,2388260884,3212035895,3028143674,2842678573,2724322336,4138563181,4255350624,3769721975,3955191162,3667219033,3516619604,3431546947,3347532110,2933734917,2782082824,3099667487,3016697106,2196052529,2313884476,2499348523,2683765030,1179510461,1296297904,1347548327,1533017514,1786102409,1635502980,2087309459,2003294622,507358933,355706840,136428751,53458370,839224033,957055980,605657339,790073846,2373340630,2256028891,2607439820,2422494913,2706270690,2856345839,3075636216,3160175349,3573941694,3725069491,3273267108,3356761769,4181598602,4063242375,4011996048,3828103837,1033297158,915985419,730517276,545572369,296679730,446754879,129166120,213705253,1709610350,1860738147,1945798516,2029293177,1239331162,1120974935,1606591296,1422699085,4148292826,4233094615,3781033664,3931371469,3682191598,3497509347,3446004468,3328955385,2939266226,2755636671,3106780840,2988687269,2198438022,2282195339,2501218972,2652609425,1201765386,1286567175,1371368976,1521706781,1805211710,1620529459,2105887268,1988838185,533804130,350174575,164439672,46346101,870912086,954669403,636813900,788204353,2358957921,2274680428,2592523643,2441661558,2695033685,2880240216,3065962831,3182487618,3572145929,3756299780,3270937875,3388507166,4174560061,4091327024,4006521127,3854606378,1014646705,930369212,711349675,560487590,272786309,457992840,106852767,223377554,1678381017,1862534868,1914052035,2031621326,1211247597,1128014560,1580087799,1428173050,32283319,182621114,401639597,486441376,768917123,651868046,1003007129,818324884,1503449823,1385356242,1333838021,1150208456,1973745387,2125135846,1673061617,1756818940,2970356327,3120694122,2802849917,2887651696,2637442643,2520393566,2334669897,2149987652,3917234703,3799141122,4284502037,4100872472,3309594171,3460984630,3545789473,3629546796,2050466060,1899603969,1814803222,1730525723,1443857720,1560382517,1075025698,1260232239,575138148,692707433,878443390,1062597235,243256656,91341917,409198410,325965383,3403100636,3252238545,3704300486,3620022987,3874428392,3990953189,4042459122,4227665663,2460449204,2578018489,2226875310,2411029155,3198115200,3046200461,2827177882,2743944855],wi=[0,218828297,437656594,387781147,875313188,958871085,775562294,590424639,1750626376,1699970625,1917742170,2135253587,1551124588,1367295589,1180849278,1265195639,3501252752,3720081049,3399941250,3350065803,3835484340,3919042237,4270507174,4085369519,3102249176,3051593425,2734591178,2952102595,2361698556,2177869557,2530391278,2614737639,3145456443,3060847922,2708326185,2892417312,2404901663,2187128086,2504130317,2555048196,3542330227,3727205754,3375740769,3292445032,3876557655,3926170974,4246310725,4027744588,1808481195,1723872674,1910319033,2094410160,1608975247,1391201670,1173430173,1224348052,59984867,244860394,428169201,344873464,935293895,984907214,766078933,547512796,1844882806,1627235199,2011214180,2062270317,1507497298,1423022939,1137477952,1321699145,95345982,145085239,532201772,313773861,830661914,1015671571,731183368,648017665,3175501286,2957853679,2807058932,2858115069,2305455554,2220981195,2474404304,2658625497,3575528878,3625268135,3473416636,3254988725,3778151818,3963161475,4213447064,4130281361,3599595085,3683022916,3432737375,3247465558,3802222185,4020912224,4172763771,4122762354,3201631749,3017672716,2764249623,2848461854,2331590177,2280796200,2431590963,2648976442,104699613,188127444,472615631,287343814,840019705,1058709744,671593195,621591778,1852171925,1668212892,1953757831,2037970062,1514790577,1463996600,1080017571,1297403050,3673637356,3623636965,3235995134,3454686199,4007360968,3822090177,4107101658,4190530515,2997825956,3215212461,2830708150,2779915199,2256734592,2340947849,2627016082,2443058075,172466556,122466165,273792366,492483431,1047239e3,861968209,612205898,695634755,1646252340,1863638845,2013908262,1963115311,1446242576,1530455833,1277555970,1093597963,1636604631,1820824798,2073724613,1989249228,1436590835,1487645946,1337376481,1119727848,164948639,81781910,331544205,516552836,1039717051,821288114,669961897,719700128,2973530695,3157750862,2871682645,2787207260,2232435299,2283490410,2667994737,2450346104,3647212047,3564045318,3279033885,3464042516,3980931627,3762502690,4150144569,4199882800,3070356634,3121275539,2904027272,2686254721,2200818878,2384911031,2570832044,2486224549,3747192018,3528626907,3310321856,3359936201,3950355702,3867060991,4049844452,4234721005,1739656202,1790575107,2108100632,1890328081,1402811438,1586903591,1233856572,1149249077,266959938,48394827,369057872,418672217,1002783846,919489135,567498868,752375421,209336225,24197544,376187827,459744698,945164165,895287692,574624663,793451934,1679968233,1764313568,2117360635,1933530610,1343127501,1560637892,1243112415,1192455638,3704280881,3519142200,3336358691,3419915562,3907448597,3857572124,4075877127,4294704398,3029510009,3113855344,2927934315,2744104290,2159976285,2377486676,2594734927,2544078150],bi=[0,151849742,303699484,454499602,607398968,758720310,908999204,1059270954,1214797936,1097159550,1517440620,1400849762,1817998408,1699839814,2118541908,2001430874,2429595872,2581445614,2194319100,2345119218,3034881240,3186202582,2801699524,2951971274,3635996816,3518358430,3399679628,3283088770,4237083816,4118925222,4002861748,3885750714,1002142683,850817237,698445255,548169417,529487843,377642221,227885567,77089521,1943217067,2061379749,1640576439,1757691577,1474760595,1592394909,1174215055,1290801793,2875968315,2724642869,3111247143,2960971305,2405426947,2253581325,2638606623,2487810577,3808662347,3926825029,4044981591,4162096729,3342319475,3459953789,3576539503,3693126241,1986918061,2137062819,1685577905,1836772287,1381620373,1532285339,1078185097,1229899655,1040559837,923313619,740276417,621982671,439452389,322734571,137073913,19308535,3871163981,4021308739,4104605777,4255800159,3263785589,3414450555,3499326569,3651041127,2933202493,2815956275,3167684641,3049390895,2330014213,2213296395,2566595609,2448830231,1305906550,1155237496,1607244650,1455525988,1776460110,1626319424,2079897426,1928707164,96392454,213114376,396673818,514443284,562755902,679998e3,865136418,983426092,3708173718,3557504664,3474729866,3323011204,4180808110,4030667424,3945269170,3794078908,2507040230,2623762152,2272556026,2390325492,2975484382,3092726480,2738905026,2857194700,3973773121,3856137295,4274053469,4157467219,3371096953,3252932727,3673476453,3556361835,2763173681,2915017791,3064510765,3215307299,2156299017,2307622919,2459735317,2610011675,2081048481,1963412655,1846563261,1729977011,1480485785,1362321559,1243905413,1126790795,878845905,1030690015,645401037,796197571,274084841,425408743,38544885,188821243,3613494426,3731654548,3313212038,3430322568,4082475170,4200115116,3780097726,3896688048,2668221674,2516901860,2366882550,2216610296,3141400786,2989552604,2837966542,2687165888,1202797690,1320957812,1437280870,1554391400,1669664834,1787304780,1906247262,2022837584,265905162,114585348,499347990,349075736,736970802,585122620,972512814,821712160,2595684844,2478443234,2293045232,2174754046,3196267988,3079546586,2895723464,2777952454,3537852828,3687994002,3234156416,3385345166,4142626212,4293295786,3841024952,3992742070,174567692,57326082,410887952,292596766,777231668,660510266,1011452712,893681702,1108339068,1258480242,1343618912,1494807662,1715193156,1865862730,1948373848,2100090966,2701949495,2818666809,3004591147,3122358053,2235061775,2352307457,2535604243,2653899549,3915653703,3764988233,4219352155,4067639125,3444575871,3294430577,3746175075,3594982253,836553431,953270745,600235211,718002117,367585007,484830689,133361907,251657213,2041877159,1891211689,1806599355,1654886325,1568718495,1418573201,1335535747,1184342925];function vi(e){const t=[];for(let n=0;n<e.length;n+=4)t.push(e[n]<<24|e[n+1]<<16|e[n+2]<<8|e[n+3]);return t}class Ai{get key(){return ni(this,Xs,"f").slice()}constructor(e){if(Xs.set(this,void 0),ei.set(this,void 0),ti.set(this,void 0),!(this instanceof Ai))throw Error("AES must be instanitated with `new`");ri(this,Xs,new Uint8Array(e),"f");const t=ai[this.key.length];if(null==t)throw new TypeError("invalid key size (must be 16, 24 or 32 bytes)");ri(this,ti,[],"f"),ri(this,ei,[],"f");for(let e=0;e<=t;e++)ni(this,ti,"f").push([0,0,0,0]),ni(this,ei,"f").push([0,0,0,0]);const n=4*(t+1),r=this.key.length/4,a=vi(this.key);let s;for(let e=0;e<r;e++)s=e>>2,ni(this,ti,"f")[s][e%4]=a[e],ni(this,ei,"f")[t-s][e%4]=a[e];let i,o=0,l=r;for(;l<n;){if(i=a[r-1],a[0]^=ii[i>>16&255]<<24^ii[i>>8&255]<<16^ii[255&i]<<8^ii[i>>24&255]^si[o]<<24,o+=1,8!=r)for(let e=1;e<r;e++)a[e]^=a[e-1];else{for(let e=1;e<r/2;e++)a[e]^=a[e-1];i=a[r/2-1],a[r/2]^=ii[255&i]^ii[i>>8&255]<<8^ii[i>>16&255]<<16^ii[i>>24&255]<<24;for(let e=r/2+1;e<r;e++)a[e]^=a[e-1]}let e,s,u=0;for(;u<r&&l<n;)e=l>>2,s=l%4,ni(this,ti,"f")[e][s]=a[u],ni(this,ei,"f")[t-e][s]=a[u++],l++}for(let e=1;e<t;e++)for(let t=0;t<4;t++)i=ni(this,ei,"f")[e][t],ni(this,ei,"f")[e][t]=mi[i>>24&255]^yi[i>>16&255]^wi[i>>8&255]^bi[255&i]}encrypt(e){if(16!=e.length)throw new TypeError("invalid plaintext size (must be 16 bytes)");const t=ni(this,ti,"f").length-1,n=[0,0,0,0];let r=vi(e);for(let e=0;e<4;e++)r[e]^=ni(this,ti,"f")[0][e];for(let e=1;e<t;e++){for(let t=0;t<4;t++)n[t]=li[r[t]>>24&255]^ui[r[(t+1)%4]>>16&255]^ci[r[(t+2)%4]>>8&255]^di[255&r[(t+3)%4]]^ni(this,ti,"f")[e][t];r=n.slice()}const a=new Uint8Array(16);let s=0;for(let e=0;e<4;e++)s=ni(this,ti,"f")[t][e],a[4*e]=255&(ii[r[e]>>24&255]^s>>24),a[4*e+1]=255&(ii[r[(e+1)%4]>>16&255]^s>>16),a[4*e+2]=255&(ii[r[(e+2)%4]>>8&255]^s>>8),a[4*e+3]=255&(ii[255&r[(e+3)%4]]^s);return a}decrypt(e){if(16!=e.length)throw new TypeError("invalid ciphertext size (must be 16 bytes)");const t=ni(this,ei,"f").length-1,n=[0,0,0,0];let r=vi(e);for(let e=0;e<4;e++)r[e]^=ni(this,ei,"f")[0][e];for(let e=1;e<t;e++){for(let t=0;t<4;t++)n[t]=fi[r[t]>>24&255]^hi[r[(t+3)%4]>>16&255]^pi[r[(t+2)%4]>>8&255]^gi[255&r[(t+1)%4]]^ni(this,ei,"f")[e][t];r=n.slice()}const a=new Uint8Array(16);let s=0;for(let e=0;e<4;e++)s=ni(this,ei,"f")[t][e],a[4*e]=255&(oi[r[e]>>24&255]^s>>24),a[4*e+1]=255&(oi[r[(e+3)%4]>>16&255]^s>>16),a[4*e+2]=255&(oi[r[(e+2)%4]>>8&255]^s>>8),a[4*e+3]=255&(oi[255&r[(e+1)%4]]^s);return a}}Xs=new WeakMap,ei=new WeakMap,ti=new WeakMap;class Ei{constructor(e,t,n){if(n&&!(this instanceof n))throw new Error(`${e} must be instantiated with "new"`);Object.defineProperties(this,{aes:{enumerable:!0,value:new Ai(t)},name:{enumerable:!0,value:e}})}}var ki,xi,Ni=function(e,t,n,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!a:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(e,n):a?a.value=n:t.set(e,n),n},Si=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};class Ci extends Ei{constructor(e,t){if(super("ECC",e,Ci),ki.set(this,void 0),xi.set(this,void 0),t){if(t.length%16)throw new TypeError("invalid iv size (must be 16 bytes)");Ni(this,ki,new Uint8Array(t),"f")}else Ni(this,ki,new Uint8Array(16),"f");Ni(this,xi,this.iv,"f")}get iv(){return new Uint8Array(Si(this,ki,"f"))}encrypt(e){if(e.length%16)throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");const t=new Uint8Array(e.length);for(let n=0;n<e.length;n+=16){for(let t=0;t<16;t++)Si(this,xi,"f")[t]^=e[n+t];Ni(this,xi,this.aes.encrypt(Si(this,xi,"f")),"f"),t.set(Si(this,xi,"f"),n)}return t}decrypt(e){if(e.length%16)throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");const t=new Uint8Array(e.length);for(let n=0;n<e.length;n+=16){const r=this.aes.decrypt(e.subarray(n,n+16));for(let a=0;a<16;a++)t[n+a]=r[a]^Si(this,xi,"f")[a],Si(this,xi,"f")[a]=e[n+a]}return t}}ki=new WeakMap,xi=new WeakMap;new WeakMap,new WeakMap,new WeakSet;var Pi,Ri,Ii,Ti=function(e,t,n,r,a){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!a:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?a.call(e,n):a?a.value=n:t.set(e,n),n},Oi=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};class Bi extends Ei{constructor(e,t){super("CTR",e,Bi),Pi.set(this,void 0),Ri.set(this,void 0),Ii.set(this,void 0),Ti(this,Ii,new Uint8Array(16),"f"),Oi(this,Ii,"f").fill(0),Ti(this,Pi,Oi(this,Ii,"f"),"f"),Ti(this,Ri,16,"f"),null==t&&(t=1),"number"==typeof t?this.setCounterValue(t):this.setCounterBytes(t)}get counter(){return new Uint8Array(Oi(this,Ii,"f"))}setCounterValue(e){if(!Number.isInteger(e)||e<0||e>Number.MAX_SAFE_INTEGER)throw new TypeError("invalid counter initial integer value");for(let t=15;t>=0;--t)Oi(this,Ii,"f")[t]=e%256,e=Math.floor(e/256)}setCounterBytes(e){if(16!==e.length)throw new TypeError("invalid counter initial Uint8Array value length");Oi(this,Ii,"f").set(e)}increment(){for(let e=15;e>=0;e--){if(255!==Oi(this,Ii,"f")[e]){Oi(this,Ii,"f")[e]++;break}Oi(this,Ii,"f")[e]=0}}encrypt(e){var t,n;const r=new Uint8Array(e);for(let e=0;e<r.length;e++)16===Oi(this,Ri,"f")&&(Ti(this,Pi,this.aes.encrypt(Oi(this,Ii,"f")),"f"),Ti(this,Ri,0,"f"),this.increment()),r[e]^=Oi(this,Pi,"f")[(Ti(this,Ri,(n=Oi(this,Ri,"f"),t=n++,n),"f"),t)];return r}decrypt(e){return this.encrypt(e)}}Pi=new WeakMap,Ri=new WeakMap,Ii=new WeakMap,new WeakMap,new WeakMap,new WeakMap;const Li=(e,t)=>e<<t|e>>>32-t;function Ui(e,t,n,r,a,s){let i=e[t++]^n[r++],o=e[t++]^n[r++],l=e[t++]^n[r++],u=e[t++]^n[r++],c=e[t++]^n[r++],d=e[t++]^n[r++],f=e[t++]^n[r++],h=e[t++]^n[r++],p=e[t++]^n[r++],g=e[t++]^n[r++],m=e[t++]^n[r++],y=e[t++]^n[r++],w=e[t++]^n[r++],b=e[t++]^n[r++],v=e[t++]^n[r++],A=e[t++]^n[r++],E=i,k=o,x=l,N=u,S=c,C=d,P=f,R=h,I=p,T=g,O=m,B=y,L=w,U=b,F=v,D=A;for(let e=0;e<8;e+=2)S^=Li(E+L|0,7),I^=Li(S+E|0,9),L^=Li(I+S|0,13),E^=Li(L+I|0,18),T^=Li(C+k|0,7),U^=Li(T+C|0,9),k^=Li(U+T|0,13),C^=Li(k+U|0,18),F^=Li(O+P|0,7),x^=Li(F+O|0,9),P^=Li(x+F|0,13),O^=Li(P+x|0,18),N^=Li(D+B|0,7),R^=Li(N+D|0,9),B^=Li(R+N|0,13),D^=Li(B+R|0,18),k^=Li(E+N|0,7),x^=Li(k+E|0,9),N^=Li(x+k|0,13),E^=Li(N+x|0,18),P^=Li(C+S|0,7),R^=Li(P+C|0,9),S^=Li(R+P|0,13),C^=Li(S+R|0,18),B^=Li(O+T|0,7),I^=Li(B+O|0,9),T^=Li(I+B|0,13),O^=Li(T+I|0,18),L^=Li(D+F|0,7),U^=Li(L+D|0,9),F^=Li(U+L|0,13),D^=Li(F+U|0,18);a[s++]=i+E|0,a[s++]=o+k|0,a[s++]=l+x|0,a[s++]=u+N|0,a[s++]=c+S|0,a[s++]=d+C|0,a[s++]=f+P|0,a[s++]=h+R|0,a[s++]=p+I|0,a[s++]=g+T|0,a[s++]=m+O|0,a[s++]=y+B|0,a[s++]=w+L|0,a[s++]=b+U|0,a[s++]=v+F|0,a[s++]=A+D|0}function Fi(e,t,n,r,a){let s=r+0,i=r+16*a;for(let r=0;r<16;r++)n[i+r]=e[t+16*(2*a-1)+r];for(let r=0;r<a;r++,s+=16,t+=16)Ui(n,i,e,t,n,s),r>0&&(i+=16),Ui(n,s,e,t+=16,n,i)}function Di(e,t,n){const r=Fe({dkLen:32,asyncTick:10,maxmem:1073742848},n),{N:a,r:s,p:i,dkLen:o,asyncTick:l,maxmem:u,onProgress:c}=r;if(Ae(a),Ae(s),Ae(i),Ae(o),Ae(l),Ae(u),void 0!==c&&"function"!=typeof c)throw new Error("progressCb should be function");const d=128*s,f=d/4;if(a<=1||a&a-1||a>=2**(d/8)||a>2**32)throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");if(i<0||i>137438953440/d)throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");if(o<0||o>137438953440)throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");const h=d*(a+i);if(h>u)throw new Error(`Scrypt: parameters too large, ${h} (128 * r * (N + p)) > ${u} (maxmem)`);const p=Xr(Ke,e,t,{c:1,dkLen:d*i}),g=Pe(p),m=Pe(new Uint8Array(d*a)),y=Pe(new Uint8Array(d));let w=()=>{};if(c){const e=2*a*i,t=Math.max(Math.floor(e/1e4),1);let n=0;w=()=>{n++,!c||n%t&&n!==e||c(n/e)}}return{N:a,r:s,p:i,dkLen:o,blockSize32:f,V:m,B32:g,B:p,tmp:y,blockMixCb:w,asyncTick:l}}function Mi(e,t,n,r,a){const s=Xr(Ke,e,n,{c:1,dkLen:t});return n.fill(0),r.fill(0),a.fill(0),s}let ji=!1,zi=!1;const _i=async function(e,t,n,r,a,s,i){return await async function(e,t,n){const{N:r,r:a,p:s,dkLen:i,blockSize32:o,V:l,B32:u,B:c,tmp:d,blockMixCb:f,asyncTick:h}=Di(e,t,n);for(let e=0;e<s;e++){const t=o*e;for(let e=0;e<o;e++)l[e]=u[t+e];let n=0;await Oe(r-1,h,(()=>{Fi(l,n,l,n+=o,a),f()})),Fi(l,(r-1)*o,u,t,a),f(),await Oe(r,h,(()=>{const e=u[t+o-16]%r;for(let n=0;n<o;n++)d[n]=u[t+n]^l[e*o+n];Fi(d,0,u,t,a),f()}))}return Mi(e,i,c,l,d)}(e,t,{N:n,r,p:a,dkLen:s,onProgress:i})},Gi=function(e,t,n,r,a,s){return function(e,t,n){const{N:r,r:a,p:s,dkLen:i,blockSize32:o,V:l,B32:u,B:c,tmp:d,blockMixCb:f}=Di(e,t,n);for(let e=0;e<s;e++){const t=o*e;for(let e=0;e<o;e++)l[e]=u[t+e];for(let e=0,t=0;e<r-1;e++)Fi(l,t,l,t+=o,a),f();Fi(l,(r-1)*o,u,t,a),f();for(let e=0;e<r;e++){const e=u[t+o-16]%r;for(let n=0;n<o;n++)d[n]=u[t+n]^l[e*o+n];Fi(d,0,u,t,a),f()}}return Mi(e,i,c,l,d)}(e,t,{N:n,r,p:a,dkLen:s})};let Hi=_i,Vi=Gi;async function Qi(e,t,n,r,a,s,i){const o=un(e,"passwd"),l=un(t,"salt");return pn(await Hi(o,l,n,r,a,s,i))}function Ki(e,t,n,r,a,s){const i=un(e,"passwd"),o=un(t,"salt");return pn(Vi(i,o,n,r,a,s))}function Wi(e){const t=un(e,"randomBytes");t[6]=15&t[6]|64,t[8]=63&t[8]|128;const n=pn(t);return[n.substring(2,10),n.substring(10,14),n.substring(14,18),n.substring(18,22),n.substring(22,34)].join("-")}function Ji(e){return"string"!=typeof e||e.startsWith("0x")||(e="0x"+e),cn(e)}function qi(e,t){for(e=String(e);e.length<t;)e="0"+e;return e}function Yi(e){return"string"==typeof e?Ir(e,"NFKC"):cn(e)}function Zi(e,t){const n=t.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);nn(null!=n,"invalid path","path",t);const r=n[1],a=n[3],s="!"===n[4];let i=e;for(const e of r.toLowerCase().split(".")){if(Array.isArray(i)){if(!e.match(/^[0-9]+$/))break;i=i[parseInt(e)]}else if("object"==typeof i){let t=null;for(const n in i)if(n.toLowerCase()===e){t=i[n];break}i=t}else i=null;if(null==i)break}if(nn(!s||null!=i,"missing required value","path",r),a&&null!=i){if("int"===a){if("string"==typeof i&&i.match(/^-?[0-9]+$/))return parseInt(i);if(Number.isSafeInteger(i))return i}if("number"===a&&"string"==typeof i&&i.match(/^-?[0-9.]*$/))return parseFloat(i);if("data"===a&&"string"==typeof i)return Ji(i);if("array"===a&&Array.isArray(i))return i;if(a===typeof i)return i;nn(!1,`wrong type found for ${a} `,"path",r)}return i}Qi._=_i,Qi.lock=function(){zi=!0},Qi.register=function(e){if(zi)throw new Error("scrypt is locked");Hi=e},Object.freeze(Qi),Ki._=Gi,Ki.lock=function(){ji=!0},Ki.register=function(e){if(ji)throw new Error("scryptSync is locked");Vi=e},Object.freeze(Ki);const $i="m/44'/60'/0'/0/0";function Xi(e){try{const t=JSON.parse(e);if(3===(null!=t.version?parseInt(t.version):0))return!0}catch(e){}return!1}function eo(e,t){const n=un(t),r=Zi(e,"crypto.ciphertext:data!");nn(pn(wr(gn([n.slice(16,32),r]))).substring(2)===Zi(e,"crypto.mac:string!").toLowerCase(),"incorrect password","password","[ REDACTED ]");const a=function(e,t,n){if("aes-128-ctr"===Zi(e,"crypto.cipher:string")){const r=Zi(e,"crypto.cipherparams.iv:data!");return pn(new Bi(t,r).decrypt(n))}tn(!1,"unsupported cipher","UNSUPPORTED_OPERATION",{operation:"decrypt"})}(e,n.slice(0,16),r),s=Na(a);if(e.address){let t=e.address.toLowerCase();t.startsWith("0x")||(t="0x"+t),nn(xr(t)===s,"keystore address/privateKey mismatch","address",e.address)}const i={address:s,privateKey:a};if("0.1"===Zi(e,"x-ethers.version:string")){const t=n.slice(32,64),r=Zi(e,"x-ethers.mnemonicCiphertext:data!"),a=Zi(e,"x-ethers.mnemonicCounter:data!"),s=new Bi(t,a);i.mnemonic={path:Zi(e,"x-ethers.path:string")||$i,locale:Zi(e,"x-ethers.locale:string")||"en",entropy:pn(un(s.decrypt(r)))}}return i}function to(e){const t=Zi(e,"crypto.kdf:string");if(t&&"string"==typeof t){if("scrypt"===t.toLowerCase()){const n=Zi(e,"crypto.kdfparams.salt:data!"),r=Zi(e,"crypto.kdfparams.n:int!"),a=Zi(e,"crypto.kdfparams.r:int!"),s=Zi(e,"crypto.kdfparams.p:int!");nn(r>0&&!(r&r-1),"invalid kdf.N","kdf.N",r),nn(a>0&&s>0,"invalid kdf","kdf",t);const i=Zi(e,"crypto.kdfparams.dklen:int!");return nn(32===i,"invalid kdf.dklen","kdf.dflen",i),{name:"scrypt",salt:n,N:r,r:a,p:s,dkLen:64}}if("pbkdf2"===t.toLowerCase()){const t=Zi(e,"crypto.kdfparams.salt:data!"),n=Zi(e,"crypto.kdfparams.prf:string!"),r=n.split("-").pop();nn("sha256"===r||"sha512"===r,"invalid kdf.pdf","kdf.pdf",n);const a=Zi(e,"crypto.kdfparams.c:int!"),s=Zi(e,"crypto.kdfparams.dklen:int!");return nn(32===s,"invalid kdf.dklen","kdf.dklen",s),{name:"pbkdf2",salt:t,count:a,dkLen:s,algorithm:r}}}nn(!1,"unsupported key-derivation function","kdf",t)}function no(e){return new Promise((t=>{setTimeout((()=>{t()}),e)}))}function ro(e){const t=null!=e.salt?un(e.salt,"options.salt"):Ts(32);let n=1<<17,r=8,a=1;return e.scrypt&&(e.scrypt.N&&(n=e.scrypt.N),e.scrypt.r&&(r=e.scrypt.r),e.scrypt.p&&(a=e.scrypt.p)),nn("number"==typeof n&&n>0&&Number.isSafeInteger(n)&&(BigInt(n)&BigInt(n-1))===BigInt(0),"invalid scrypt N parameter","options.N",n),nn("number"==typeof r&&r>0&&Number.isSafeInteger(r),"invalid scrypt r parameter","options.r",r),nn("number"==typeof a&&a>0&&Number.isSafeInteger(a),"invalid scrypt p parameter","options.p",a),{name:"scrypt",dkLen:32,salt:t,N:n,r,p:a}}function ao(e,t,n,r){const a=un(n.privateKey,"privateKey"),s=null!=r.iv?un(r.iv,"options.iv"):Ts(16);nn(16===s.length,"invalid options.iv length","options.iv",r.iv);const i=null!=r.uuid?un(r.uuid,"options.uuid"):Ts(16);nn(16===i.length,"invalid options.uuid length","options.uuid",r.iv);const o=e.slice(0,16),l=e.slice(16,32),u=un(new Bi(o,s).encrypt(a)),c=wr(gn([l,u])),d={address:n.address.substring(2).toLowerCase(),id:Wi(i),version:3,Crypto:{cipher:"aes-128-ctr",cipherparams:{iv:pn(s).substring(2)},ciphertext:pn(u).substring(2),kdf:"scrypt",kdfparams:{salt:pn(t.salt).substring(2),n:t.N,dklen:32,p:t.p,r:t.r},mac:c.substring(2)}};if(n.mnemonic){const t=null!=r.client?r.client:`ethers/${Wt}`,a=n.mnemonic.path||$i,s=n.mnemonic.locale||"en",i=e.slice(32,64),o=un(n.mnemonic.entropy,"account.mnemonic.entropy"),l=Ts(16),u=un(new Bi(i,l).encrypt(o)),c=new Date,f="UTC--"+c.getUTCFullYear()+"-"+qi(c.getUTCMonth()+1,2)+"-"+qi(c.getUTCDate(),2)+"T"+qi(c.getUTCHours(),2)+"-"+qi(c.getUTCMinutes(),2)+"-"+qi(c.getUTCSeconds(),2)+".0Z--"+d.address;d["x-ethers"]={client:t,gethFilename:f,path:a,locale:s,mnemonicCounter:pn(l).substring(2),mnemonicCiphertext:pn(u).substring(2),version:"0.1"}}return JSON.stringify(d)}function so(e,t,n){null==n&&(n={});const r=Yi(t),a=ro(n);return ao(un(Ki(r,a.salt,a.N,a.r,a.p,64)),a,e,n)}async function io(e,t,n){null==n&&(n={});const r=Yi(t),a=ro(n);return ao(un(await Qi(r,a.salt,a.N,a.r,a.p,64,n.progressCallback)),a,e,n)}const oo="m/44'/60'/0'/0/0",lo=new Uint8Array([66,105,116,99,111,105,110,32,115,101,101,100]),uo=2147483648,co=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");function fo(e,t){let n="";for(;e;)n="0123456789abcdef"[e%16]+n,e=Math.trunc(e/16);for(;n.length<2*t;)n="0"+n;return"0x"+n}function ho(e){const t=un(e);return Ds(gn([t,yn(ga(ga(t)),0,4)]))}const po={};function go(e,t,n,r){const a=new Uint8Array(37);e&uo?(tn(null!=r,"cannot derive child of neutered node","UNSUPPORTED_OPERATION",{operation:"deriveChild"}),a.set(un(r),1)):a.set(un(n));for(let t=24;t>=0;t-=8)a[33+(t>>3)]=e>>24-t&255;const s=un(us("sha512",t,a));return{IL:s.slice(0,32),IR:s.slice(32)}}function mo(e,t){const n=t.split("/");nn(n.length>0,"invalid path","path",t),"m"===n[0]&&(nn(0===e.depth,`cannot derive root path (i.e. path starting with "m/") for a node at non-zero depth ${e.depth}`,"path",t),n.shift());let r=e;for(let e=0;e<n.length;e++){const t=n[e];if(t.match(/^[0-9]+'$/)){const n=parseInt(t.substring(0,t.length-1));nn(n<uo,"invalid path index",`path[${e}]`,t),r=r.deriveChild(uo+n)}else if(t.match(/^[0-9]+$/)){const n=parseInt(t);nn(n<uo,"invalid path index",`path[${e}]`,t),r=r.deriveChild(n)}else nn(!1,"invalid path component",`path[${e}]`,t)}return r}class yo extends ss{publicKey;fingerprint;parentFingerprint;mnemonic;chainCode;path;index;depth;constructor(e,t,n,r,a,s,i,o,l){super(t,l),on(e,po,"HDNodeWallet"),Yt(this,{publicKey:t.compressedPublicKey}),Yt(this,{parentFingerprint:n,fingerprint:yn(Cs(ga(this.publicKey)),0,4),chainCode:r,path:a,index:s,depth:i}),Yt(this,{mnemonic:o})}connect(e){return new yo(po,this.signingKey,this.parentFingerprint,this.chainCode,this.path,this.index,this.depth,this.mnemonic,e)}#U(){const e={address:this.address,privateKey:this.privateKey},t=this.mnemonic;return this.path&&t&&"en"===t.wordlist.locale&&""===t.password&&(e.mnemonic={path:this.path,locale:"en",entropy:t.entropy}),e}async encrypt(e,t){return await io(this.#U(),e,{progressCallback:t})}encryptSync(e){return so(this.#U(),e)}get extendedKey(){return tn(this.depth<256,"Depth too deep","UNSUPPORTED_OPERATION",{operation:"extendedKey"}),ho(gn(["0x0488ADE4",fo(this.depth,1),this.parentFingerprint,fo(this.index,4),this.chainCode,gn(["0x00",this.privateKey])]))}hasPath(){return null!=this.path}neuter(){return new wo(po,this.address,this.publicKey,this.parentFingerprint,this.chainCode,this.path,this.index,this.depth,this.provider)}deriveChild(e){const t=In(e,"index");nn(t<=4294967295,"invalid index","index",t);let n=this.path;n&&(n+="/"+(2147483647&t),t&uo&&(n+="'"));const{IR:r,IL:a}=go(t,this.chainCode,this.publicKey,this.privateKey),s=new Vn(Tn((Rn(a)+BigInt(this.privateKey))%co,32));return new yo(po,s,this.fingerprint,pn(r),n,t,this.depth+1,this.mnemonic,this.provider)}derivePath(e){return mo(this,e)}static#F(e,t){nn(fn(e),"invalid seed","seed","[REDACTED]");const n=un(e,"seed");nn(n.length>=16&&n.length<=64,"invalid seed","seed","[REDACTED]");const r=un(us("sha512",lo,n)),a=new Vn(pn(r.slice(0,32)));return new yo(po,a,"0x00000000",pn(r.slice(32)),"m",0,0,t,null)}static fromExtendedKey(e){const t=On(function(e){let t=Us;for(let n=0;n<e.length;n++)t*=Fs,t+=Ls(e[n]);return t}(e));nn(82===t.length||ho(t.slice(0,78))===e,"invalid extended key","extendedKey","[ REDACTED ]");const n=t[4],r=pn(t.slice(5,9)),a=parseInt(pn(t.slice(9,13)).substring(2),16),s=pn(t.slice(13,45)),i=t.slice(45,78);switch(pn(t.slice(0,4))){case"0x0488b21e":case"0x043587cf":{const e=pn(i);return new wo(po,Na(e),e,r,s,null,a,n,null)}case"0x0488ade4":case"0x04358394 ":if(0!==i[0])break;return new yo(po,new Vn(i.slice(1)),r,s,null,a,n,null,null)}nn(!1,"invalid extended key prefix","extendedKey","[ REDACTED ]")}static createRandom(e,t,n){null==e&&(e=""),null==t&&(t=oo),null==n&&(n=Hs.wordlist());const r=$s.fromEntropy(Ts(16),e,n);return yo.#F(r.computeSeed(),r).derivePath(t)}static fromMnemonic(e,t){return t||(t=oo),yo.#F(e.computeSeed(),e).derivePath(t)}static fromPhrase(e,t,n,r){null==t&&(t=""),null==n&&(n=oo),null==r&&(r=Hs.wordlist());const a=$s.fromPhrase(e,t,r);return yo.#F(a.computeSeed(),a).derivePath(n)}static fromSeed(e){return yo.#F(e,null)}}class wo extends as{publicKey;fingerprint;parentFingerprint;chainCode;path;index;depth;constructor(e,t,n,r,a,s,i,o,l){super(t,l),on(e,po,"HDNodeVoidWallet"),Yt(this,{publicKey:n}),Yt(this,{publicKey:n,fingerprint:yn(Cs(ga(n)),0,4),parentFingerprint:r,chainCode:a,path:s,index:i,depth:o})}connect(e){return new wo(po,this.address,this.publicKey,this.parentFingerprint,this.chainCode,this.path,this.index,this.depth,e)}get extendedKey(){return tn(this.depth<256,"Depth too deep","UNSUPPORTED_OPERATION",{operation:"extendedKey"}),ho(gn(["0x0488B21E",fo(this.depth,1),this.parentFingerprint,fo(this.index,4),this.chainCode,this.publicKey]))}hasPath(){return null!=this.path}deriveChild(e){const t=In(e,"index");nn(t<=4294967295,"invalid index","index",t);let n=this.path;n&&(n+="/"+(2147483647&t),t&uo&&(n+="'"));const{IR:r,IL:a}=go(t,this.chainCode,this.publicKey,null),s=Vn.addPoints(a,this.publicKey,!0),i=Na(s);return new wo(po,i,s,this.fingerprint,pn(r),n,t,this.depth+1,this.provider)}derivePath(e){return mo(this,e)}}function bo(e){try{if(JSON.parse(e).encseed)return!0}catch(e){}return!1}function vo(e,t){const n=JSON.parse(e),r=Yi(t),a=xr(Zi(n,"ethaddr:string!")),s=Ji(Zi(n,"encseed:string!"));nn(s&&s.length%16==0,"invalid encseed","json",e);const i=un(Ws(r,r,2e3,32,"sha256")).slice(0,16),o=s.slice(0,16),l=s.slice(16),u=function(e){if(e.length<16)throw new TypeError("PKCS#7 invalid length");const t=e[e.length-1];if(t>16)throw new TypeError("PKCS#7 padding byte out of range");const n=e.length-t;for(let r=0;r<t;r++)if(e[n+r]!==t)throw new TypeError("PKCS#7 invalid padding byte");return new Uint8Array(e.subarray(0,n))}(un(new Ci(i,o).decrypt(l)));let c="";for(let e=0;e<u.length;e++)c+=String.fromCharCode(u[e]);return{address:a,privateKey:Fr(c)}}function Ao(e){return new Promise((t=>{setTimeout((()=>{t()}),e)}))}class Eo extends ss{constructor(e,t){"string"!=typeof e||e.startsWith("0x")||(e="0x"+e),super("string"==typeof e?new Vn(e):e,t)}connect(e){return new Eo(this.signingKey,e)}async encrypt(e,t){const n={address:this.address,privateKey:this.privateKey};return await io(n,e,{progressCallback:t})}encryptSync(e){return so({address:this.address,privateKey:this.privateKey},e)}static#D(e){if(nn(e,"invalid JSON wallet","json","[ REDACTED ]"),"mnemonic"in e&&e.mnemonic&&"en"===e.mnemonic.locale){const t=$s.fromEntropy(e.mnemonic.entropy),n=yo.fromMnemonic(t,e.mnemonic.path);if(n.address===e.address&&n.privateKey===e.privateKey)return n;console.log("WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key")}const t=new Eo(e.privateKey);return nn(t.address===e.address,"address/privateKey mismatch","json","[ REDACTED ]"),t}static async fromEncryptedJson(e,t,n){let r=null;return Xi(e)?r=await async function(e,t,n){const r=JSON.parse(e),a=Yi(t),s=to(r);if("pbkdf2"===s.name){n&&(n(0),await no(0));const{salt:e,count:t,dkLen:i,algorithm:o}=s,l=Ws(a,e,t,i,o);return n&&(n(1),await no(0)),eo(r,l)}tn("scrypt"===s.name,"cannot be reached","UNKNOWN_ERROR",{params:s});const{salt:i,N:o,r:l,p:u,dkLen:c}=s;return eo(r,await Qi(a,i,o,l,u,c,n))}(e,t,n):bo(e)&&(n&&(n(0),await Ao(0)),r=vo(e,t),n&&(n(1),await Ao(0))),Eo.#D(r)}static fromEncryptedJsonSync(e,t){let n=null;return Xi(e)?n=function(e,t){const n=JSON.parse(e),r=Yi(t),a=to(n);if("pbkdf2"===a.name){const{salt:e,count:t,dkLen:s,algorithm:i}=a;return eo(n,Ws(r,e,t,s,i))}tn("scrypt"===a.name,"cannot be reached","UNKNOWN_ERROR",{params:a});const{salt:s,N:i,r:o,p:l,dkLen:u}=a;return eo(n,Ki(r,s,i,o,l,u))}(e,t):bo(e)?n=vo(e,t):nn(!1,"invalid JSON wallet","json","[ REDACTED ]"),Eo.#D(n)}static createRandom(e){const t=yo.createRandom();return e?t.connect(e):t}static fromPhrase(e,t){const n=yo.fromPhrase(e);return t?n.connect(t):n}}const ko={mainnet:{name:"Ethereum Mainnet",rpcUrl:"https://ethereum.publicnode.com",chainId:1,symbol:"ETH",blockExplorer:"https://etherscan.io"},sepolia:{name:"Sepolia Testnet",rpcUrl:"https://ethereum-sepolia.publicnode.com",chainId:11155111,symbol:"ETH",blockExplorer:"https://sepolia.etherscan.io"}},xo=async(e,t)=>{const n=new TextEncoder,r=n.encode(e),a=n.encode(t),s=await crypto.subtle.importKey("raw",a,{name:"PBKDF2"},!1,["deriveBits","deriveKey"]),i=crypto.getRandomValues(new Uint8Array(16)),o=await crypto.subtle.deriveKey({name:"PBKDF2",salt:i,iterations:1e5,hash:"SHA-256"},s,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),l=crypto.getRandomValues(new Uint8Array(12)),u=await crypto.subtle.encrypt({name:"AES-GCM",iv:l},o,r),c=new Uint8Array(i.length+l.length+u.byteLength);return c.set(i,0),c.set(l,i.length),c.set(new Uint8Array(u),i.length+l.length),btoa(String.fromCharCode(...c))},No="wallet_data",So=async e=>{await(async e=>{try{"undefined"!=typeof chrome&&chrome.storage?await chrome.storage.local.set(e):Object.keys(e).forEach((t=>{localStorage.setItem(t,JSON.stringify(e[t]))}))}catch(e){throw console.error("Error setting storage data:",e),e}})({[No]:e})},Co=async()=>{const e=await(async e=>{try{if("undefined"!=typeof chrome&&chrome.storage)return await chrome.storage.local.get(e);if("string"==typeof e){const t=localStorage.getItem(e);return t?JSON.parse(t):null}{const t={};return e.forEach((e=>{const n=localStorage.getItem(e);t[e]=n?JSON.parse(n):null})),t}}catch(e){throw console.error("Error getting storage data:",e),e}})(No);return e?.[No]||null},Po=32,Ro=new Uint8Array(Po),Io=["then"],To={},Oo=new WeakMap;function Bo(e){return Oo.get(e)}function Lo(e,t){Oo.set(e,t)}function Uo(e,t){const n=new Error(`deferred error during ABI decoding triggered accessing ${e}`);throw n.error=t,n}function Fo(e,t,n){return e.indexOf(null)>=0?t.map(((e,t)=>e instanceof Do?Fo(Bo(e),e,n):e)):e.reduce(((e,r,a)=>{let s=t.getValue(r);return r in e||(n&&s instanceof Do&&(s=Fo(Bo(s),s,n)),e[r]=s),e}),{})}class Do extends Array{#M;constructor(...e){const t=e[0];let n=e[1],r=(e[2]||[]).slice(),a=!0;t!==To&&(n=e,r=[],a=!1),super(n.length),n.forEach(((e,t)=>{this[t]=e}));const s=r.reduce(((e,t)=>("string"==typeof t&&e.set(t,(e.get(t)||0)+1),e)),new Map);if(Lo(this,Object.freeze(n.map(((e,t)=>{const n=r[t];return null!=n&&1===s.get(n)?n:null})))),this.#M=[],null==this.#M&&this.#M,!a)return;Object.freeze(this);const i=new Proxy(this,{get:(e,t,n)=>{if("string"==typeof t){if(t.match(/^[0-9]+$/)){const n=In(t,"%index");if(n<0||n>=this.length)throw new RangeError("out of result range");const r=e[n];return r instanceof Error&&Uo(`index ${n}`,r),r}if(Io.indexOf(t)>=0)return Reflect.get(e,t,n);const r=e[t];if(r instanceof Function)return function(...t){return r.apply(this===n?e:this,t)};if(!(t in e))return e.getValue.apply(this===n?e:this,[t])}return Reflect.get(e,t,n)}});return Lo(i,Bo(this)),i}toArray(e){const t=[];return this.forEach(((n,r)=>{n instanceof Error&&Uo(`index ${r}`,n),e&&n instanceof Do&&(n=n.toArray(e)),t.push(n)})),t}toObject(e){const t=Bo(this);return t.reduce(((n,r,a)=>(tn(null!=r,`value at index ${a} unnamed`,"UNSUPPORTED_OPERATION",{operation:"toObject()"}),Fo(t,this,e))),{})}slice(e,t){null==e&&(e=0),e<0&&(e+=this.length)<0&&(e=0),null==t&&(t=this.length),t<0&&(t+=this.length)<0&&(t=0),t>this.length&&(t=this.length);const n=Bo(this),r=[],a=[];for(let s=e;s<t;s++)r.push(this[s]),a.push(n[s]);return new Do(To,r,a)}filter(e,t){const n=Bo(this),r=[],a=[];for(let s=0;s<this.length;s++){const i=this[s];i instanceof Error&&Uo(`index ${s}`,i),e.call(t,i,s,this)&&(r.push(i),a.push(n[s]))}return new Do(To,r,a)}map(e,t){const n=[];for(let r=0;r<this.length;r++){const a=this[r];a instanceof Error&&Uo(`index ${r}`,a),n.push(e.call(t,a,r,this))}return n}getValue(e){const t=Bo(this).indexOf(e);if(-1===t)return;const n=this[t];return n instanceof Error&&Uo(`property ${JSON.stringify(e)}`,n.error),n}static fromItems(e,t){return new Do(To,e,t)}}function Mo(e){let t=On(e);return tn(t.length<=Po,"value out-of-bounds","BUFFER_OVERRUN",{buffer:t,length:Po,offset:t.length}),t.length!==Po&&(t=cn(gn([Ro.slice(t.length%Po),t]))),t}class jo{name;type;localName;dynamic;constructor(e,t,n,r){Yt(this,{name:e,type:t,localName:n,dynamic:r},{name:"string",type:"string",localName:"string",dynamic:"boolean"})}_throwError(e,t){nn(!1,e,this.localName,t)}}class zo{#d;#j;constructor(){this.#d=[],this.#j=0}get data(){return gn(this.#d)}get length(){return this.#j}#z(e){return this.#d.push(e),this.#j+=e.length,e.length}appendWriter(e){return this.#z(cn(e.data))}writeBytes(e){let t=cn(e);const n=t.length%Po;return n&&(t=cn(gn([t,Ro.slice(n)]))),this.#z(t)}writeValue(e){return this.#z(Mo(e))}writeUpdatableValue(){const e=this.#d.length;return this.#d.push(Ro),this.#j+=Po,t=>{this.#d[e]=Mo(t)}}}class _o{allowLoose;#d;#_;#G;#H;#V;constructor(e,t,n){Yt(this,{allowLoose:!!t}),this.#d=cn(e),this.#G=0,this.#H=null,this.#V=null!=n?n:1024,this.#_=0}get data(){return pn(this.#d)}get dataLength(){return this.#d.length}get consumed(){return this.#_}get bytes(){return new Uint8Array(this.#d)}#Q(e){if(this.#H)return this.#H.#Q(e);this.#G+=e,tn(this.#V<1||this.#G<=this.#V*this.dataLength,`compressed ABI data exceeds inflation ratio of ${this.#V} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`,"BUFFER_OVERRUN",{buffer:cn(this.#d),offset:this.#_,length:e,info:{bytesRead:this.#G,dataLength:this.dataLength}})}#K(e,t,n){let r=Math.ceil(t/Po)*Po;return this.#_+r>this.#d.length&&(this.allowLoose&&n&&this.#_+t<=this.#d.length?r=t:tn(!1,"data out-of-bounds","BUFFER_OVERRUN",{buffer:cn(this.#d),length:this.#d.length,offset:this.#_+r})),this.#d.slice(this.#_,this.#_+r)}subReader(e){const t=new _o(this.#d.slice(this.#_+e),this.allowLoose,this.#V);return t.#H=this,t}readBytes(e,t){let n=this.#K(0,e,!!t);return this.#Q(e),this.#_+=n.length,n.slice(0,e)}readValue(){return Rn(this.readBytes(Po))}readIndex(){return In(Rn(this.readBytes(Po)))}}const Go={};function Ho(e,t){let n=!1;return t<0&&(n=!0,t*=-1),new Ko(Go,`${n?"":"u"}int${t}`,e,{signed:n,width:t})}function Vo(e,t){return new Ko(Go,`bytes${t||""}`,e,{size:t})}const Qo=Symbol.for("_ethers_typed");class Ko{type;value;#W;_typedSymbol;constructor(e,t,n,r){null==r&&(r=null),on(Go,e,"Typed"),Yt(this,{_typedSymbol:Qo,type:t,value:n}),this.#W=r,this.format()}format(){if("array"===this.type)throw new Error("");if("dynamicArray"===this.type)throw new Error("");return"tuple"===this.type?`tuple(${this.value.map((e=>e.format())).join(",")})`:this.type}defaultValue(){return 0}minValue(){return 0}maxValue(){return 0}isBigInt(){return!!this.type.match(/^u?int[0-9]+$/)}isData(){return this.type.startsWith("bytes")}isString(){return"string"===this.type}get tupleName(){if("tuple"!==this.type)throw TypeError("not a tuple");return this.#W}get arrayLength(){if("array"!==this.type)throw TypeError("not an array");return!0===this.#W?-1:!1===this.#W?this.value.length:null}static from(e,t){return new Ko(Go,e,t)}static uint8(e){return Ho(e,8)}static uint16(e){return Ho(e,16)}static uint24(e){return Ho(e,24)}static uint32(e){return Ho(e,32)}static uint40(e){return Ho(e,40)}static uint48(e){return Ho(e,48)}static uint56(e){return Ho(e,56)}static uint64(e){return Ho(e,64)}static uint72(e){return Ho(e,72)}static uint80(e){return Ho(e,80)}static uint88(e){return Ho(e,88)}static uint96(e){return Ho(e,96)}static uint104(e){return Ho(e,104)}static uint112(e){return Ho(e,112)}static uint120(e){return Ho(e,120)}static uint128(e){return Ho(e,128)}static uint136(e){return Ho(e,136)}static uint144(e){return Ho(e,144)}static uint152(e){return Ho(e,152)}static uint160(e){return Ho(e,160)}static uint168(e){return Ho(e,168)}static uint176(e){return Ho(e,176)}static uint184(e){return Ho(e,184)}static uint192(e){return Ho(e,192)}static uint200(e){return Ho(e,200)}static uint208(e){return Ho(e,208)}static uint216(e){return Ho(e,216)}static uint224(e){return Ho(e,224)}static uint232(e){return Ho(e,232)}static uint240(e){return Ho(e,240)}static uint248(e){return Ho(e,248)}static uint256(e){return Ho(e,256)}static uint(e){return Ho(e,256)}static int8(e){return Ho(e,-8)}static int16(e){return Ho(e,-16)}static int24(e){return Ho(e,-24)}static int32(e){return Ho(e,-32)}static int40(e){return Ho(e,-40)}static int48(e){return Ho(e,-48)}static int56(e){return Ho(e,-56)}static int64(e){return Ho(e,-64)}static int72(e){return Ho(e,-72)}static int80(e){return Ho(e,-80)}static int88(e){return Ho(e,-88)}static int96(e){return Ho(e,-96)}static int104(e){return Ho(e,-104)}static int112(e){return Ho(e,-112)}static int120(e){return Ho(e,-120)}static int128(e){return Ho(e,-128)}static int136(e){return Ho(e,-136)}static int144(e){return Ho(e,-144)}static int152(e){return Ho(e,-152)}static int160(e){return Ho(e,-160)}static int168(e){return Ho(e,-168)}static int176(e){return Ho(e,-176)}static int184(e){return Ho(e,-184)}static int192(e){return Ho(e,-192)}static int200(e){return Ho(e,-200)}static int208(e){return Ho(e,-208)}static int216(e){return Ho(e,-216)}static int224(e){return Ho(e,-224)}static int232(e){return Ho(e,-232)}static int240(e){return Ho(e,-240)}static int248(e){return Ho(e,-248)}static int256(e){return Ho(e,-256)}static int(e){return Ho(e,-256)}static bytes1(e){return Vo(e,1)}static bytes2(e){return Vo(e,2)}static bytes3(e){return Vo(e,3)}static bytes4(e){return Vo(e,4)}static bytes5(e){return Vo(e,5)}static bytes6(e){return Vo(e,6)}static bytes7(e){return Vo(e,7)}static bytes8(e){return Vo(e,8)}static bytes9(e){return Vo(e,9)}static bytes10(e){return Vo(e,10)}static bytes11(e){return Vo(e,11)}static bytes12(e){return Vo(e,12)}static bytes13(e){return Vo(e,13)}static bytes14(e){return Vo(e,14)}static bytes15(e){return Vo(e,15)}static bytes16(e){return Vo(e,16)}static bytes17(e){return Vo(e,17)}static bytes18(e){return Vo(e,18)}static bytes19(e){return Vo(e,19)}static bytes20(e){return Vo(e,20)}static bytes21(e){return Vo(e,21)}static bytes22(e){return Vo(e,22)}static bytes23(e){return Vo(e,23)}static bytes24(e){return Vo(e,24)}static bytes25(e){return Vo(e,25)}static bytes26(e){return Vo(e,26)}static bytes27(e){return Vo(e,27)}static bytes28(e){return Vo(e,28)}static bytes29(e){return Vo(e,29)}static bytes30(e){return Vo(e,30)}static bytes31(e){return Vo(e,31)}static bytes32(e){return Vo(e,32)}static address(e){return new Ko(Go,"address",e)}static bool(e){return new Ko(Go,"bool",!!e)}static bytes(e){return new Ko(Go,"bytes",e)}static string(e){return new Ko(Go,"string",e)}static array(e,t){throw new Error("not implemented yet")}static tuple(e,t){throw new Error("not implemented yet")}static overrides(e){return new Ko(Go,"overrides",Object.assign({},e))}static isTyped(e){return e&&"object"==typeof e&&"_typedSymbol"in e&&e._typedSymbol===Qo}static dereference(e,t){if(Ko.isTyped(e)){if(e.type!==t)throw new Error(`invalid type: expecetd ${t}, got ${e.type}`);return e.value}return e}}class Wo extends jo{constructor(e){super("address","address",e,!1)}defaultValue(){return"0x0000000000000000000000000000000000000000"}encode(e,t){let n=Ko.dereference(t,"string");try{n=xr(n)}catch(e){return this._throwError(e.message,t)}return e.writeValue(n)}decode(e){return xr(Tn(e.readValue(),20))}}class Jo extends jo{coder;constructor(e){super(e.name,e.type,"_",e.dynamic),this.coder=e}defaultValue(){return this.coder.defaultValue()}encode(e,t){return this.coder.encode(e,t)}decode(e){return this.coder.decode(e)}}function qo(e,t,n){let r=[];if(Array.isArray(n))r=n;else if(n&&"object"==typeof n){let e={};r=t.map((t=>{const r=t.localName;return tn(r,"cannot encode object for signature with missing names","INVALID_ARGUMENT",{argument:"values",info:{coder:t},value:n}),tn(!e[r],"cannot encode object for signature with duplicate names","INVALID_ARGUMENT",{argument:"values",info:{coder:t},value:n}),e[r]=!0,n[r]}))}else nn(!1,"invalid tuple value","tuple",n);nn(t.length===r.length,"types/value length mismatch","tuple",n);let a=new zo,s=new zo,i=[];t.forEach(((e,t)=>{let n=r[t];if(e.dynamic){let t=s.length;e.encode(s,n);let r=a.writeUpdatableValue();i.push((e=>{r(e+t)}))}else e.encode(a,n)})),i.forEach((e=>{e(a.length)}));let o=e.appendWriter(a);return o+=e.appendWriter(s),o}function Yo(e,t){let n=[],r=[],a=e.subReader(0);return t.forEach((t=>{let s=null;if(t.dynamic){let n=e.readIndex(),r=a.subReader(n);try{s=t.decode(r)}catch(e){if($t(e,"BUFFER_OVERRUN"))throw e;s=e,s.baseType=t.name,s.name=t.localName,s.type=t.type}}else try{s=t.decode(e)}catch(e){if($t(e,"BUFFER_OVERRUN"))throw e;s=e,s.baseType=t.name,s.name=t.localName,s.type=t.type}if(null==s)throw new Error("investigate");n.push(s),r.push(t.localName||null)})),Do.fromItems(n,r)}class Zo extends jo{coder;length;constructor(e,t,n){super("array",e.type+"["+(t>=0?t:"")+"]",n,-1===t||e.dynamic),Yt(this,{coder:e,length:t})}defaultValue(){const e=this.coder.defaultValue(),t=[];for(let n=0;n<this.length;n++)t.push(e);return t}encode(e,t){const n=Ko.dereference(t,"array");Array.isArray(n)||this._throwError("expected array value",n);let r=this.length;-1===r&&(r=n.length,e.writeValue(n.length)),rn(n.length,r,"coder array"+(this.localName?" "+this.localName:""));let a=[];for(let e=0;e<n.length;e++)a.push(this.coder);return qo(e,a,n)}decode(e){let t=this.length;-1===t&&(t=e.readIndex(),tn(t*Po<=e.dataLength,"insufficient data length","BUFFER_OVERRUN",{buffer:e.bytes,offset:t*Po,length:e.dataLength}));let n=[];for(let e=0;e<t;e++)n.push(new Jo(this.coder));return Yo(e,n)}}class $o extends jo{constructor(e){super("bool","bool",e,!1)}defaultValue(){return!1}encode(e,t){const n=Ko.dereference(t,"bool");return e.writeValue(n?1:0)}decode(e){return!!e.readValue()}}class Xo extends jo{constructor(e,t){super(e,e,t,!0)}defaultValue(){return"0x"}encode(e,t){t=cn(t);let n=e.writeValue(t.length);return n+=e.writeBytes(t),n}decode(e){return e.readBytes(e.readIndex(),!0)}}class el extends Xo{constructor(e){super("bytes",e)}decode(e){return pn(super.decode(e))}}class tl extends jo{size;constructor(e,t){let n="bytes"+String(e);super(n,n,t,!1),Yt(this,{size:e},{size:"number"})}defaultValue(){return"0x0000000000000000000000000000000000000000000000000000000000000000".substring(0,2+2*this.size)}encode(e,t){let n=cn(Ko.dereference(t,this.type));return n.length!==this.size&&this._throwError("incorrect data length",t),e.writeBytes(n)}decode(e){return pn(e.readBytes(this.size))}}const nl=new Uint8Array([]);class rl extends jo{constructor(e){super("null","",e,!1)}defaultValue(){return null}encode(e,t){return null!=t&&this._throwError("not null",t),e.writeBytes(nl)}decode(e){return e.readBytes(0),null}}const al=BigInt(0),sl=BigInt(1),il=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");class ol extends jo{size;signed;constructor(e,t,n){const r=(t?"int":"uint")+8*e;super(r,r,n,!1),Yt(this,{size:e,signed:t},{size:"number",signed:"boolean"})}defaultValue(){return 0}encode(e,t){let n=Sn(Ko.dereference(t,this.type)),r=Nn(il,256);if(this.signed){let e=Nn(r,8*this.size-1);(n>e||n<-(e+sl))&&this._throwError("value out-of-bounds",t),n=xn(n,256)}else(n<al||n>Nn(r,8*this.size))&&this._throwError("value out-of-bounds",t);return e.writeValue(n)}decode(e){let t=Nn(e.readValue(),8*this.size);return this.signed&&(t=kn(t,8*this.size)),t}}class ll extends Xo{constructor(e){super("string",e)}defaultValue(){return""}encode(e,t){return super.encode(e,Ir(Ko.dereference(t,"string")))}decode(e){return Tr(super.decode(e))}}class ul extends jo{coders;constructor(e,t){let n=!1;const r=[];e.forEach((e=>{e.dynamic&&(n=!0),r.push(e.type)})),super("tuple","tuple("+r.join(",")+")",t,n),Yt(this,{coders:Object.freeze(e.slice())})}defaultValue(){const e=[];this.coders.forEach((t=>{e.push(t.defaultValue())}));const t=this.coders.reduce(((e,t)=>{const n=t.localName;return n&&(e[n]||(e[n]=0),e[n]++),e}),{});return this.coders.forEach(((n,r)=>{let a=n.localName;a&&1===t[a]&&("length"===a&&(a="_length"),null==e[a]&&(e[a]=e[r]))})),Object.freeze(e)}encode(e,t){const n=Ko.dereference(t,"tuple");return qo(e,this.coders,n)}decode(e){return Yo(e,this.coders)}}function cl(e){const t=new Set;return e.forEach((e=>t.add(e))),Object.freeze(t)}const dl=cl("external public payable override".split(" ")),fl="constant external internal payable private public pure view override",hl=cl(fl.split(" ")),pl="constructor error event fallback function receive struct",gl=cl(pl.split(" ")),ml="calldata memory storage payable indexed",yl=cl(ml.split(" ")),wl=cl([pl,ml,"tuple returns",fl].join(" ").split(" ")),bl={"(":"OPEN_PAREN",")":"CLOSE_PAREN","[":"OPEN_BRACKET","]":"CLOSE_BRACKET",",":"COMMA","@":"AT"},vl=new RegExp("^(\\s*)"),Al=new RegExp("^([0-9]+)"),El=new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)"),kl=new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$"),xl=new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");class Nl{#_;#J;get offset(){return this.#_}get length(){return this.#J.length-this.#_}constructor(e){this.#_=0,this.#J=e.slice()}clone(){return new Nl(this.#J)}reset(){this.#_=0}#q(e=0,t=0){return new Nl(this.#J.slice(e,t).map((t=>Object.freeze(Object.assign({},t,{match:t.match-e,linkBack:t.linkBack-e,linkNext:t.linkNext-e})))))}popKeyword(e){const t=this.peek();if("KEYWORD"!==t.type||!e.has(t.text))throw new Error(`expected keyword ${t.text}`);return this.pop().text}popType(e){if(this.peek().type!==e){const t=this.peek();throw new Error(`expected ${e}; got ${t.type} ${JSON.stringify(t.text)}`)}return this.pop().text}popParen(){const e=this.peek();if("OPEN_PAREN"!==e.type)throw new Error("bad start");const t=this.#q(this.#_+1,e.match+1);return this.#_=e.match+1,t}popParams(){const e=this.peek();if("OPEN_PAREN"!==e.type)throw new Error("bad start");const t=[];for(;this.#_<e.match-1;){const e=this.peek().linkNext;t.push(this.#q(this.#_+1,e)),this.#_=e}return this.#_=e.match+1,t}peek(){if(this.#_>=this.#J.length)throw new Error("out-of-bounds");return this.#J[this.#_]}peekKeyword(e){const t=this.peekType("KEYWORD");return null!=t&&e.has(t)?t:null}peekType(e){if(0===this.length)return null;const t=this.peek();return t.type===e?t.text:null}pop(){const e=this.peek();return this.#_++,e}toString(){const e=[];for(let t=this.#_;t<this.#J.length;t++){const n=this.#J[t];e.push(`${n.type}:${n.text}`)}return`<TokenString ${e.join(" ")}>`}}function Sl(e){const t=[],n=t=>{const n=s<e.length?JSON.stringify(e[s]):"$EOI";throw new Error(`invalid token ${n} at ${s}: ${t}`)};let r=[],a=[],s=0;for(;s<e.length;){let i=e.substring(s),o=i.match(vl);o&&(s+=o[1].length,i=e.substring(s));const l={depth:r.length,linkBack:-1,linkNext:-1,match:-1,type:"",text:"",offset:s,value:-1};t.push(l);let u=bl[i[0]]||"";if(u){if(l.type=u,l.text=i[0],s++,"OPEN_PAREN"===u)r.push(t.length-1),a.push(t.length-1);else if("CLOSE_PAREN"==u)0===r.length&&n("no matching open bracket"),l.match=r.pop(),t[l.match].match=t.length-1,l.depth--,l.linkBack=a.pop(),t[l.linkBack].linkNext=t.length-1;else if("COMMA"===u)l.linkBack=a.pop(),t[l.linkBack].linkNext=t.length-1,a.push(t.length-1);else if("OPEN_BRACKET"===u)l.type="BRACKET";else if("CLOSE_BRACKET"===u){let e=t.pop().text;if(t.length>0&&"NUMBER"===t[t.length-1].type){const n=t.pop().text;e=n+e,t[t.length-1].value=In(n)}if(0===t.length||"BRACKET"!==t[t.length-1].type)throw new Error("missing opening bracket");t[t.length-1].text+=e}}else if(o=i.match(El),o){if(l.text=o[1],s+=l.text.length,wl.has(l.text)){l.type="KEYWORD";continue}if(l.text.match(xl)){l.type="TYPE";continue}l.type="ID"}else{if(o=i.match(Al),!o)throw new Error(`unexpected token ${JSON.stringify(i[0])} at position ${s}`);l.text=o[1],l.type="NUMBER",s+=l.text.length}}return new Nl(t.map((e=>Object.freeze(e))))}function Cl(e,t){let n=[];for(const r in t.keys())e.has(r)&&n.push(r);if(n.length>1)throw new Error(`conflicting types: ${n.join(", ")}`)}function Pl(e,t){if(t.peekKeyword(gl)){const n=t.pop().text;if(n!==e)throw new Error(`expected ${e}, got ${n}`)}return t.popType("ID")}function Rl(e,t){const n=new Set;for(;;){const r=e.peekType("KEYWORD");if(null==r||t&&!t.has(r))break;if(e.pop(),n.has(r))throw new Error(`duplicate keywords: ${JSON.stringify(r)}`);n.add(r)}return Object.freeze(n)}function Il(e){let t=Rl(e,hl);return Cl(t,cl("constant payable nonpayable".split(" "))),Cl(t,cl("pure view payable nonpayable".split(" "))),t.has("view")?"view":t.has("pure")?"pure":t.has("payable")?"payable":t.has("nonpayable")?"nonpayable":t.has("constant")?"view":"nonpayable"}function Tl(e,t){return e.popParams().map((e=>Ql.from(e,t)))}function Ol(e){if(e.peekType("AT")){if(e.pop(),e.peekType("NUMBER"))return Sn(e.pop().text);throw new Error("invalid gas")}return null}function Bl(e){if(e.length)throw new Error(`unexpected tokens at offset ${e.offset}: ${e.toString()}`)}const Ll=new RegExp(/^(.*)\[([0-9]*)\]$/);function Ul(e){const t=e.match(xl);if(nn(t,"invalid type","type",e),"uint"===e)return"uint256";if("int"===e)return"int256";if(t[2]){const n=parseInt(t[2]);nn(0!==n&&n<=32,"invalid bytes length","type",e)}else if(t[3]){const n=parseInt(t[3]);nn(0!==n&&n<=256&&n%8==0,"invalid numeric width","type",e)}return e}const Fl={},Dl=Symbol.for("_ethers_internal"),Ml="_ParamTypeInternal",jl="_ErrorInternal",zl="_EventInternal",_l="_ConstructorInternal",Gl="_FallbackInternal",Hl="_FunctionInternal",Vl="_StructInternal";class Ql{name;type;baseType;indexed;components;arrayLength;arrayChildren;constructor(e,t,n,r,a,s,i,o){if(on(e,Fl,"ParamType"),Object.defineProperty(this,Dl,{value:Ml}),s&&(s=Object.freeze(s.slice())),"array"===r){if(null==i||null==o)throw new Error("")}else if(null!=i||null!=o)throw new Error("");if("tuple"===r){if(null==s)throw new Error("")}else if(null!=s)throw new Error("");Yt(this,{name:t,type:n,baseType:r,indexed:a,components:s,arrayLength:i,arrayChildren:o})}format(e){if(null==e&&(e="sighash"),"json"===e){const t=this.name||"";if(this.isArray()){const e=JSON.parse(this.arrayChildren.format("json"));return e.name=t,e.type+=`[${this.arrayLength<0?"":String(this.arrayLength)}]`,JSON.stringify(e)}const n={type:"tuple"===this.baseType?"tuple":this.type,name:t};return"boolean"==typeof this.indexed&&(n.indexed=this.indexed),this.isTuple()&&(n.components=this.components.map((t=>JSON.parse(t.format(e))))),JSON.stringify(n)}let t="";return this.isArray()?(t+=this.arrayChildren.format(e),t+=`[${this.arrayLength<0?"":String(this.arrayLength)}]`):this.isTuple()?t+="("+this.components.map((t=>t.format(e))).join("full"===e?", ":",")+")":t+=this.type,"sighash"!==e&&(!0===this.indexed&&(t+=" indexed"),"full"===e&&this.name&&(t+=" "+this.name)),t}isArray(){return"array"===this.baseType}isTuple(){return"tuple"===this.baseType}isIndexable(){return null!=this.indexed}walk(e,t){if(this.isArray()){if(!Array.isArray(e))throw new Error("invalid array value");if(-1!==this.arrayLength&&e.length!==this.arrayLength)throw new Error("array is wrong length");const n=this;return e.map((e=>n.arrayChildren.walk(e,t)))}if(this.isTuple()){if(!Array.isArray(e))throw new Error("invalid tuple value");if(e.length!==this.components.length)throw new Error("array is wrong length");const n=this;return e.map(((e,r)=>n.components[r].walk(e,t)))}return t(this.type,e)}#Y(e,t,n,r){if(this.isArray()){if(!Array.isArray(t))throw new Error("invalid array value");if(-1!==this.arrayLength&&t.length!==this.arrayLength)throw new Error("array is wrong length");const a=this.arrayChildren,s=t.slice();return s.forEach(((t,r)=>{a.#Y(e,t,n,(e=>{s[r]=e}))})),void r(s)}if(this.isTuple()){const a=this.components;let s;if(Array.isArray(t))s=t.slice();else{if(null==t||"object"!=typeof t)throw new Error("invalid tuple value");s=a.map((e=>{if(!e.name)throw new Error("cannot use object value with unnamed components");if(!(e.name in t))throw new Error(`missing value for component ${e.name}`);return t[e.name]}))}if(s.length!==this.components.length)throw new Error("array is wrong length");return s.forEach(((t,r)=>{a[r].#Y(e,t,n,(e=>{s[r]=e}))})),void r(s)}const a=n(this.type,t);a.then?e.push(async function(){r(await a)}()):r(a)}async walkAsync(e,t){const n=[],r=[e];return this.#Y(n,e,t,(e=>{r[0]=e})),n.length&&await Promise.all(n),r[0]}static from(e,t){if(Ql.isParamType(e))return e;if("string"==typeof e)try{return Ql.from(Sl(e),t)}catch(t){nn(!1,"invalid param type","obj",e)}else if(e instanceof Nl){let n="",r="",a=null;Rl(e,cl(["tuple"])).has("tuple")||e.peekType("OPEN_PAREN")?(r="tuple",a=e.popParams().map((e=>Ql.from(e))),n=`tuple(${a.map((e=>e.format())).join(",")})`):(n=Ul(e.popType("TYPE")),r=n);let s=null,i=null;for(;e.length&&e.peekType("BRACKET");){const t=e.pop();s=new Ql(Fl,"",n,r,null,a,i,s),i=t.value,n+=t.text,r="array",a=null}let o=null;if(Rl(e,yl).has("indexed")){if(!t)throw new Error("");o=!0}const l=e.peekType("ID")?e.pop().text:"";if(e.length)throw new Error("leftover tokens");return new Ql(Fl,l,n,r,o,a,i,s)}const n=e.name;nn(!n||"string"==typeof n&&n.match(kl),"invalid name","obj.name",n);let r=e.indexed;null!=r&&(nn(t,"parameter cannot be indexed","obj.indexed",e.indexed),r=!!r);let a=e.type,s=a.match(Ll);if(s){const t=parseInt(s[2]||"-1"),i=Ql.from({type:s[1],components:e.components});return new Ql(Fl,n||"",a,"array",r,null,t,i)}if("tuple"===a||a.startsWith("tuple(")||a.startsWith("(")){const t=null!=e.components?e.components.map((e=>Ql.from(e))):null;return new Ql(Fl,n||"",a,"tuple",r,t,null,null)}return a=Ul(e.type),new Ql(Fl,n||"",a,a,r,null,null,null)}static isParamType(e){return e&&e[Dl]===Ml}}class Kl{type;inputs;constructor(e,t,n){on(e,Fl,"Fragment"),Yt(this,{type:t,inputs:n=Object.freeze(n.slice())})}static from(e){if("string"==typeof e){try{Kl.from(JSON.parse(e))}catch(e){}return Kl.from(Sl(e))}if(e instanceof Nl)switch(e.peekKeyword(gl)){case"constructor":return Zl.from(e);case"error":return ql.from(e);case"event":return Yl.from(e);case"fallback":case"receive":return $l.from(e);case"function":return Xl.from(e);case"struct":return eu.from(e)}else if("object"==typeof e){switch(e.type){case"constructor":return Zl.from(e);case"error":return ql.from(e);case"event":return Yl.from(e);case"fallback":case"receive":return $l.from(e);case"function":return Xl.from(e);case"struct":return eu.from(e)}tn(!1,`unsupported type: ${e.type}`,"UNSUPPORTED_OPERATION",{operation:"Fragment.from"})}nn(!1,"unsupported frgament object","obj",e)}static isConstructor(e){return Zl.isFragment(e)}static isError(e){return ql.isFragment(e)}static isEvent(e){return Yl.isFragment(e)}static isFunction(e){return Xl.isFragment(e)}static isStruct(e){return eu.isFragment(e)}}class Wl extends Kl{name;constructor(e,t,n,r){super(e,t,r),nn("string"==typeof n&&n.match(kl),"invalid identifier","name",n),r=Object.freeze(r.slice()),Yt(this,{name:n})}}function Jl(e,t){return"("+t.map((t=>t.format(e))).join("full"===e?", ":",")+")"}class ql extends Wl{constructor(e,t,n){super(e,"error",t,n),Object.defineProperty(this,Dl,{value:jl})}get selector(){return Fr(this.format("sighash")).substring(0,10)}format(e){if(null==e&&(e="sighash"),"json"===e)return JSON.stringify({type:"error",name:this.name,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});const t=[];return"sighash"!==e&&t.push("error"),t.push(this.name+Jl(e,this.inputs)),t.join(" ")}static from(e){if(ql.isFragment(e))return e;if("string"==typeof e)return ql.from(Sl(e));if(e instanceof Nl){const t=Pl("error",e),n=Tl(e);return Bl(e),new ql(Fl,t,n)}return new ql(Fl,e.name,e.inputs?e.inputs.map(Ql.from):[])}static isFragment(e){return e&&e[Dl]===jl}}class Yl extends Wl{anonymous;constructor(e,t,n,r){super(e,"event",t,n),Object.defineProperty(this,Dl,{value:zl}),Yt(this,{anonymous:r})}get topicHash(){return Fr(this.format("sighash"))}format(e){if(null==e&&(e="sighash"),"json"===e)return JSON.stringify({type:"event",anonymous:this.anonymous,name:this.name,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});const t=[];return"sighash"!==e&&t.push("event"),t.push(this.name+Jl(e,this.inputs)),"sighash"!==e&&this.anonymous&&t.push("anonymous"),t.join(" ")}static getTopicHash(e,t){return t=(t||[]).map((e=>Ql.from(e))),new Yl(Fl,e,t,!1).topicHash}static from(e){if(Yl.isFragment(e))return e;if("string"==typeof e)try{return Yl.from(Sl(e))}catch(t){nn(!1,"invalid event fragment","obj",e)}else if(e instanceof Nl){const t=Pl("event",e),n=Tl(e,!0),r=!!Rl(e,cl(["anonymous"])).has("anonymous");return Bl(e),new Yl(Fl,t,n,r)}return new Yl(Fl,e.name,e.inputs?e.inputs.map((e=>Ql.from(e,!0))):[],!!e.anonymous)}static isFragment(e){return e&&e[Dl]===zl}}class Zl extends Kl{payable;gas;constructor(e,t,n,r,a){super(e,t,n),Object.defineProperty(this,Dl,{value:_l}),Yt(this,{payable:r,gas:a})}format(e){if(tn(null!=e&&"sighash"!==e,"cannot format a constructor for sighash","UNSUPPORTED_OPERATION",{operation:"format(sighash)"}),"json"===e)return JSON.stringify({type:"constructor",stateMutability:this.payable?"payable":"undefined",payable:this.payable,gas:null!=this.gas?this.gas:void 0,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});const t=[`constructor${Jl(e,this.inputs)}`];return this.payable&&t.push("payable"),null!=this.gas&&t.push(`@${this.gas.toString()}`),t.join(" ")}static from(e){if(Zl.isFragment(e))return e;if("string"==typeof e)try{return Zl.from(Sl(e))}catch(t){nn(!1,"invalid constuctor fragment","obj",e)}else if(e instanceof Nl){Rl(e,cl(["constructor"]));const t=Tl(e),n=!!Rl(e,dl).has("payable"),r=Ol(e);return Bl(e),new Zl(Fl,"constructor",t,n,r)}return new Zl(Fl,"constructor",e.inputs?e.inputs.map(Ql.from):[],!!e.payable,null!=e.gas?e.gas:null)}static isFragment(e){return e&&e[Dl]===_l}}class $l extends Kl{payable;constructor(e,t,n){super(e,"fallback",t),Object.defineProperty(this,Dl,{value:Gl}),Yt(this,{payable:n})}format(e){const t=0===this.inputs.length?"receive":"fallback";if("json"===e){const e=this.payable?"payable":"nonpayable";return JSON.stringify({type:t,stateMutability:e})}return`${t}()${this.payable?" payable":""}`}static from(e){if($l.isFragment(e))return e;if("string"==typeof e)try{return $l.from(Sl(e))}catch(t){nn(!1,"invalid fallback fragment","obj",e)}else if(e instanceof Nl){const t=e.toString();if(nn(e.peekKeyword(cl(["fallback","receive"])),"type must be fallback or receive","obj",t),"receive"===e.popKeyword(cl(["fallback","receive"]))){const t=Tl(e);return nn(0===t.length,"receive cannot have arguments","obj.inputs",t),Rl(e,cl(["payable"])),Bl(e),new $l(Fl,[],!0)}let n=Tl(e);n.length?nn(1===n.length&&"bytes"===n[0].type,"invalid fallback inputs","obj.inputs",n.map((e=>e.format("minimal"))).join(", ")):n=[Ql.from("bytes")];const r=Il(e);if(nn("nonpayable"===r||"payable"===r,"fallback cannot be constants","obj.stateMutability",r),Rl(e,cl(["returns"])).has("returns")){const t=Tl(e);nn(1===t.length&&"bytes"===t[0].type,"invalid fallback outputs","obj.outputs",t.map((e=>e.format("minimal"))).join(", "))}return Bl(e),new $l(Fl,n,"payable"===r)}if("receive"===e.type)return new $l(Fl,[],!0);if("fallback"===e.type){const t=[Ql.from("bytes")],n="payable"===e.stateMutability;return new $l(Fl,t,n)}nn(!1,"invalid fallback description","obj",e)}static isFragment(e){return e&&e[Dl]===Gl}}class Xl extends Wl{constant;outputs;stateMutability;payable;gas;constructor(e,t,n,r,a,s){super(e,"function",t,r),Object.defineProperty(this,Dl,{value:Hl}),Yt(this,{constant:"view"===n||"pure"===n,gas:s,outputs:a=Object.freeze(a.slice()),payable:"payable"===n,stateMutability:n})}get selector(){return Fr(this.format("sighash")).substring(0,10)}format(e){if(null==e&&(e="sighash"),"json"===e)return JSON.stringify({type:"function",name:this.name,constant:this.constant,stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:void 0,payable:this.payable,gas:null!=this.gas?this.gas:void 0,inputs:this.inputs.map((t=>JSON.parse(t.format(e)))),outputs:this.outputs.map((t=>JSON.parse(t.format(e))))});const t=[];return"sighash"!==e&&t.push("function"),t.push(this.name+Jl(e,this.inputs)),"sighash"!==e&&("nonpayable"!==this.stateMutability&&t.push(this.stateMutability),this.outputs&&this.outputs.length&&(t.push("returns"),t.push(Jl(e,this.outputs))),null!=this.gas&&t.push(`@${this.gas.toString()}`)),t.join(" ")}static getSelector(e,t){return t=(t||[]).map((e=>Ql.from(e))),new Xl(Fl,e,"view",t,[],null).selector}static from(e){if(Xl.isFragment(e))return e;if("string"==typeof e)try{return Xl.from(Sl(e))}catch(t){nn(!1,"invalid function fragment","obj",e)}else if(e instanceof Nl){const t=Pl("function",e),n=Tl(e),r=Il(e);let a=[];Rl(e,cl(["returns"])).has("returns")&&(a=Tl(e));const s=Ol(e);return Bl(e),new Xl(Fl,t,r,n,a,s)}let t=e.stateMutability;return null==t&&(t="payable","boolean"==typeof e.constant?(t="view",e.constant||(t="payable","boolean"!=typeof e.payable||e.payable||(t="nonpayable"))):"boolean"!=typeof e.payable||e.payable||(t="nonpayable")),new Xl(Fl,e.name,t,e.inputs?e.inputs.map(Ql.from):[],e.outputs?e.outputs.map(Ql.from):[],null!=e.gas?e.gas:null)}static isFragment(e){return e&&e[Dl]===Hl}}class eu extends Wl{constructor(e,t,n){super(e,"struct",t,n),Object.defineProperty(this,Dl,{value:Vl})}format(){throw new Error("@TODO")}static from(e){if("string"==typeof e)try{return eu.from(Sl(e))}catch(t){nn(!1,"invalid struct fragment","obj",e)}else if(e instanceof Nl){const t=Pl("struct",e),n=Tl(e);return Bl(e),new eu(Fl,t,n)}return new eu(Fl,e.name,e.inputs?e.inputs.map(Ql.from):[])}static isFragment(e){return e&&e[Dl]===Vl}}const tu=new Map;tu.set(0,"GENERIC_PANIC"),tu.set(1,"ASSERT_FALSE"),tu.set(17,"OVERFLOW"),tu.set(18,"DIVIDE_BY_ZERO"),tu.set(33,"ENUM_RANGE_ERROR"),tu.set(34,"BAD_STORAGE_DATA"),tu.set(49,"STACK_UNDERFLOW"),tu.set(50,"ARRAY_RANGE_ERROR"),tu.set(65,"OUT_OF_MEMORY"),tu.set(81,"UNINITIALIZED_FUNCTION_CALL");const nu=new RegExp(/^bytes([0-9]*)$/),ru=new RegExp(/^(u?int)([0-9]*)$/);let au=null,su=1024;class iu{#Z(e){if(e.isArray())return new Zo(this.#Z(e.arrayChildren),e.arrayLength,e.name);if(e.isTuple())return new ul(e.components.map((e=>this.#Z(e))),e.name);switch(e.baseType){case"address":return new Wo(e.name);case"bool":return new $o(e.name);case"string":return new ll(e.name);case"bytes":return new el(e.name);case"":return new rl(e.name)}let t=e.type.match(ru);if(t){let n=parseInt(t[2]||"256");return nn(0!==n&&n<=256&&n%8==0,"invalid "+t[1]+" bit length","param",e),new ol(n/8,"int"===t[1],e.name)}if(t=e.type.match(nu),t){let n=parseInt(t[1]);return nn(0!==n&&n<=32,"invalid bytes length","param",e),new tl(n,e.name)}nn(!1,"invalid type","type",e.type)}getDefaultValue(e){const t=e.map((e=>this.#Z(Ql.from(e))));return new ul(t,"_").defaultValue()}encode(e,t){rn(t.length,e.length,"types/values length mismatch");const n=e.map((e=>this.#Z(Ql.from(e)))),r=new ul(n,"_"),a=new zo;return r.encode(a,t),a.data}decode(e,t,n){const r=e.map((e=>this.#Z(Ql.from(e))));return new ul(r,"_").decode(new _o(t,n,su))}static _setDefaultMaxInflation(e){nn("number"==typeof e&&Number.isInteger(e),"invalid defaultMaxInflation factor","value",e),su=e}static defaultAbiCoder(){return null==au&&(au=new iu),au}static getBuiltinCallException(e,t,n){return function(e,t,n,r){let a="missing revert data",s=null,i=null;if(n){a="execution reverted";const e=un(n);if(n=pn(n),0===e.length)a+=" (no data present; likely require(false) occurred",s="require(false)";else if(e.length%32!=4)a+=" (could not decode reason; invalid data length)";else if("0x08c379a0"===pn(e.slice(0,4)))try{s=r.decode(["string"],e.slice(4))[0],i={signature:"Error(string)",name:"Error",args:[s]},a+=`: ${JSON.stringify(s)}`}catch(e){a+=" (could not decode reason; invalid string data)"}else if("0x4e487b71"===pn(e.slice(0,4)))try{const t=Number(r.decode(["uint256"],e.slice(4))[0]);i={signature:"Panic(uint256)",name:"Panic",args:[t]},s=`Panic due to ${tu.get(t)||"UNKNOWN"}(${t})`,a+=`: ${s}`}catch(e){a+=" (could not decode panic code)"}else a+=" (unknown custom error)"}const o={to:t.to?xr(t.to):null,data:t.data||"0x"};return t.from&&(o.from=xr(t.from)),en(a,"CALL_EXCEPTION",{action:e,data:n,reason:s,transaction:o,invocation:null,revert:i})}(e,t,n,iu.defaultAbiCoder())}}function ou(e){return async function(t,n){tn(null==n||!n.cancelled,"request cancelled before sending","CANCELLED");const r=t.url.split(":")[0].toLowerCase();tn("http"===r||"https"===r,`unsupported protocol ${r}`,"UNSUPPORTED_OPERATION",{info:{protocol:r},operation:"request"}),tn("https"===r||!t.credentials||t.allowInsecureAuthentication,"insecure authorized connections unsupported","UNSUPPORTED_OPERATION",{operation:"request"});let a=null;const s=new AbortController,i=setTimeout((()=>{a=en("request timeout","TIMEOUT"),s.abort()}),t.timeout);n&&n.addListener((()=>{a=en("request cancelled","CANCELLED"),s.abort()}));const o=Object.assign({},e,{method:t.method,headers:new Headers(Array.from(t)),body:t.body||void 0,signal:s.signal});let l;try{l=await fetch(t.url,o)}catch(e){if(clearTimeout(i),a)throw a;throw e}clearTimeout(i);const u={};l.headers.forEach(((e,t)=>{u[t.toLowerCase()]=e}));const c=await l.arrayBuffer(),d=null==c?null:new Uint8Array(c);return{statusCode:l.status,statusMessage:l.statusText,headers:u,body:d}}}ou({});let lu=ou();const uu=new RegExp("^data:([^;:]*)?(;base64)?,(.*)$","i"),cu=new RegExp("^ipfs://(ipfs/)?(.*)$","i");let du=!1;async function fu(e,t){try{const t=e.match(uu);if(!t)throw new Error("invalid data");return new bu(200,"OK",{"content-type":t[1]||"text/plain"},t[2]?function(e){e=atob(e);const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return un(t)}(t[3]):Ir(t[3].replace(/%([0-9a-f][0-9a-f])/gi,((e,t)=>String.fromCharCode(parseInt(t,16))))))}catch(t){return new bu(599,"BAD REQUEST (invalid data: URI)",{},null,new wu(e))}}function hu(e){return async function(t,n){try{const n=t.match(cu);if(!n)throw new Error("invalid link");return new wu(`${e}${n[2]}`)}catch(e){return new bu(599,"BAD REQUEST (invalid IPFS URI)",{},null,new wu(t))}}}const pu={data:fu,ipfs:hu("https://gateway.ipfs.io/ipfs/")},gu=new WeakMap;class mu{#$;#X;constructor(e){this.#$=[],this.#X=!1,gu.set(e,(()=>{if(!this.#X){this.#X=!0;for(const e of this.#$)setTimeout((()=>{e()}),0);this.#$=[]}}))}addListener(e){tn(!this.#X,"singal already cancelled","UNSUPPORTED_OPERATION",{operation:"fetchCancelSignal.addCancelListener"}),this.#$.push(e)}get cancelled(){return this.#X}checkSignal(){tn(!this.cancelled,"cancelled","CANCELLED",{})}}function yu(e){if(null==e)throw new Error("missing signal; should not happen");return e.checkSignal(),e}class wu{#ee;#te;#ne;#re;#ae;#se;#ie;#oe;#le;#ue;#ce;#de;#fe;#he;#pe;get url(){return this.#se}set url(e){this.#se=String(e)}get body(){return null==this.#ie?null:new Uint8Array(this.#ie)}set body(e){if(null==e)this.#ie=void 0,this.#oe=void 0;else if("string"==typeof e)this.#ie=Ir(e),this.#oe="text/plain";else if(e instanceof Uint8Array)this.#ie=e,this.#oe="application/octet-stream";else{if("object"!=typeof e)throw new Error("invalid body");this.#ie=Ir(JSON.stringify(e)),this.#oe="application/json"}}hasBody(){return null!=this.#ie}get method(){return this.#re?this.#re:this.hasBody()?"POST":"GET"}set method(e){null==e&&(e=""),this.#re=String(e).toUpperCase()}get headers(){const e=Object.assign({},this.#ne);return this.#le&&(e.authorization=`Basic ${function(e){const t=un(e);let n="";for(let e=0;e<t.length;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(Ir(this.#le))}`),this.allowGzip&&(e["accept-encoding"]="gzip"),null==e["content-type"]&&this.#oe&&(e["content-type"]=this.#oe),this.body&&(e["content-length"]=String(this.body.length)),e}getHeader(e){return this.headers[e.toLowerCase()]}setHeader(e,t){this.#ne[String(e).toLowerCase()]=String(t)}clearHeaders(){this.#ne={}}[Symbol.iterator](){const e=this.headers,t=Object.keys(e);let n=0;return{next:()=>{if(n<t.length){const r=t[n++];return{value:[r,e[r]],done:!1}}return{value:void 0,done:!0}}}}get credentials(){return this.#le||null}setCredentials(e,t){nn(!e.match(/:/),"invalid basic authentication username","username","[REDACTED]"),this.#le=`${e}:${t}`}get allowGzip(){return this.#te}set allowGzip(e){this.#te=!!e}get allowInsecureAuthentication(){return!!this.#ee}set allowInsecureAuthentication(e){this.#ee=!!e}get timeout(){return this.#ae}set timeout(e){nn(e>=0,"timeout must be non-zero","timeout",e),this.#ae=e}get preflightFunc(){return this.#ue||null}set preflightFunc(e){this.#ue=e}get processFunc(){return this.#ce||null}set processFunc(e){this.#ce=e}get retryFunc(){return this.#de||null}set retryFunc(e){this.#de=e}get getUrlFunc(){return this.#pe||lu}set getUrlFunc(e){this.#pe=e}constructor(e){this.#se=String(e),this.#ee=!1,this.#te=!0,this.#ne={},this.#re="",this.#ae=3e5,this.#he={slotInterval:250,maxAttempts:12},this.#pe=null}toString(){return`<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#ie?pn(this.#ie):"null"}>`}setThrottleParams(e){null!=e.slotInterval&&(this.#he.slotInterval=e.slotInterval),null!=e.maxAttempts&&(this.#he.maxAttempts=e.maxAttempts)}async#ge(e,t,n,r,a){if(e>=this.#he.maxAttempts)return a.makeServerError("exceeded maximum retry limit");tn(vu()<=t,"timeout","TIMEOUT",{operation:"request.send",reason:"timeout",request:r}),n>0&&await function(e){return new Promise((t=>setTimeout(t,e)))}(n);let s=this.clone();const i=(s.url.split(":")[0]||"").toLowerCase();if(i in pu){const e=await pu[i](s.url,yu(r.#fe));if(e instanceof bu){let t=e;if(this.processFunc){yu(r.#fe);try{t=await this.processFunc(s,t)}catch(e){null!=e.throttle&&"number"==typeof e.stall||t.makeServerError("error in post-processing function",e).assertOk()}}return t}s=e}this.preflightFunc&&(s=await this.preflightFunc(s));const o=await this.getUrlFunc(s,yu(r.#fe));let l=new bu(o.statusCode,o.statusMessage,o.headers,o.body,r);if(301===l.statusCode||302===l.statusCode){try{const n=l.headers.location||"";return s.redirect(n).#ge(e+1,t,0,r,l)}catch(e){}return l}if(429===l.statusCode&&(null==this.retryFunc||await this.retryFunc(s,l,e))){const n=l.headers["retry-after"];let a=this.#he.slotInterval*Math.trunc(Math.random()*Math.pow(2,e));return"string"==typeof n&&n.match(/^[1-9][0-9]*$/)&&(a=parseInt(n)),s.clone().#ge(e+1,t,a,r,l)}if(this.processFunc){yu(r.#fe);try{l=await this.processFunc(s,l)}catch(n){null!=n.throttle&&"number"==typeof n.stall||l.makeServerError("error in post-processing function",n).assertOk();let a=this.#he.slotInterval*Math.trunc(Math.random()*Math.pow(2,e));return n.stall>=0&&(a=n.stall),s.clone().#ge(e+1,t,a,r,l)}}return l}send(){return tn(null==this.#fe,"request already sent","UNSUPPORTED_OPERATION",{operation:"fetchRequest.send"}),this.#fe=new mu(this),this.#ge(0,vu()+this.timeout,0,this,new bu(0,"",{},null,this))}cancel(){tn(null!=this.#fe,"request has not been sent","UNSUPPORTED_OPERATION",{operation:"fetchRequest.cancel"});const e=gu.get(this);if(!e)throw new Error("missing signal; should not happen");e()}redirect(e){const t=this.url.split(":")[0].toLowerCase(),n=e.split(":")[0].toLowerCase();tn("GET"===this.method&&("https"!==t||"http"!==n)&&e.match(/^https?:/),"unsupported redirect","UNSUPPORTED_OPERATION",{operation:`redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(e)})`});const r=new wu(e);return r.method="GET",r.allowGzip=this.allowGzip,r.timeout=this.timeout,r.#ne=Object.assign({},this.#ne),this.#ie&&(r.#ie=new Uint8Array(this.#ie)),r.#oe=this.#oe,r}clone(){const e=new wu(this.url);return e.#re=this.#re,this.#ie&&(e.#ie=this.#ie),e.#oe=this.#oe,e.#ne=Object.assign({},this.#ne),e.#le=this.#le,this.allowGzip&&(e.allowGzip=!0),e.timeout=this.timeout,this.allowInsecureAuthentication&&(e.allowInsecureAuthentication=!0),e.#ue=this.#ue,e.#ce=this.#ce,e.#de=this.#de,e.#he=Object.assign({},this.#he),e.#pe=this.#pe,e}static lockConfig(){du=!0}static getGateway(e){return pu[e.toLowerCase()]||null}static registerGateway(e,t){if("http"===(e=e.toLowerCase())||"https"===e)throw new Error(`cannot intercept ${e}; use registerGetUrl`);if(du)throw new Error("gateways locked");pu[e]=t}static registerGetUrl(e){if(du)throw new Error("gateways locked");lu=e}static createGetUrlFunc(e){return ou(e)}static createDataGateway(){return fu}static createIpfsGatewayFunc(e){return hu(e)}}class bu{#me;#ye;#ne;#ie;#we;#be;toString(){return`<FetchResponse status=${this.statusCode} body=${this.#ie?pn(this.#ie):"null"}>`}get statusCode(){return this.#me}get statusMessage(){return this.#ye}get headers(){return Object.assign({},this.#ne)}get body(){return null==this.#ie?null:new Uint8Array(this.#ie)}get bodyText(){try{return null==this.#ie?"":Tr(this.#ie)}catch(e){tn(!1,"response body is not valid UTF-8 data","UNSUPPORTED_OPERATION",{operation:"bodyText",info:{response:this}})}}get bodyJson(){try{return JSON.parse(this.bodyText)}catch(e){tn(!1,"response body is not valid JSON","UNSUPPORTED_OPERATION",{operation:"bodyJson",info:{response:this}})}}[Symbol.iterator](){const e=this.headers,t=Object.keys(e);let n=0;return{next:()=>{if(n<t.length){const r=t[n++];return{value:[r,e[r]],done:!1}}return{value:void 0,done:!0}}}}constructor(e,t,n,r,a){this.#me=e,this.#ye=t,this.#ne=Object.keys(n).reduce(((e,t)=>(e[t.toLowerCase()]=String(n[t]),e)),{}),this.#ie=null==r?null:new Uint8Array(r),this.#we=a||null,this.#be={message:""}}makeServerError(e,t){let n;n=e?`CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${e})`:`CLIENT ESCALATED SERVER ERROR (${e=`${this.statusCode} ${this.statusMessage}`})`;const r=new bu(599,n,this.headers,this.body,this.#we||void 0);return r.#be={message:e,error:t},r}throwThrottleError(e,t){null==t?t=-1:nn(Number.isInteger(t)&&t>=0,"invalid stall timeout","stall",t);const n=new Error(e||"throttling requests");throw Yt(n,{stall:t,throttle:!0}),n}getHeader(e){return this.headers[e.toLowerCase()]}hasBody(){return null!=this.#ie}get request(){return this.#we}ok(){return""===this.#be.message&&this.statusCode>=200&&this.statusCode<300}assertOk(){if(this.ok())return;let{message:e,error:t}=this.#be;""===e&&(e=`server response ${this.statusCode} ${this.statusMessage}`);let n=null;this.request&&(n=this.request.url);let r=null;try{this.#ie&&(r=Tr(this.#ie))}catch(e){}tn(!1,e,"SERVER_ERROR",{request:this.request||"unknown request",response:this,error:t,info:{requestUrl:n,responseBody:r,responseStatus:`${this.statusCode} ${this.statusMessage}`}})}}function vu(){return(new Date).getTime()}class Au{fragment;name;signature;topic;args;constructor(e,t,n){const r=e.name,a=e.format();Yt(this,{fragment:e,name:r,signature:a,topic:t,args:n})}}class Eu{fragment;name;args;signature;selector;value;constructor(e,t,n,r){const a=e.name,s=e.format();Yt(this,{fragment:e,name:a,args:n,signature:s,selector:t,value:r})}}class ku{fragment;name;args;signature;selector;constructor(e,t,n){const r=e.name,a=e.format();Yt(this,{fragment:e,name:r,args:n,signature:a,selector:t})}}class xu{hash;_isIndexed;static isIndexed(e){return!(!e||!e._isIndexed)}constructor(e){Yt(this,{hash:e,_isIndexed:!0})}}const Nu={0:"generic panic",1:"assert(false)",17:"arithmetic overflow",18:"division or modulo by zero",33:"enum overflow",34:"invalid encoded storage byte array accessed",49:"out-of-bounds array access; popping on an empty array",50:"out-of-bounds access of an array or bytesN",65:"out of memory",81:"uninitialized function"},Su={"0x08c379a0":{signature:"Error(string)",name:"Error",inputs:["string"],reason:e=>`reverted with reason string ${JSON.stringify(e)}`},"0x4e487b71":{signature:"Panic(uint256)",name:"Panic",inputs:["uint256"],reason:e=>{let t="unknown panic code";return e>=0&&e<=255&&Nu[e.toString()]&&(t=Nu[e.toString()]),`reverted with panic code 0x${e.toString(16)} (${t})`}}};class Cu{fragments;deploy;fallback;receive;#ve;#Ae;#Ee;#ke;constructor(e){let t=[];t="string"==typeof e?JSON.parse(e):e,this.#Ee=new Map,this.#ve=new Map,this.#Ae=new Map;const n=[];for(const e of t)try{n.push(Kl.from(e))}catch(t){console.log(`[Warning] Invalid Fragment ${JSON.stringify(e)}:`,t.message)}Yt(this,{fragments:Object.freeze(n)});let r=null,a=!1;this.#ke=this.getAbiCoder(),this.fragments.forEach(((e,t)=>{let n;switch(e.type){case"constructor":return this.deploy?void console.log("duplicate definition - constructor"):void Yt(this,{deploy:e});case"fallback":return void(0===e.inputs.length?a=!0:(nn(!r||e.payable!==r.payable,"conflicting fallback fragments",`fragments[${t}]`,e),r=e,a=r.payable));case"function":n=this.#Ee;break;case"event":n=this.#Ae;break;case"error":n=this.#ve;break;default:return}const s=e.format();n.has(s)||n.set(s,e)})),this.deploy||Yt(this,{deploy:Zl.from("constructor()")}),Yt(this,{fallback:r,receive:a})}format(e){const t=e?"minimal":"full",n=this.fragments.map((e=>e.format(t)));return n}formatJson(){const e=this.fragments.map((e=>e.format("json")));return JSON.stringify(e.map((e=>JSON.parse(e))))}getAbiCoder(){return iu.defaultAbiCoder()}#xe(e,t,n){if(dn(e)){const t=e.toLowerCase();for(const e of this.#Ee.values())if(t===e.selector)return e;return null}if(-1===e.indexOf("(")){const r=[];for(const[t,n]of this.#Ee)t.split("(")[0]===e&&r.push(n);if(t){const e=t.length>0?t[t.length-1]:null;let n=t.length,a=!0;Ko.isTyped(e)&&"overrides"===e.type&&(a=!1,n--);for(let e=r.length-1;e>=0;e--){const t=r[e].inputs.length;t===n||a&&t===n-1||r.splice(e,1)}for(let e=r.length-1;e>=0;e--){const n=r[e].inputs;for(let a=0;a<t.length;a++)if(Ko.isTyped(t[a])){if(a>=n.length){if("overrides"===t[a].type)continue;r.splice(e,1);break}if(t[a].type!==n[a].baseType){r.splice(e,1);break}}}}if(1===r.length&&t&&t.length!==r[0].inputs.length){const e=t[t.length-1];(null==e||Array.isArray(e)||"object"!=typeof e)&&r.splice(0,1)}return 0===r.length?null:(r.length>1&&n&&nn(!1,`ambiguous function description (i.e. matches ${r.map((e=>JSON.stringify(e.format()))).join(", ")})`,"key",e),r[0])}return this.#Ee.get(Xl.from(e).format())||null}getFunctionName(e){const t=this.#xe(e,null,!1);return nn(t,"no matching function","key",e),t.name}hasFunction(e){return!!this.#xe(e,null,!1)}getFunction(e,t){return this.#xe(e,t||null,!0)}forEachFunction(e){const t=Array.from(this.#Ee.keys());t.sort(((e,t)=>e.localeCompare(t)));for(let n=0;n<t.length;n++){const r=t[n];e(this.#Ee.get(r),n)}}#Ne(e,t,n){if(dn(e)){const t=e.toLowerCase();for(const e of this.#Ae.values())if(t===e.topicHash)return e;return null}if(-1===e.indexOf("(")){const r=[];for(const[t,n]of this.#Ae)t.split("(")[0]===e&&r.push(n);if(t){for(let e=r.length-1;e>=0;e--)r[e].inputs.length<t.length&&r.splice(e,1);for(let e=r.length-1;e>=0;e--){const n=r[e].inputs;for(let a=0;a<t.length;a++)if(Ko.isTyped(t[a])&&t[a].type!==n[a].baseType){r.splice(e,1);break}}}return 0===r.length?null:(r.length>1&&n&&nn(!1,`ambiguous event description (i.e. matches ${r.map((e=>JSON.stringify(e.format()))).join(", ")})`,"key",e),r[0])}return this.#Ae.get(Yl.from(e).format())||null}getEventName(e){const t=this.#Ne(e,null,!1);return nn(t,"no matching event","key",e),t.name}hasEvent(e){return!!this.#Ne(e,null,!1)}getEvent(e,t){return this.#Ne(e,t||null,!0)}forEachEvent(e){const t=Array.from(this.#Ae.keys());t.sort(((e,t)=>e.localeCompare(t)));for(let n=0;n<t.length;n++){const r=t[n];e(this.#Ae.get(r),n)}}getError(e,t){if(dn(e)){const t=e.toLowerCase();if(Su[t])return ql.from(Su[t].signature);for(const e of this.#ve.values())if(t===e.selector)return e;return null}if(-1===e.indexOf("(")){const t=[];for(const[n,r]of this.#ve)n.split("(")[0]===e&&t.push(r);return 0===t.length?"Error"===e?ql.from("error Error(string)"):"Panic"===e?ql.from("error Panic(uint256)"):null:(t.length>1&&nn(!1,`ambiguous error description (i.e. ${t.map((e=>JSON.stringify(e.format()))).join(", ")})`,"name",e),t[0])}if("Error(string)"===(e=ql.from(e).format()))return ql.from("error Error(string)");if("Panic(uint256)"===e)return ql.from("error Panic(uint256)");return this.#ve.get(e)||null}forEachError(e){const t=Array.from(this.#ve.keys());t.sort(((e,t)=>e.localeCompare(t)));for(let n=0;n<t.length;n++){const r=t[n];e(this.#ve.get(r),n)}}_decodeParams(e,t){return this.#ke.decode(e,t)}_encodeParams(e,t){return this.#ke.encode(e,t)}encodeDeploy(e){return this._encodeParams(this.deploy.inputs,e||[])}decodeErrorResult(e,t){if("string"==typeof e){const t=this.getError(e);nn(t,"unknown error","fragment",e),e=t}return nn(yn(t,0,4)===e.selector,`data signature does not match error ${e.name}.`,"data",t),this._decodeParams(e.inputs,yn(t,4))}encodeErrorResult(e,t){if("string"==typeof e){const t=this.getError(e);nn(t,"unknown error","fragment",e),e=t}return gn([e.selector,this._encodeParams(e.inputs,t||[])])}decodeFunctionData(e,t){if("string"==typeof e){const t=this.getFunction(e);nn(t,"unknown function","fragment",e),e=t}return nn(yn(t,0,4)===e.selector,`data signature does not match function ${e.name}.`,"data",t),this._decodeParams(e.inputs,yn(t,4))}encodeFunctionData(e,t){if("string"==typeof e){const t=this.getFunction(e);nn(t,"unknown function","fragment",e),e=t}return gn([e.selector,this._encodeParams(e.inputs,t||[])])}decodeFunctionResult(e,t){if("string"==typeof e){const t=this.getFunction(e);nn(t,"unknown function","fragment",e),e=t}let n="invalid length for result data";const r=cn(t);if(r.length%32==0)try{return this.#ke.decode(e.outputs,r)}catch(e){n="could not decode result data"}tn(!1,n,"BAD_DATA",{value:pn(r),info:{method:e.name,signature:e.format()}})}makeError(e,t){const n=un(e,"data"),r=iu.getBuiltinCallException("call",t,n);if(r.message.startsWith("execution reverted (unknown custom error)")){const e=pn(n.slice(0,4)),t=this.getError(e);if(t)try{const e=this.#ke.decode(t.inputs,n.slice(4));r.revert={name:t.name,signature:t.format(),args:e},r.reason=r.revert.signature,r.message=`execution reverted: ${r.reason}`}catch(e){r.message="execution reverted (coult not decode custom error)"}}const a=this.parseTransaction(t);return a&&(r.invocation={method:a.name,signature:a.signature,args:a.args}),r}encodeFunctionResult(e,t){if("string"==typeof e){const t=this.getFunction(e);nn(t,"unknown function","fragment",e),e=t}return pn(this.#ke.encode(e.outputs,t||[]))}encodeFilterTopics(e,t){if("string"==typeof e){const t=this.getEvent(e);nn(t,"unknown event","eventFragment",e),e=t}tn(t.length<=e.inputs.length,`too many arguments for ${e.format()}`,"UNEXPECTED_ARGUMENT",{count:t.length,expectedCount:e.inputs.length});const n=[];e.anonymous||n.push(e.topicHash);const r=(e,t)=>"string"===e.type?Fr(t):"bytes"===e.type?wr(pn(t)):("bool"===e.type&&"boolean"==typeof t?t=t?"0x01":"0x00":e.type.match(/^u?int/)?t=Tn(t):e.type.match(/^bytes/)?t=wn(t,32,!1):"address"===e.type&&this.#ke.encode(["address"],[t]),bn(pn(t),32));for(t.forEach(((t,a)=>{const s=e.inputs[a];s.indexed?null==t?n.push(null):"array"===s.baseType||"tuple"===s.baseType?nn(!1,"filtering with tuples or arrays not supported","contract."+s.name,t):Array.isArray(t)?n.push(t.map((e=>r(s,e)))):n.push(r(s,t)):nn(null==t,"cannot filter non-indexed parameters; must be null","contract."+s.name,t)}));n.length&&null===n[n.length-1];)n.pop();return n}encodeEventLog(e,t){if("string"==typeof e){const t=this.getEvent(e);nn(t,"unknown event","eventFragment",e),e=t}const n=[],r=[],a=[];return e.anonymous||n.push(e.topicHash),nn(t.length===e.inputs.length,"event arguments/values mismatch","values",t),e.inputs.forEach(((e,s)=>{const i=t[s];if(e.indexed)if("string"===e.type)n.push(Fr(i));else if("bytes"===e.type)n.push(wr(i));else{if("tuple"===e.baseType||"array"===e.baseType)throw new Error("not implemented");n.push(this.#ke.encode([e.type],[i]))}else r.push(e),a.push(i)})),{data:this.#ke.encode(r,a),topics:n}}decodeEventLog(e,t,n){if("string"==typeof e){const t=this.getEvent(e);nn(t,"unknown event","eventFragment",e),e=t}if(null!=n&&!e.anonymous){const t=e.topicHash;nn(dn(n[0],32)&&n[0].toLowerCase()===t,"fragment/topic mismatch","topics[0]",n[0]),n=n.slice(1)}const r=[],a=[],s=[];e.inputs.forEach(((e,t)=>{e.indexed?"string"===e.type||"bytes"===e.type||"tuple"===e.baseType||"array"===e.baseType?(r.push(Ql.from({type:"bytes32",name:e.name})),s.push(!0)):(r.push(e),s.push(!1)):(a.push(e),s.push(!1))}));const i=null!=n?this.#ke.decode(r,gn(n)):null,o=this.#ke.decode(a,t,!0),l=[],u=[];let c=0,d=0;return e.inputs.forEach(((e,t)=>{let n=null;if(e.indexed)if(null==i)n=new xu(null);else if(s[t])n=new xu(i[d++]);else try{n=i[d++]}catch(e){n=e}else try{n=o[c++]}catch(e){n=e}l.push(n),u.push(e.name||null)})),Do.fromItems(l,u)}parseTransaction(e){const t=un(e.data,"tx.data"),n=Sn(null!=e.value?e.value:0,"tx.value"),r=this.getFunction(pn(t.slice(0,4)));if(!r)return null;const a=this.#ke.decode(r.inputs,t.slice(4));return new Eu(r,r.selector,a,n)}parseCallResult(e){throw new Error("@TODO")}parseLog(e){const t=this.getEvent(e.topics[0]);return!t||t.anonymous?null:new Au(t,t.topicHash,this.decodeEventLog(t,e.data,e.topics))}parseError(e){const t=pn(e),n=this.getError(yn(t,0,4));if(!n)return null;const r=this.#ke.decode(n.inputs,yn(t,4));return new ku(n,n.selector,r)}static from(e){return e instanceof Cu?e:"string"==typeof e?new Cu(JSON.parse(e)):"function"==typeof e.formatJson?new Cu(e.formatJson()):"function"==typeof e.format?new Cu(e.format("json")):new Cu(e)}}class Pu{filter;emitter;#Se;constructor(e,t,n){this.#Se=t,Yt(this,{emitter:e,filter:n})}async removeListener(){null!=this.#Se&&await this.emitter.off(this.filter,this.#Se)}}class Ru extends Ya{interface;fragment;args;constructor(e,t,n){super(e,e.provider),Yt(this,{args:t.decodeEventLog(n,e.data,e.topics),fragment:n,interface:t})}get eventName(){return this.fragment.name}get eventSignature(){return this.fragment.format()}}class Iu extends Ya{error;constructor(e,t){super(e,e.provider),Yt(this,{error:t})}}class Tu extends Za{#Ce;constructor(e,t,n){super(n,t),this.#Ce=e}get logs(){return super.logs.map((e=>{const t=e.topics.length?this.#Ce.getEvent(e.topics[0]):null;if(t)try{return new Ru(e,this.#Ce,t)}catch(t){return new Iu(e,t)}return e}))}}class Ou extends $a{#Ce;constructor(e,t,n){super(n,t),this.#Ce=e}async wait(e,t){const n=await super.wait(e,t);return null==n?null:new Tu(this.#Ce,this.provider,n)}}class Bu extends Pu{log;constructor(e,t,n,r){super(e,t,n),Yt(this,{log:r})}async getBlock(){return await this.log.getBlock()}async getTransaction(){return await this.log.getTransaction()}async getTransactionReceipt(){return await this.log.getTransactionReceipt()}}class Lu extends Bu{constructor(e,t,n,r,a){super(e,t,n,new Ru(a,e.interface,r)),Yt(this,{args:e.interface.decodeEventLog(r,this.log.data,this.log.topics),fragment:r})}get eventName(){return this.fragment.name}get eventSignature(){return this.fragment.format()}}const Uu=BigInt(0);function Fu(e){return e&&"function"==typeof e.call}function Du(e){return e&&"function"==typeof e.estimateGas}function Mu(e){return e&&"function"==typeof e.resolveName}function ju(e){return e&&"function"==typeof e.sendTransaction}function zu(e){if(null!=e){if(Mu(e))return e;if(e.provider)return e.provider}}class _u{#Pe;fragment;constructor(e,t,n){if(Yt(this,{fragment:t}),t.inputs.length<n.length)throw new Error("too many arguments");const r=Gu(e.runner,"resolveName"),a=Mu(r)?r:null;this.#Pe=async function(){const r=await Promise.all(t.inputs.map(((e,t)=>null==n[t]?null:e.walkAsync(n[t],((e,t)=>"address"===e?Array.isArray(t)?Promise.all(t.map((e=>Cr(e,a)))):Cr(t,a):t)))));return e.interface.encodeFilterTopics(t,r)}()}getTopicFilter(){return this.#Pe}}function Gu(e,t){return null==e?null:"function"==typeof e[t]?e:e.provider&&"function"==typeof e.provider[t]?e.provider:null}function Hu(e){return null==e?null:e.provider||null}async function Vu(e,t){const n=Ko.dereference(e,"overrides");nn("object"==typeof n,"invalid overrides parameter","overrides",e);const r=Ja(n);return nn(null==r.to||(t||[]).indexOf("to")>=0,"cannot override to","overrides.to",r.to),nn(null==r.data||(t||[]).indexOf("data")>=0,"cannot override data","overrides.data",r.data),r.from&&(r.from=r.from),r}function Qu(e){const t=async function(t){const n=await Vu(t,["data"]);n.to=await e.getAddress(),n.from&&(n.from=await Cr(n.from,zu(e.runner)));const r=e.interface,a=Sn(n.value||Uu,"overrides.value")===Uu,s="0x"===(n.data||"0x");return!r.fallback||r.fallback.payable||!r.receive||s||a||nn(!1,"cannot send data to receive or send value to non-payable fallback","overrides",t),nn(r.fallback||s,"cannot send data to receive-only contract","overrides.data",n.data),nn(r.receive||r.fallback&&r.fallback.payable||a,"cannot send value to non-payable fallback","overrides.value",n.value),nn(r.fallback||s,"cannot send data to receive-only contract","overrides.data",n.data),n},n=async function(n){const r=e.runner;tn(ju(r),"contract runner does not support sending transactions","UNSUPPORTED_OPERATION",{operation:"sendTransaction"});const a=await r.sendTransaction(await t(n)),s=Hu(e.runner);return new Ou(e.interface,s,a)},r=async e=>await n(e);return Yt(r,{_contract:e,estimateGas:async function(n){const r=Gu(e.runner,"estimateGas");return tn(Du(r),"contract runner does not support gas estimation","UNSUPPORTED_OPERATION",{operation:"estimateGas"}),await r.estimateGas(await t(n))},populateTransaction:t,send:n,staticCall:async function(n){const r=Gu(e.runner,"call");tn(Fu(r),"contract runner does not support calling","UNSUPPORTED_OPERATION",{operation:"call"});const a=await t(n);try{return await r.call(a)}catch(t){if(Xt(t)&&t.data)throw e.interface.makeError(t.data,a);throw t}}}),r}const Ku=Symbol.for("_ethersInternal_contract"),Wu=new WeakMap;function Ju(e){return Wu.get(e[Ku])}async function qu(e,t){let n,r=null;if(Array.isArray(t)){const r=function(t){if(dn(t,32))return t;const n=e.interface.getEvent(t);return nn(n,"unknown fragment","name",t),n.topicHash};n=t.map((e=>null==e?null:Array.isArray(e)?e.map(r):r(e)))}else"*"===t?n=[null]:"string"==typeof t?dn(t,32)?n=[t]:(r=e.interface.getEvent(t),nn(r,"unknown fragment","event",t),n=[r.topicHash]):(a=t)&&"object"==typeof a&&"getTopicFilter"in a&&"function"==typeof a.getTopicFilter&&a.fragment?n=await t.getTopicFilter():"fragment"in t?(r=t.fragment,n=[r.topicHash]):nn(!1,"unknown event name","event",t);var a;return n=n.map((e=>{if(null==e)return null;if(Array.isArray(e)){const t=Array.from(new Set(e.map((e=>e.toLowerCase()))).values());return 1===t.length?t[0]:(t.sort(),t)}return e.toLowerCase()})),{fragment:r,tag:n.map((e=>null==e?"null":Array.isArray(e)?e.join("|"):e)).join("&"),topics:n}}async function Yu(e,t){const{subs:n}=Ju(e);return n.get((await qu(e,t)).tag)||null}async function Zu(e,t,n){const r=Hu(e.runner);tn(r,"contract runner does not support subscribing","UNSUPPORTED_OPERATION",{operation:t});const{fragment:a,tag:s,topics:i}=await qu(e,n),{addr:o,subs:l}=Ju(e);let u=l.get(s);if(!u){const t={address:o||e,topics:i},c=t=>{let r=a;if(null==r)try{r=e.interface.getEvent(t.topics[0])}catch(e){}if(r){const s=r,i=a?e.interface.decodeEventLog(a,t.data,t.topics):[];Xu(e,n,i,(r=>new Lu(e,r,n,s,t)))}else Xu(e,n,[],(r=>new Bu(e,r,n,t)))};let d=[];u={tag:s,listeners:[],start:()=>{d.length||d.push(r.on(t,c))},stop:async()=>{if(0==d.length)return;let e=d;d=[],await Promise.all(e),r.off(t,c)}},l.set(s,u)}return u}let $u=Promise.resolve();async function Xu(e,t,n,r){try{await $u}catch(e){}const a=async function(e,t,n,r){await $u;const a=await Yu(e,t);if(!a)return!1;const s=a.listeners.length;return a.listeners=a.listeners.filter((({listener:t,once:a})=>{const s=Array.from(n);r&&s.push(r(a?null:t));try{t.call(e,...s)}catch(e){}return!a})),0===a.listeners.length&&(a.stop(),Ju(e).subs.delete(a.tag)),s>0}(e,t,n,r);return $u=a,await a}const ec=["then"];class tc{target;interface;runner;filters;[Ku];fallback;constructor(e,t,n,r){nn("string"==typeof e||Nr(e),"invalid value for Contract target","target",e),null==n&&(n=null);const a=Cu.from(t);let s;Yt(this,{target:e,runner:n,interface:a}),Object.defineProperty(this,Ku,{value:{}});let i=null,o=null;if(r){const e=Hu(n);o=new Ou(this.interface,e,r)}let l=new Map;if("string"==typeof e)if(dn(e))i=e,s=Promise.resolve(e);else{const t=Gu(n,"resolveName");if(!Mu(t))throw en("contract runner does not support name resolution","UNSUPPORTED_OPERATION",{operation:"resolveName"});s=t.resolveName(e).then((t=>{if(null==t)throw en("an ENS name used for a contract target must be correctly configured","UNCONFIGURED_NAME",{value:e});return Ju(this).addr=t,t}))}else s=e.getAddress().then((e=>{if(null==e)throw new Error("TODO");return Ju(this).addr=e,e}));var u;u={addrPromise:s,addr:i,deployTx:o,subs:l},Wu.set(this[Ku],u);const c=new Proxy({},{get:(e,t,n)=>{if("symbol"==typeof t||ec.indexOf(t)>=0)return Reflect.get(e,t,n);try{return this.getEvent(t)}catch(e){if(!$t(e,"INVALID_ARGUMENT")||"key"!==e.argument)throw e}},has:(e,t)=>ec.indexOf(t)>=0?Reflect.has(e,t):Reflect.has(e,t)||this.interface.hasEvent(String(t))});return Yt(this,{filters:c}),Yt(this,{fallback:a.receive||a.fallback?Qu(this):null}),new Proxy(this,{get:(e,t,n)=>{if("symbol"==typeof t||t in e||ec.indexOf(t)>=0)return Reflect.get(e,t,n);try{return e.getFunction(t)}catch(e){if(!$t(e,"INVALID_ARGUMENT")||"key"!==e.argument)throw e}},has:(e,t)=>"symbol"==typeof t||t in e||ec.indexOf(t)>=0?Reflect.has(e,t):e.interface.hasFunction(t)})}connect(e){return new tc(this.target,this.interface,e)}attach(e){return new tc(e,this.interface,this.runner)}async getAddress(){return await Ju(this).addrPromise}async getDeployedCode(){const e=Hu(this.runner);tn(e,"runner does not support .provider","UNSUPPORTED_OPERATION",{operation:"getDeployedCode"});const t=await e.getCode(await this.getAddress());return"0x"===t?null:t}async waitForDeployment(){const e=this.deploymentTransaction();if(e)return await e.wait(),this;if(null!=await this.getDeployedCode())return this;const t=Hu(this.runner);return tn(null!=t,"contract runner does not support .provider","UNSUPPORTED_OPERATION",{operation:"waitForDeployment"}),new Promise(((e,n)=>{const r=async()=>{try{if(null!=await this.getDeployedCode())return e(this);t.once("block",r)}catch(e){n(e)}};r()}))}deploymentTransaction(){return Ju(this).deployTx}getFunction(e){return"string"!=typeof e&&(e=e.format()),function(e,t){const n=function(...n){const r=e.interface.getFunction(t,n);return tn(r,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t,args:n}}),r},r=async function(...t){const r=n(...t);let a={};if(r.inputs.length+1===t.length&&(a=await Vu(t.pop()),a.from&&(a.from=await Cr(a.from,zu(e.runner)))),r.inputs.length!==t.length)throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");const s=await async function(e,t,n){const r=Gu(e,"resolveName"),a=Mu(r)?r:null;return await Promise.all(t.map(((e,t)=>e.walkAsync(n[t],((e,t)=>(t=Ko.dereference(t,e),"address"===e?Cr(t,a):t))))))}(e.runner,r.inputs,t);return Object.assign({},a,await qt({to:e.getAddress(),data:e.interface.encodeFunctionData(r,s)}))},a=async function(...e){const t=await i(...e);return 1===t.length?t[0]:t},s=async function(...t){const n=e.runner;tn(ju(n),"contract runner does not support sending transactions","UNSUPPORTED_OPERATION",{operation:"sendTransaction"});const a=await n.sendTransaction(await r(...t)),s=Hu(e.runner);return new Ou(e.interface,s,a)},i=async function(...t){const a=Gu(e.runner,"call");tn(Fu(a),"contract runner does not support calling","UNSUPPORTED_OPERATION",{operation:"call"});const s=await r(...t);let i="0x";try{i=await a.call(s)}catch(t){if(Xt(t)&&t.data)throw e.interface.makeError(t.data,s);throw t}const o=n(...t);return e.interface.decodeFunctionResult(o,i)},o=async(...e)=>n(...e).constant?await a(...e):await s(...e);return Yt(o,{name:e.interface.getFunctionName(t),_contract:e,_key:t,getFragment:n,estimateGas:async function(...t){const n=Gu(e.runner,"estimateGas");return tn(Du(n),"contract runner does not support gas estimation","UNSUPPORTED_OPERATION",{operation:"estimateGas"}),await n.estimateGas(await r(...t))},populateTransaction:r,send:s,staticCall:a,staticCallResult:i}),Object.defineProperty(o,"fragment",{configurable:!1,enumerable:!0,get:()=>{const n=e.interface.getFunction(t);return tn(n,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t}}),n}}),o}(this,e)}getEvent(e){return"string"!=typeof e&&(e=e.format()),function(e,t){const n=function(...n){const r=e.interface.getEvent(t,n);return tn(r,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t,args:n}}),r},r=function(...t){return new _u(e,n(...t),t)};return Yt(r,{name:e.interface.getEventName(t),_contract:e,_key:t,getFragment:n}),Object.defineProperty(r,"fragment",{configurable:!1,enumerable:!0,get:()=>{const n=e.interface.getEvent(t);return tn(n,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t}}),n}}),r}(this,e)}async queryTransaction(e){throw new Error("@TODO")}async queryFilter(e,t,n){null==t&&(t=0),null==n&&(n="latest");const{addr:r,addrPromise:a}=Ju(this),s=r||await a,{fragment:i,topics:o}=await qu(this,e),l={address:s,topics:o,fromBlock:t,toBlock:n},u=Hu(this.runner);return tn(u,"contract runner does not have a provider","UNSUPPORTED_OPERATION",{operation:"queryFilter"}),(await u.getLogs(l)).map((e=>{let t=i;if(null==t)try{t=this.interface.getEvent(e.topics[0])}catch(e){}if(t)try{return new Ru(e,this.interface,t)}catch(t){return new Iu(e,t)}return new Ya(e,u)}))}async on(e,t){const n=await Zu(this,"on",e);return n.listeners.push({listener:t,once:!1}),n.start(),this}async once(e,t){const n=await Zu(this,"once",e);return n.listeners.push({listener:t,once:!0}),n.start(),this}async emit(e,...t){return await Xu(this,e,t,null)}async listenerCount(e){if(e){const t=await Yu(this,e);return t?t.listeners.length:0}const{subs:t}=Ju(this);let n=0;for(const{listeners:e}of t.values())n+=e.length;return n}async listeners(e){if(e){const t=await Yu(this,e);return t?t.listeners.map((({listener:e})=>e)):[]}const{subs:t}=Ju(this);let n=[];for(const{listeners:e}of t.values())n=n.concat(e.map((({listener:e})=>e)));return n}async off(e,t){const n=await Yu(this,e);if(!n)return this;if(t){const e=n.listeners.map((({listener:e})=>e)).indexOf(t);e>=0&&n.listeners.splice(e,1)}return null!=t&&0!==n.listeners.length||(n.stop(),Ju(this).subs.delete(n.tag)),this}async removeAllListeners(e){if(e){const t=await Yu(this,e);if(!t)return this;t.stop(),Ju(this).subs.delete(t.tag)}else{const{subs:e}=Ju(this);for(const{tag:t,stop:n}of e.values())n(),e.delete(t)}return this}async addListener(e,t){return await this.on(e,t)}async removeListener(e,t){return await this.off(e,t)}static buildClass(e){return class extends tc{constructor(t,n=null){super(t,e,n)}}}static from(e,t,n){return null==n&&(n=null),new this(e,t,n)}}class nc extends(function(){return tc}()){}const rc=new Map([[8217,"apostrophe"],[8260,"fraction slash"],[12539,"middle dot"]]);function ac(e){return function(e){let t=0;return()=>e[t++]}(function(e){let t=0;function n(){return e[t++]<<8|e[t++]}let r=n(),a=1,s=[0,1];for(let e=1;e<r;e++)s.push(a+=n());let i=n(),o=t;t+=i;let l=0,u=0;function c(){return 0==l&&(u=u<<8|e[t++],l=8),u>>--l&1}const d=2**31,f=d>>>1,h=f>>1,p=d-1;let g=0;for(let e=0;e<31;e++)g=g<<1|c();let m=[],y=0,w=d;for(;;){let e=Math.floor(((g-y+1)*a-1)/w),t=0,n=r;for(;n-t>1;){let r=t+n>>>1;e<s[r]?n=r:t=r}if(0==t)break;m.push(t);let i=y+Math.floor(w*s[t]/a),o=y+Math.floor(w*s[t+1]/a)-1;for(;0==((i^o)&f);)g=g<<1&p|c(),i=i<<1&p,o=o<<1&p|1;for(;i&~o&h;)g=g&f|g<<1&p>>>1|c(),i=i<<1^f,o=(o^f)<<1|f|1;y=i,w=1+o-i}let b=r-4;return m.map((t=>{switch(t-b){case 3:return b+65792+(e[o++]<<16|e[o++]<<8|e[o++]);case 2:return b+256+(e[o++]<<8|e[o++]);case 1:return b+e[o++];default:return t-1}}))}(function(e){let t=[];[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach(((e,n)=>t[e.charCodeAt(0)]=n));let n=e.length,r=new Uint8Array(6*n>>3);for(let a=0,s=0,i=0,o=0;a<n;a++)o=o<<6|t[e.charCodeAt(a)],i+=6,i>=8&&(r[s++]=o>>(i-=8));return r}(e)))}function sc(e){return 1&e?~e>>1:e>>1}function ic(e,t){let n=Array(e);for(let r=0,a=0;r<e;r++)n[r]=a+=sc(t());return n}function oc(e,t=0){let n=[];for(;;){let r=e(),a=e();if(!a)break;t+=r;for(let e=0;e<a;e++)n.push(t+e);t+=a+1}return n}function lc(e){return cc((()=>{let t=oc(e);if(t.length)return t}))}function uc(e){let t=[];for(;;){let n=e();if(0==n)break;t.push(fc(n,e))}for(;;){let n=e()-1;if(n<0)break;t.push(hc(n,e))}return t.flat()}function cc(e){let t=[];for(;;){let n=e(t.length);if(!n)break;t.push(n)}return t}function dc(e,t,n){let r=Array(e).fill().map((()=>[]));for(let a=0;a<t;a++)ic(e,n).forEach(((e,t)=>r[t].push(e)));return r}function fc(e,t){let n=1+t(),r=t(),a=cc(t);return dc(a.length,1+e,t).flatMap(((e,t)=>{let[s,...i]=e;return Array(a[t]).fill().map(((e,t)=>{let a=t*r;return[s+t*n,i.map((e=>e+a))]}))}))}function hc(e,t){return dc(1+t(),1+e,t).map((e=>[e[0],e.slice(1)]))}function pc(e){return`{${function(e){return e.toString(16).toUpperCase().padStart(2,"0")}(e)}}`}function gc(e){let t=e.length;if(t<4096)return String.fromCodePoint(...e);let n=[];for(let r=0;r<t;)n.push(String.fromCodePoint(...e.slice(r,r+=4096)));return n.join("")}function mc(e,t){let n=e.length,r=n-t.length;for(let a=0;0==r&&a<n;a++)r=e[a]-t[a];return r}const yc=44032,wc=4352,bc=4449,vc=4519;function Ac(e){return e>>24&255}function Ec(e){return 16777215&e}let kc,xc,Nc,Sc;function Cc(e){return e>=yc&&e<55204}function Pc(e,t){if(e>=wc&&e<4371&&t>=bc&&t<4470)return yc+588*(e-wc)+28*(t-bc);if(Cc(e)&&t>vc&&t<4547&&(e-yc)%28==0)return e+(t-vc);{let n=Sc.get(e);return n&&(n=n.get(t),n)?n:-1}}function Rc(e){kc||function(){let e=ac("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");kc=new Map(lc(e).flatMap(((e,t)=>e.map((e=>[e,t+1<<24]))))),xc=new Set(oc(e)),Nc=new Map,Sc=new Map;for(let[t,n]of uc(e)){if(!xc.has(t)&&2==n.length){let[e,r]=n,a=Sc.get(e);a||(a=new Map,Sc.set(e,a)),a.set(r,t)}Nc.set(t,n.reverse())}}();let t=[],n=[],r=!1;function a(e){let n=kc.get(e);n&&(r=!0,e|=n),t.push(e)}for(let r of e)for(;;){if(r<128)t.push(r);else if(Cc(r)){let e=r-yc,t=e%588/28|0,n=e%28;a(wc+(e/588|0)),a(bc+t),n>0&&a(vc+n)}else{let e=Nc.get(r);e?n.push(...e):a(r)}if(!n.length)break;r=n.pop()}if(r&&t.length>1){let e=Ac(t[0]);for(let n=1;n<t.length;n++){let r=Ac(t[n]);if(0==r||e<=r){e=r;continue}let a=n-1;for(;;){let n=t[a+1];if(t[a+1]=t[a],t[a]=n,!a)break;if(e=Ac(t[--a]),e<=r)break}e=Ac(t[n])}}return t}function Ic(e){return Rc(e).map(Ec)}function Tc(e){return function(e){let t=[],n=[],r=-1,a=0;for(let s of e){let e=Ac(s),i=Ec(s);if(-1==r)0==e?r=i:t.push(i);else if(a>0&&a>=e)0==e?(t.push(r,...n),n.length=0,r=i):n.push(i),a=e;else{let s=Pc(r,i);s>=0?r=s:0==a&&0==e?(t.push(r),r=i):(n.push(i),a=e)}}return r>=0&&t.push(r,...n),t}(Rc(e))}const Oc=e=>Array.from(e);function Bc(e,t){return e.P.has(t)||e.Q.has(t)}class Lc extends Array{get is_emoji(){return!0}}let Uc,Fc,Dc,Mc,jc,zc,_c,Gc,Hc,Vc,Qc,Kc;function Wc(){if(Uc)return;let e=ac("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");const t=()=>oc(e),n=()=>new Set(t()),r=(e,t)=>t.forEach((t=>e.add(t)));Uc=new Map(uc(e)),Fc=n(),Dc=t(),Mc=new Set(t().map((e=>Dc[e]))),Dc=new Set(Dc),jc=n(),zc=n();let a=lc(e),s=e();const i=()=>{let e=new Set;return t().forEach((t=>r(e,a[t]))),r(e,t()),e};_c=cc((t=>{let n=cc(e).map((e=>e+96));if(n.length){let r=t>=s;return n[0]-=32,n=gc(n),r&&(n=`Restricted[${n}]`),{N:n,P:i(),Q:i(),M:!e(),R:r}}})),Gc=n(),Hc=new Map;let o=t().concat(Oc(Gc)).sort(((e,t)=>e-t));o.forEach(((t,n)=>{let r=e(),a=o[n]=r?o[n-r]:{V:[],M:new Map};a.V.push(t),Gc.has(t)||Hc.set(t,a)}));for(let{V:e,M:t}of new Set(Hc.values())){let n=[];for(let t of e){let e=_c.filter((e=>Bc(e,t))),a=n.find((({G:t})=>e.some((e=>t.has(e)))));a||(a={G:new Set,V:[]},n.push(a)),a.V.push(t),r(a.G,e)}let a=n.flatMap((e=>Oc(e.G)));for(let{G:e,V:r}of n){let n=new Set(a.filter((t=>!e.has(t))));for(let e of r)t.set(e,n)}}Vc=new Set;let l=new Set;const u=e=>Vc.has(e)?l.add(e):Vc.add(e);for(let e of _c){for(let t of e.P)u(t);for(let t of e.Q)u(t)}for(let e of Vc)Hc.has(e)||l.has(e)||Hc.set(e,1);r(Vc,Ic(Vc)),Qc=function(e){let t=[],n=oc(e);return function e({S:n,B:r},a,s){if(!(4&n&&s===a[a.length-1])){2&n&&(s=a[a.length-1]),1&n&&t.push(a);for(let t of r)for(let n of t.Q)e(t,[...a,n],s)}}(function t(r){return{S:e(),B:cc((()=>{let r=oc(e).map((e=>n[e]));if(r.length)return t(r)})),Q:r}}([]),[]),t}(e).map((e=>Lc.from(e))).sort(mc),Kc=new Map;for(let e of Qc){let t=[Kc];for(let n of e){let e=t.map((e=>{let t=e.get(n);return t||(t=new Map,e.set(n,t)),t}));65039===n?t.push(...e):t=e}for(let n of t)n.V=e}}function Jc(e){return(Zc(e)?"":`${qc(Yc([e]))} `)+pc(e)}function qc(e){return`"${e}"‎`}function Yc(e,t=1/0,n=pc){let r=[];var a;a=e[0],Wc(),Dc.has(a)&&r.push("◌"),e.length>t&&(t>>=1,e=[...e.slice(0,t),8230,...e.slice(-t)]);let s=0,i=e.length;for(let t=0;t<i;t++){let a=e[t];Zc(a)&&(r.push(gc(e.slice(s,t))),r.push(n(a)),s=t+1)}return r.push(gc(e.slice(s,i))),r.join("")}function Zc(e){return Wc(),jc.has(e)}function $c(e,t,n){if(!e)return[];Wc();let r=0;return e.split(".").map((e=>{let a=function(e){let t=[];for(let n=0,r=e.length;n<r;){let r=e.codePointAt(n);n+=r<65536?1:2,t.push(r)}return t}(e),s={input:a,offset:r};r+=a.length+1;try{let e,r=s.tokens=function(e,t,n){let r=[],a=[];for(e=e.slice().reverse();e.length;){let s=rd(e);if(s)a.length&&(r.push(t(a)),a=[]),r.push(n(s));else{let t=e.pop();if(Vc.has(t))a.push(t);else{let e=Uc.get(t);if(e)a.push(...e);else if(!Fc.has(t))throw Xc(t)}}}return a.length&&r.push(t(a)),r}(a,t,n),i=r.length;if(!i)throw new Error("empty label");let o=s.output=r.flat();if(function(e){for(let t=e.lastIndexOf(95);t>0;)if(95!==e[--t])throw new Error("underscore allowed only at start")}(o),!(s.emoji=i>1||r[0].is_emoji)&&o.every((e=>e<128)))!function(e){if(e.length>=4&&45==e[2]&&45==e[3])throw new Error(`invalid label extension: "${gc(e.slice(0,4))}"`)}(o),e="ASCII";else{let t=r.flatMap((e=>e.is_emoji?[]:e));if(t.length){if(Dc.has(o[0]))throw td("leading combining mark");for(let e=1;e<i;e++){let t=r[e];if(!t.is_emoji&&Dc.has(t[0]))throw td(`emoji + combining mark: "${gc(r[e-1])} + ${Yc([t[0]])}"`)}!function(e){let t=e[0],n=rc.get(t);if(n)throw td(`leading ${n}`);let r=e.length,a=-1;for(let s=1;s<r;s++){t=e[s];let r=rc.get(t);if(r){if(a==s)throw td(`${n} + ${r}`);a=s+1,n=r}}if(a==r)throw td(`trailing ${n}`)}(o);let n=Oc(new Set(t)),[a]=function(e){let t=_c;for(let n of e){let e=t.filter((e=>Bc(e,n)));if(!e.length)throw _c.some((e=>Bc(e,n)))?ed(t[0],n):Xc(n);if(t=e,1==e.length)break}return t}(n);!function(e,t){for(let n of t)if(!Bc(e,n))throw ed(e,n);if(e.M){let e=Ic(t);for(let t=1,n=e.length;t<n;t++)if(Mc.has(e[t])){let r=t+1;for(let a;r<n&&Mc.has(a=e[r]);r++)for(let n=t;n<r;n++)if(e[n]==a)throw new Error(`duplicate non-spacing marks: ${Jc(a)}`);if(r-t>4)throw new Error(`excessive non-spacing marks: ${qc(Yc(e.slice(t-1,r)))} (${r-t}/4)`);t=r}}}(a,t),function(e,t){let n,r=[];for(let e of t){let t=Hc.get(e);if(1===t)return;if(t){let r=t.M.get(e);if(n=n?n.filter((e=>r.has(e))):Oc(r),!n.length)return}else r.push(e)}if(n)for(let t of n)if(r.every((e=>Bc(t,e))))throw new Error(`whole-script confusable: ${e.N}/${t.N}`)}(a,n),e=a.N}else e="Emoji"}s.type=e}catch(e){s.error=e}return s}))}function Xc(e){return new Error(`disallowed character: ${Jc(e)}`)}function ed(e,t){let n=Jc(t),r=_c.find((e=>e.P.has(t)));return r&&(n=`${r.N} ${n}`),new Error(`illegal mixture: ${e.N} + ${n}`)}function td(e){return new Error(`illegal placement: ${e}`)}function nd(e){return e.filter((e=>65039!=e))}function rd(e,t){let n,r=Kc,a=e.length;for(;a&&(r=r.get(e[--a]),r);){let{V:s}=r;s&&(n=s,t&&t.push(...e.slice(a).reverse()),e.length=a)}return n}const ad=new Uint8Array(32);function sd(e){return nn(0!==e.length,"invalid ENS name; empty component","comp",e),e}function id(e){const t=Ir(function(e){try{if(0===e.length)throw new Error("empty label");return function(e){return function(e){return e.map((({input:t,error:n,output:r})=>{if(n){let r=n.message;throw new Error(1==e.length?r:`Invalid label ${qc(Yc(t,63))}: ${r}`)}return gc(r)})).join(".")}($c(e,Tc,nd))}(e)}catch(t){nn(!1,`invalid ENS name (${t.message})`,"name",e)}}(e)),n=[];if(0===e.length)return n;let r=0;for(let e=0;e<t.length;e++)46===t[e]&&(n.push(sd(t.slice(r,e))),r=e+1);return nn(r<t.length,"invalid ENS name; empty component","name",e),n.push(sd(t.slice(r))),n}function od(e){nn("string"==typeof e,"invalid ENS name; not a string","name",e),nn(e.length,"invalid ENS name (empty label)","name",e);let t=ad;const n=id(e);for(;n.length;)t=wr(gn([t,wr(n.pop())]));return pn(t)}function ld(e,t){const n=null!=t?t:63;return nn(n<=255,"DNS encoded label cannot exceed 255","length",n),pn(gn(id(e).map((t=>{nn(t.length<=n,`label ${JSON.stringify(e)} exceeds ${n} bytes`,"name",e);const r=new Uint8Array(t.length+1);return r.set(t,1),r[0]=r.length-1,r}))))+"00"}function ud(e){return e.match(/^ipfs:\/\/ipfs\//i)?e=e.substring(12):e.match(/^ipfs:\/\//i)?e=e.substring(7):nn(!1,"unsupported IPFS format","link",e),`https://gateway.ipfs.io/ipfs/${e}`}ad.fill(0);class cd{name;constructor(e){Yt(this,{name:e})}connect(e){return this}supportsCoinType(e){return!1}async encodeAddress(e,t){throw new Error("unsupported coin")}async decodeAddress(e,t){throw new Error("unsupported coin")}}const dd=new RegExp("^(ipfs)://(.*)$","i"),fd=[new RegExp("^(https)://(.*)$","i"),new RegExp("^(data):(.*)$","i"),dd,new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$","i")];class hd{provider;address;name;#Re;#Ie;constructor(e,t,n){Yt(this,{provider:e,address:t,name:n}),this.#Re=null,this.#Ie=new nc(t,["function supportsInterface(bytes4) view returns (bool)","function resolve(bytes, bytes) view returns (bytes)","function addr(bytes32) view returns (address)","function addr(bytes32, uint) view returns (bytes)","function text(bytes32, string) view returns (string)","function contenthash(bytes32) view returns (bytes)"],e)}async supportsWildcard(){return null==this.#Re&&(this.#Re=(async()=>{try{return await this.#Ie.supportsInterface("0x9061b923")}catch(e){if($t(e,"CALL_EXCEPTION"))return!1;throw this.#Re=null,e}})()),await this.#Re}async#Te(e,t){t=(t||[]).slice();const n=this.#Ie.interface;t.unshift(od(this.name));let r=null;await this.supportsWildcard()&&(r=n.getFunction(e),tn(r,"missing fragment","UNKNOWN_ERROR",{info:{funcName:e}}),t=[ld(this.name,255),n.encodeFunctionData(r,t)],e="resolve(bytes,bytes)"),t.push({enableCcipRead:!0});try{const a=await this.#Ie[e](...t);return r?n.decodeFunctionResult(r,a)[0]:a}catch(e){if(!$t(e,"CALL_EXCEPTION"))throw e}return null}async getAddress(e){if(null==e&&(e=60),60===e)try{const e=await this.#Te("addr(bytes32)");return null==e||e===$r?null:e}catch(e){if($t(e,"CALL_EXCEPTION"))return null;throw e}if(e>=0&&e<2147483648){let t=e+2147483648;const n=await this.#Te("addr(bytes32,uint)",[t]);if(dn(n,20))return xr(n)}let t=null;for(const n of this.provider.plugins)if(n instanceof cd&&n.supportsCoinType(e)){t=n;break}if(null==t)return null;const n=await this.#Te("addr(bytes32,uint)",[e]);if(null==n||"0x"===n)return null;const r=await t.decodeAddress(e,n);if(null!=r)return r;tn(!1,"invalid coin data","UNSUPPORTED_OPERATION",{operation:`getAddress(${e})`,info:{coinType:e,data:n}})}async getText(e){const t=await this.#Te("text(bytes32,string)",[e]);return null==t||"0x"===t?null:t}async getContentHash(){const e=await this.#Te("contenthash(bytes32)");if(null==e||"0x"===e)return null;const t=e.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(t){const e="e3010170"===t[1]?"ipfs":"ipns",n=parseInt(t[4],16);if(t[5].length===2*n)return`${e}://${Ds("0x"+t[2])}`}const n=e.match(/^0xe40101fa011b20([0-9a-f]*)$/);if(n&&64===n[1].length)return`bzz://${n[1]}`;tn(!1,"invalid or unsupported content hash data","UNSUPPORTED_OPERATION",{operation:"getContentHash()",info:{data:e}})}async getAvatar(){return(await this._getAvatar()).url}async _getAvatar(){const e=[{type:"name",value:this.name}];try{const t=await this.getText("avatar");if(null==t)return e.push({type:"!avatar",value:""}),{url:null,linkage:e};e.push({type:"avatar",value:t});for(let n=0;n<fd.length;n++){const r=t.match(fd[n]);if(null==r)continue;const a=r[1].toLowerCase();switch(a){case"https":case"data":return e.push({type:"url",value:t}),{linkage:e,url:t};case"ipfs":{const n=ud(t);return e.push({type:"ipfs",value:t}),e.push({type:"url",value:n}),{linkage:e,url:n}}case"erc721":case"erc1155":{const n="erc721"===a?"tokenURI(uint256)":"uri(uint256)";e.push({type:a,value:t});const s=await this.getAddress();if(null==s)return e.push({type:"!owner",value:""}),{url:null,linkage:e};const i=(r[2]||"").split("/");if(2!==i.length)return e.push({type:`!${a}caip`,value:r[2]||""}),{url:null,linkage:e};const o=i[1],l=new nc(i[0],["function tokenURI(uint) view returns (string)","function ownerOf(uint) view returns (address)","function uri(uint) view returns (string)","function balanceOf(address, uint256) view returns (uint)"],this.provider);if("erc721"===a){const t=await l.ownerOf(o);if(s!==t)return e.push({type:"!owner",value:t}),{url:null,linkage:e};e.push({type:"owner",value:t})}else if("erc1155"===a){const t=await l.balanceOf(s,o);if(!t)return e.push({type:"!balance",value:"0"}),{url:null,linkage:e};e.push({type:"balance",value:t.toString()})}let u=await l[n](o);if(null==u||"0x"===u)return e.push({type:"!metadata-url",value:""}),{url:null,linkage:e};e.push({type:"metadata-url-base",value:u}),"erc1155"===a&&(u=u.replace("{id}",Tn(o,32).substring(2)),e.push({type:"metadata-url-expanded",value:u})),u.match(/^ipfs:/i)&&(u=ud(u)),e.push({type:"metadata-url",value:u});let c={};const d=await new wu(u).send();d.assertOk();try{c=d.bodyJson}catch(t){try{e.push({type:"!metadata",value:d.bodyText})}catch(t){const n=d.body;return n&&e.push({type:"!metadata",value:pn(n)}),{url:null,linkage:e}}return{url:null,linkage:e}}if(!c)return e.push({type:"!metadata",value:""}),{url:null,linkage:e};e.push({type:"metadata",value:JSON.stringify(c)});let f=c.image;if("string"!=typeof f)return e.push({type:"!imageUrl",value:""}),{url:null,linkage:e};if(f.match(/^(https:\/\/|data:)/i));else{if(null==f.match(dd))return e.push({type:"!imageUrl-ipfs",value:f}),{url:null,linkage:e};e.push({type:"imageUrl-ipfs",value:f}),f=ud(f)}return e.push({type:"url",value:f}),{linkage:e,url:f}}}}}catch(e){}return{linkage:e,url:null}}static async getEnsAddress(e){const t=await e.getNetwork(),n=t.getPlugin("org.ethers.plugins.network.Ens");return tn(n,"network does not support ENS","UNSUPPORTED_OPERATION",{operation:"getEnsAddress",info:{network:t}}),n.address}static async#Oe(e,t){const n=await hd.getEnsAddress(e);try{const r=new nc(n,["function resolver(bytes32) view returns (address)"],e),a=await r.resolver(od(t),{enableCcipRead:!0});return a===$r?null:a}catch(e){throw e}}static async fromName(e,t){let n=t;for(;;){if(""===n||"."===n)return null;if("eth"!==t&&"eth"===n)return null;const r=await hd.#Oe(e,n);if(null!=r){const a=new hd(e,r,t);return n===t||await a.supportsWildcard()?a:null}n=n.split(".").slice(1).join(".")}}}const pd=BigInt(0);function gd(e,t){return function(n){return null==n?t:e(n)}}function md(e,t){return n=>{if(t&&null==n)return null;if(!Array.isArray(n))throw new Error("not an array");return n.map((t=>e(t)))}}function yd(e,t){return n=>{const r={};for(const a in e){let s=a;if(t&&a in t&&!(s in n))for(const e of t[a])if(e in n){s=e;break}try{const t=e[a](n[s]);void 0!==t&&(r[a]=t)}catch(e){tn(!1,`invalid value for value.${a} (${e instanceof Error?e.message:"not-an-error"})`,"BAD_DATA",{value:n})}}return r}}function wd(e){return nn(dn(e,!0),"invalid data","value",e),e}function bd(e){return nn(dn(e,32),"invalid hash","value",e),e}const vd=yd({address:xr,blockHash:bd,blockNumber:In,data:wd,index:In,removed:gd((function(e){switch(e){case!0:case"true":return!0;case!1:case"false":return!1}nn(!1,`invalid boolean; ${JSON.stringify(e)}`,"value",e)}),!1),topics:md(bd),transactionHash:bd,transactionIndex:In},{index:["logIndex"]}),Ad=yd({hash:gd(bd),parentHash:bd,parentBeaconBlockRoot:gd(bd,null),number:In,timestamp:In,nonce:gd(wd),difficulty:Sn,gasLimit:Sn,gasUsed:Sn,stateRoot:gd(bd,null),receiptsRoot:gd(bd,null),blobGasUsed:gd(Sn,null),excessBlobGas:gd(Sn,null),miner:gd(xr),prevRandao:gd(bd,null),extraData:wd,baseFeePerGas:gd(Sn)},{prevRandao:["mixHash"]}),Ed=yd({transactionIndex:In,blockNumber:In,transactionHash:bd,address:xr,topics:md(bd),data:wd,index:In,blockHash:bd},{index:["logIndex"]}),kd=yd({to:gd(xr,null),from:gd(xr,null),contractAddress:gd(xr,null),index:In,root:gd(pn),gasUsed:Sn,blobGasUsed:gd(Sn,null),logsBloom:gd(wd),blockHash:bd,hash:bd,logs:md((function(e){return Ed(e)})),blockNumber:In,cumulativeGasUsed:Sn,effectiveGasPrice:gd(Sn),blobGasPrice:gd(Sn,null),status:gd(In),type:gd(In,0)},{effectiveGasPrice:["gasPrice"],hash:["transactionHash"],index:["transactionIndex"]});function xd(e){e.to&&Sn(e.to)===pd&&(e.to="0x0000000000000000000000000000000000000000");const t=yd({hash:bd,index:gd(In,void 0),type:e=>"0x"===e||null==e?0:In(e),accessList:gd(ka,null),blobVersionedHashes:gd(md(bd,!0),null),authorizationList:gd(md((e=>{let t;if(e.signature)t=e.signature;else{let n=e.yParity;"0x1b"===n?n=0:"0x1c"===n&&(n=1),t=Object.assign({},e,{yParity:n})}return{address:xr(e.address),chainId:Sn(e.chainId),nonce:Sn(e.nonce),signature:Hn.from(t)}}),!1),null),blockHash:gd(bd,null),blockNumber:gd(In,null),transactionIndex:gd(In,null),from:xr,gasPrice:gd(Sn),maxPriorityFeePerGas:gd(Sn),maxFeePerGas:gd(Sn),maxFeePerBlobGas:gd(Sn,null),gasLimit:Sn,to:gd(xr,null),value:Sn,nonce:In,data:wd,creates:gd(xr,null),chainId:gd(Sn,null)},{data:["input"],gasLimit:["gas"],index:["transactionIndex"]})(e);if(null==t.to&&null==t.creates&&(t.creates=function(e){const t=xr(e.from);let n=Sn(e.nonce,"tx.nonce").toString(16);return n="0"===n?"0x":n.length%2?"0x0"+n:"0x"+n,xr(yn(wr(Ur([t,n])),12))}(t)),1!==e.type&&2!==e.type||null!=e.accessList||(t.accessList=[]),e.signature?t.signature=Hn.from(e.signature):t.signature=Hn.from(e),null==t.chainId){const e=t.signature.legacyChainId;null!=e&&(t.chainId=e)}return t.blockHash&&Sn(t.blockHash)===pd&&(t.blockHash=null),t}class Nd{name;constructor(e){Yt(this,{name:e})}clone(){return new Nd(this.name)}}class Sd extends Nd{effectiveBlock;txBase;txCreate;txDataZero;txDataNonzero;txAccessListStorageKey;txAccessListAddress;constructor(e,t){null==e&&(e=0),super(`org.ethers.network.plugins.GasCost#${e||0}`);const n={effectiveBlock:e};function r(e,r){let a=(t||{})[e];null==a&&(a=r),nn("number"==typeof a,`invalud value for ${e}`,"costs",t),n[e]=a}r("txBase",21e3),r("txCreate",32e3),r("txDataZero",4),r("txDataNonzero",16),r("txAccessListStorageKey",1900),r("txAccessListAddress",2400),Yt(this,n)}clone(){return new Sd(this.effectiveBlock,this)}}class Cd extends Nd{address;targetNetwork;constructor(e,t){super("org.ethers.plugins.network.Ens"),Yt(this,{address:e||"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",targetNetwork:null==t?1:t})}clone(){return new Cd(this.address,this.targetNetwork)}}class Pd extends Nd{#se;#Be;get url(){return this.#se}get processFunc(){return this.#Be}constructor(e,t){super("org.ethers.plugins.network.FetchUrlFeeDataPlugin"),this.#se=e,this.#Be=t}clone(){return this}}const Rd=new Map;class Id{#Le;#w;#Ue;constructor(e,t){this.#Le=e,this.#w=Sn(t),this.#Ue=new Map}toJSON(){return{name:this.name,chainId:String(this.chainId)}}get name(){return this.#Le}set name(e){this.#Le=e}get chainId(){return this.#w}set chainId(e){this.#w=Sn(e,"chainId")}matches(e){if(null==e)return!1;if("string"==typeof e){try{return this.chainId===Sn(e)}catch(e){}return this.name===e}if("number"==typeof e||"bigint"==typeof e){try{return this.chainId===Sn(e)}catch(e){}return!1}if("object"==typeof e){if(null!=e.chainId){try{return this.chainId===Sn(e.chainId)}catch(e){}return!1}return null!=e.name&&this.name===e.name}return!1}get plugins(){return Array.from(this.#Ue.values())}attachPlugin(e){if(this.#Ue.get(e.name))throw new Error(`cannot replace existing plugin: ${e.name} `);return this.#Ue.set(e.name,e.clone()),this}getPlugin(e){return this.#Ue.get(e)||null}getPlugins(e){return this.plugins.filter((t=>t.name.split("#")[0]===e))}clone(){const e=new Id(this.name,this.chainId);return this.plugins.forEach((t=>{e.attachPlugin(t.clone())})),e}computeIntrinsicGas(e){const t=this.getPlugin("org.ethers.plugins.network.GasCost")||new Sd;let n=t.txBase;if(null==e.to&&(n+=t.txCreate),e.data)for(let r=2;r<e.data.length;r+=2)"00"===e.data.substring(r,r+2)?n+=t.txDataZero:n+=t.txDataNonzero;if(e.accessList){const r=ka(e.accessList);for(const e in r)n+=t.txAccessListAddress+t.txAccessListStorageKey*r[e].storageKeys.length}return n}static from(e){if(function(){function e(e,t,n){const r=function(){const r=new Id(e,t);return null!=n.ensNetwork&&r.attachPlugin(new Cd(null,n.ensNetwork)),r.attachPlugin(new Sd),(n.plugins||[]).forEach((e=>{r.attachPlugin(e)})),r};Id.register(e,r),Id.register(t,r),n.altNames&&n.altNames.forEach((e=>{Id.register(e,r)}))}Bd||(Bd=!0,e("mainnet",1,{ensNetwork:1,altNames:["homestead"]}),e("ropsten",3,{ensNetwork:3}),e("rinkeby",4,{ensNetwork:4}),e("goerli",5,{ensNetwork:5}),e("kovan",42,{ensNetwork:42}),e("sepolia",11155111,{ensNetwork:11155111}),e("holesky",17e3,{ensNetwork:17e3}),e("classic",61,{}),e("classicKotti",6,{}),e("arbitrum",42161,{ensNetwork:1}),e("arbitrum-goerli",421613,{}),e("arbitrum-sepolia",421614,{}),e("base",8453,{ensNetwork:1}),e("base-goerli",84531,{}),e("base-sepolia",84532,{}),e("bnb",56,{ensNetwork:1}),e("bnbt",97,{}),e("linea",59144,{ensNetwork:1}),e("linea-goerli",59140,{}),e("linea-sepolia",59141,{}),e("matic",137,{ensNetwork:1,plugins:[Od("https://gasstation.polygon.technology/v2")]}),e("matic-amoy",80002,{}),e("matic-mumbai",80001,{altNames:["maticMumbai","maticmum"],plugins:[Od("https://gasstation-testnet.polygon.technology/v2")]}),e("optimism",10,{ensNetwork:1,plugins:[]}),e("optimism-goerli",420,{}),e("optimism-sepolia",11155420,{}),e("xdai",100,{ensNetwork:1}))}(),null==e)return Id.from("mainnet");if("number"==typeof e&&(e=BigInt(e)),"string"==typeof e||"bigint"==typeof e){const t=Rd.get(e);if(t)return t();if("bigint"==typeof e)return new Id("unknown",e);nn(!1,"unknown network","network",e)}if("function"==typeof e.clone)return e.clone();if("object"==typeof e){nn("string"==typeof e.name&&"number"==typeof e.chainId,"invalid network object name or chainId","network",e);const t=new Id(e.name,e.chainId);return(e.ensAddress||null!=e.ensNetwork)&&t.attachPlugin(new Cd(e.ensAddress,e.ensNetwork)),t}nn(!1,"invalid network","network",e)}static register(e,t){"number"==typeof e&&(e=BigInt(e));const n=Rd.get(e);n&&nn(!1,`conflicting network for ${JSON.stringify(n.name)}`,"nameOrChainId",e),Rd.set(e,t)}}function Td(e,t){const n=String(e);if(!n.match(/^[0-9.]+$/))throw new Error(`invalid gwei value: ${e}`);const r=n.split(".");if(1===r.length&&r.push(""),2!==r.length)throw new Error(`invalid gwei value: ${e}`);for(;r[1].length<t;)r[1]+="0";if(r[1].length>9){let e=BigInt(r[1].substring(0,9));r[1].substring(9).match(/^0+$/)||e++,r[1]=e.toString()}return BigInt(r[0]+r[1])}function Od(e){return new Pd(e,(async(e,t,n)=>{let r;n.setHeader("User-Agent","ethers");try{const[t,a]=await Promise.all([n.send(),e()]);r=t;const s=r.bodyJson.standard;return{gasPrice:a.gasPrice,maxFeePerGas:Td(s.maxFee,9),maxPriorityFeePerGas:Td(s.maxPriorityFee,9)}}catch(e){tn(!1,`error encountered with polygon gas station (${JSON.stringify(n.url)})`,"SERVER_ERROR",{request:n,response:r,error:e})}}))}let Bd=!1;function Ld(e){return JSON.parse(JSON.stringify(e))}class Ud{#Fe;#De;#Me;#je;constructor(e){this.#Fe=e,this.#De=null,this.#Me=4e3,this.#je=-2}get pollingInterval(){return this.#Me}set pollingInterval(e){this.#Me=e}async#ze(){try{const e=await this.#Fe.getBlockNumber();if(-2===this.#je)return void(this.#je=e);if(e!==this.#je){for(let t=this.#je+1;t<=e;t++){if(null==this.#De)return;await this.#Fe.emit("block",t)}this.#je=e}}catch(e){}null!=this.#De&&(this.#De=this.#Fe._setTimeout(this.#ze.bind(this),this.#Me))}start(){this.#De||(this.#De=this.#Fe._setTimeout(this.#ze.bind(this),this.#Me),this.#ze())}stop(){this.#De&&(this.#Fe._clearTimeout(this.#De),this.#De=null)}pause(e){this.stop(),e&&(this.#je=-2)}resume(){this.start()}}class Fd{#Fe;#ze;#_e;constructor(e){this.#Fe=e,this.#_e=!1,this.#ze=e=>{this._poll(e,this.#Fe)}}async _poll(e,t){throw new Error("sub-classes must override this")}start(){this.#_e||(this.#_e=!0,this.#ze(-2),this.#Fe.on("block",this.#ze))}stop(){this.#_e&&(this.#_e=!1,this.#Fe.off("block",this.#ze))}pause(e){this.stop()}resume(){this.start()}}class Dd extends Fd{#Ge;#He;constructor(e,t){super(e),this.#Ge=t,this.#He=-2}pause(e){e&&(this.#He=-2),super.pause(e)}async _poll(e,t){const n=await t.getBlock(this.#Ge);null!=n&&(-2===this.#He?this.#He=n.number:n.number>this.#He&&(t.emit(this.#Ge,n.number),this.#He=n.number))}}class Md extends Fd{#Pe;constructor(e,t){super(e),this.#Pe=Ld(t)}async _poll(e,t){throw new Error("@TODO")}}class jd extends Fd{#Ve;constructor(e,t){super(e),this.#Ve=t}async _poll(e,t){const n=await t.getTransactionReceipt(this.#Ve);n&&t.emit(this.#Ve,n)}}class zd{#Fe;#Pe;#De;#_e;#je;constructor(e,t){this.#Fe=e,this.#Pe=Ld(t),this.#De=this.#ze.bind(this),this.#_e=!1,this.#je=-2}async#ze(e){if(-2===this.#je)return;const t=Ld(this.#Pe);t.fromBlock=this.#je+1,t.toBlock=e;const n=await this.#Fe.getLogs(t);if(0!==n.length)for(const e of n)this.#Fe.emit(this.#Pe,e),this.#je=e.blockNumber;else this.#je<e-60&&(this.#je=e-60)}start(){this.#_e||(this.#_e=!0,-2===this.#je&&this.#Fe.getBlockNumber().then((e=>{this.#je=e})),this.#Fe.on("block",this.#De))}stop(){this.#_e&&(this.#_e=!1,this.#Fe.off("block",this.#De))}pause(e){this.stop(),e&&(this.#je=-2)}resume(){this.start()}}const _d=BigInt(2);function Gd(e){return e&&"function"==typeof e.then}function Hd(e,t){return e+":"+JSON.stringify(t,((e,t)=>{if(null==t)return"null";if("bigint"==typeof t)return`bigint:${t.toString()}`;if("string"==typeof t)return t.toLowerCase();if("object"==typeof t&&!Array.isArray(t)){const e=Object.keys(t);return e.sort(),e.reduce(((e,n)=>(e[n]=t[n],e)),{})}return t}))}class Vd{name;constructor(e){Yt(this,{name:e})}start(){}stop(){}pause(e){}resume(){}}function Qd(e){return(e=Array.from(new Set(e).values())).sort(),e}async function Kd(e,t){if(null==e)throw new Error("invalid event");if(Array.isArray(e)&&(e={topics:e}),"string"==typeof e)switch(e){case"block":case"debug":case"error":case"finalized":case"network":case"pending":case"safe":return{type:e,tag:e}}if(dn(e,32)){const t=e.toLowerCase();return{type:"transaction",tag:Hd("tx",{hash:t}),hash:t}}if(e.orphan){const t=e;return{type:"orphan",tag:Hd("orphan",t),filter:(n=t,JSON.parse(JSON.stringify(n)))}}var n;if(e.address||e.topics){const n=e,r={topics:(n.topics||[]).map((e=>null==e?null:Array.isArray(e)?Qd(e.map((e=>e.toLowerCase()))):e.toLowerCase()))};if(n.address){const e=[],a=[],s=n=>{dn(n)?e.push(n):a.push((async()=>{e.push(await Cr(n,t))})())};Array.isArray(n.address)?n.address.forEach(s):s(n.address),a.length&&await Promise.all(a),r.address=Qd(e.map((e=>e.toLowerCase())))}return{filter:r,tag:Hd("event",r),type:"event"}}nn(!1,"unknown ProviderEvent","event",e)}function Wd(){return(new Date).getTime()}const Jd={cacheTimeout:250,pollingInterval:4e3};class qd{#Qe;#Ue;#Ke;#We;#Je;#qe;#Ye;#Ze;#$e;#Xe;#et;#W;constructor(e,t){if(this.#W=Object.assign({},Jd,t||{}),"any"===e)this.#qe=!0,this.#Je=null;else if(e){const t=Id.from(e);this.#qe=!1,this.#Je=Promise.resolve(t),setTimeout((()=>{this.emit("network",t,null)}),0)}else this.#qe=!1,this.#Je=null;this.#Ze=-1,this.#Ye=new Map,this.#Qe=new Map,this.#Ue=new Map,this.#Ke=null,this.#We=!1,this.#$e=1,this.#Xe=new Map,this.#et=!1}get pollingInterval(){return this.#W.pollingInterval}get provider(){return this}get plugins(){return Array.from(this.#Ue.values())}attachPlugin(e){if(this.#Ue.get(e.name))throw new Error(`cannot replace existing plugin: ${e.name} `);return this.#Ue.set(e.name,e.connect(this)),this}getPlugin(e){return this.#Ue.get(e)||null}get disableCcipRead(){return this.#et}set disableCcipRead(e){this.#et=!!e}async#tt(e){const t=this.#W.cacheTimeout;if(t<0)return await this._perform(e);const n=Hd(e.method,e);let r=this.#Ye.get(n);return r||(r=this._perform(e),this.#Ye.set(n,r),setTimeout((()=>{this.#Ye.get(n)===r&&this.#Ye.delete(n)}),t)),await r}async ccipReadFetch(e,t,n){if(this.disableCcipRead||0===n.length||null==e.to)return null;const r=e.to.toLowerCase(),a=t.toLowerCase(),s=[];for(let t=0;t<n.length;t++){const i=n[t],o=i.replace("{sender}",r).replace("{data}",a),l=new wu(o);-1===i.indexOf("{data}")&&(l.body={data:a,sender:r}),this.emit("debug",{action:"sendCcipReadFetchRequest",request:l,index:t,urls:n});let u,c="unknown error";try{u=await l.send()}catch(e){s.push(e.message),this.emit("debug",{action:"receiveCcipReadFetchError",request:l,result:{error:e}});continue}try{const e=u.bodyJson;if(e.data)return this.emit("debug",{action:"receiveCcipReadFetchResult",request:l,result:e}),e.data;e.message&&(c=e.message),this.emit("debug",{action:"receiveCcipReadFetchError",request:l,result:e})}catch(e){}tn(u.statusCode<400||u.statusCode>=500,`response not found during CCIP fetch: ${c}`,"OFFCHAIN_FAULT",{reason:"404_MISSING_RESOURCE",transaction:e,info:{url:i,errorMessage:c}}),s.push(c)}tn(!1,`error encountered during CCIP fetch: ${s.map((e=>JSON.stringify(e))).join(", ")}`,"OFFCHAIN_FAULT",{reason:"500_SERVER_ERROR",transaction:e,info:{urls:n,errorMessages:s}})}_wrapBlock(e,t){return new qa(function(e){const t=Ad(e);return t.transactions=e.transactions.map((e=>"string"==typeof e?e:xd(e))),t}(e),this)}_wrapLog(e,t){return new Ya(function(e){return vd(e)}(e),this)}_wrapTransactionReceipt(e,t){return new Za(function(e){return kd(e)}(e),this)}_wrapTransactionResponse(e,t){return new $a(xd(e),this)}_detectNetwork(){tn(!1,"sub-classes must implement this","UNSUPPORTED_OPERATION",{operation:"_detectNetwork"})}async _perform(e){tn(!1,`unsupported method: ${e.method}`,"UNSUPPORTED_OPERATION",{operation:e.method,info:e})}async getBlockNumber(){const e=In(await this.#tt({method:"getBlockNumber"}),"%response");return this.#Ze>=0&&(this.#Ze=e),e}_getAddress(e){return Cr(e,this)}_getBlockTag(e){if(null==e)return"latest";switch(e){case"earliest":return"0x0";case"finalized":case"latest":case"pending":case"safe":return e}return dn(e)?dn(e,32)?e:Bn(e):("bigint"==typeof e&&(e=In(e,"blockTag")),"number"==typeof e?e>=0?Bn(e):this.#Ze>=0?Bn(this.#Ze+e):this.getBlockNumber().then((t=>Bn(t+e))):void nn(!1,"invalid blockTag","blockTag",e))}_getFilter(e){const t=(e.topics||[]).map((e=>null==e?null:Array.isArray(e)?Qd(e.map((e=>e.toLowerCase()))):e.toLowerCase())),n="blockHash"in e?e.blockHash:void 0,r=(e,r,a)=>{let s;switch(e.length){case 0:break;case 1:s=e[0];break;default:e.sort(),s=e}if(n&&(null!=r||null!=a))throw new Error("invalid filter");const i={};return s&&(i.address=s),t.length&&(i.topics=t),r&&(i.fromBlock=r),a&&(i.toBlock=a),n&&(i.blockHash=n),i};let a,s,i=[];if(e.address)if(Array.isArray(e.address))for(const t of e.address)i.push(this._getAddress(t));else i.push(this._getAddress(e.address));return"fromBlock"in e&&(a=this._getBlockTag(e.fromBlock)),"toBlock"in e&&(s=this._getBlockTag(e.toBlock)),i.filter((e=>"string"!=typeof e)).length||null!=a&&"string"!=typeof a||null!=s&&"string"!=typeof s?Promise.all([Promise.all(i),a,s]).then((e=>r(e[0],e[1],e[2]))):r(i,a,s)}_getTransactionRequest(e){const t=Ja(e),n=[];if(["to","from"].forEach((e=>{if(null==t[e])return;const r=Cr(t[e],this);Gd(r)?n.push(async function(){t[e]=await r}()):t[e]=r})),null!=t.blockTag){const e=this._getBlockTag(t.blockTag);Gd(e)?n.push(async function(){t.blockTag=await e}()):t.blockTag=e}return n.length?async function(){return await Promise.all(n),t}():t}async getNetwork(){if(null==this.#Je){const e=(async()=>{try{const e=await this._detectNetwork();return this.emit("network",e,null),e}catch(t){throw this.#Je===e&&(this.#Je=null),t}})();return this.#Je=e,(await e).clone()}const e=this.#Je,[t,n]=await Promise.all([e,this._detectNetwork()]);return t.chainId!==n.chainId&&(this.#qe?(this.emit("network",n,t),this.#Je===e&&(this.#Je=Promise.resolve(n))):tn(!1,`network changed: ${t.chainId} => ${n.chainId} `,"NETWORK_ERROR",{event:"changed"})),t.clone()}async getFeeData(){const e=await this.getNetwork(),t=async()=>{const{_block:t,gasPrice:n,priorityFee:r}=await qt({_block:this.#nt("latest",!1),gasPrice:(async()=>{try{return Sn(await this.#tt({method:"getGasPrice"}),"%response")}catch(e){}return null})(),priorityFee:(async()=>{try{return Sn(await this.#tt({method:"getPriorityFee"}),"%response")}catch(e){}return null})()});let a=null,s=null;const i=this._wrapBlock(t,e);return i&&i.baseFeePerGas&&(s=null!=r?r:BigInt("1000000000"),a=i.baseFeePerGas*_d+s),new Wa(n,a,s)},n=e.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");if(n){const e=new wu(n.url),r=await n.processFunc(t,this,e);return new Wa(r.gasPrice,r.maxFeePerGas,r.maxPriorityFeePerGas)}return await t()}async estimateGas(e){let t=this._getTransactionRequest(e);return Gd(t)&&(t=await t),Sn(await this.#tt({method:"estimateGas",transaction:t}),"%response")}async#rt(e,t,n){tn(n<10,"CCIP read exceeded maximum redirections","OFFCHAIN_FAULT",{reason:"TOO_MANY_REDIRECTS",transaction:Object.assign({},e,{blockTag:t,enableCcipRead:!0})});const r=Ja(e);try{return pn(await this._perform({method:"call",transaction:r,blockTag:t}))}catch(e){if(!this.disableCcipRead&&Xt(e)&&e.data&&n>=0&&"latest"===t&&null!=r.to&&"0x556f1830"===yn(e.data,0,4)){const a=e.data,s=await Cr(r.to,this);let i;try{i=function(e){const t={sender:"",urls:[],calldata:"",selector:"",extraData:"",errorArgs:[]};tn(mn(e)>=160,"insufficient OffchainLookup data","OFFCHAIN_FAULT",{reason:"insufficient OffchainLookup data"});const n=yn(e,0,32);tn(yn(n,0,12)===yn(nf,0,12),"corrupt OffchainLookup sender","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup sender"}),t.sender=yn(n,12);try{const n=[],r=In(yn(e,32,64)),a=In(yn(e,r,r+32)),s=yn(e,r+32);for(let e=0;e<a;e++){const t=Yd(s,32*e);if(null==t)throw new Error("abort");n.push(t)}t.urls=n}catch(e){tn(!1,"corrupt OffchainLookup urls","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup urls"})}try{const n=Zd(e,64);if(null==n)throw new Error("abort");t.calldata=n}catch(e){tn(!1,"corrupt OffchainLookup calldata","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup calldata"})}tn(yn(e,100,128)===yn(nf,0,28),"corrupt OffchainLookup callbaackSelector","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup callbaackSelector"}),t.selector=yn(e,96,100);try{const n=Zd(e,128);if(null==n)throw new Error("abort");t.extraData=n}catch(e){tn(!1,"corrupt OffchainLookup extraData","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup extraData"})}return t.errorArgs="sender,urls,calldata,selector,extraData".split(/,/).map((e=>t[e])),t}(yn(e.data,4))}catch(e){tn(!1,e.message,"OFFCHAIN_FAULT",{reason:"BAD_DATA",transaction:r,info:{data:a}})}tn(i.sender.toLowerCase()===s.toLowerCase(),"CCIP Read sender mismatch","CALL_EXCEPTION",{action:"call",data:a,reason:"OffchainLookup",transaction:r,invocation:null,revert:{signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",name:"OffchainLookup",args:i.errorArgs}});const o=await this.ccipReadFetch(r,i.calldata,i.urls);tn(null!=o,"CCIP Read failed to fetch data","OFFCHAIN_FAULT",{reason:"FETCH_FAILED",transaction:r,info:{data:e.data,errorArgs:i.errorArgs}});const l={to:s,data:gn([i.selector,tf([o,i.extraData])])};this.emit("debug",{action:"sendCcipReadCall",transaction:l});try{const e=await this.#rt(l,t,n+1);return this.emit("debug",{action:"receiveCcipReadCallResult",transaction:Object.assign({},l),result:e}),e}catch(e){throw this.emit("debug",{action:"receiveCcipReadCallError",transaction:Object.assign({},l),error:e}),e}}throw e}}async#at(e){const{value:t}=await qt({network:this.getNetwork(),value:e});return t}async call(e){const{tx:t,blockTag:n}=await qt({tx:this._getTransactionRequest(e),blockTag:this._getBlockTag(e.blockTag)});return await this.#at(this.#rt(t,n,e.enableCcipRead?0:-1))}async#st(e,t,n){let r=this._getAddress(t),a=this._getBlockTag(n);return"string"==typeof r&&"string"==typeof a||([r,a]=await Promise.all([r,a])),await this.#at(this.#tt(Object.assign(e,{address:r,blockTag:a})))}async getBalance(e,t){return Sn(await this.#st({method:"getBalance"},e,t),"%response")}async getTransactionCount(e,t){return In(await this.#st({method:"getTransactionCount"},e,t),"%response")}async getCode(e,t){return pn(await this.#st({method:"getCode"},e,t))}async getStorage(e,t,n){const r=Sn(t,"position");return pn(await this.#st({method:"getStorage",position:r},e,n))}async broadcastTransaction(e){const{blockNumber:t,hash:n,network:r}=await qt({blockNumber:this.getBlockNumber(),hash:this._perform({method:"broadcastTransaction",signedTransaction:e}),network:this.getNetwork()}),a=Ha.from(e);if(a.hash!==n)throw new Error("@TODO: the returned hash did not match");return this._wrapTransactionResponse(a,r).replaceableTransaction(t)}async#nt(e,t){if(dn(e,32))return await this.#tt({method:"getBlock",blockHash:e,includeTransactions:t});let n=this._getBlockTag(e);return"string"!=typeof n&&(n=await n),await this.#tt({method:"getBlock",blockTag:n,includeTransactions:t})}async getBlock(e,t){const{network:n,params:r}=await qt({network:this.getNetwork(),params:this.#nt(e,!!t)});return null==r?null:this._wrapBlock(r,n)}async getTransaction(e){const{network:t,params:n}=await qt({network:this.getNetwork(),params:this.#tt({method:"getTransaction",hash:e})});return null==n?null:this._wrapTransactionResponse(n,t)}async getTransactionReceipt(e){const{network:t,params:n}=await qt({network:this.getNetwork(),params:this.#tt({method:"getTransactionReceipt",hash:e})});if(null==n)return null;if(null==n.gasPrice&&null==n.effectiveGasPrice){const t=await this.#tt({method:"getTransaction",hash:e});if(null==t)throw new Error("report this; could not find tx or effectiveGasPrice");n.effectiveGasPrice=t.gasPrice}return this._wrapTransactionReceipt(n,t)}async getTransactionResult(e){const{result:t}=await qt({network:this.getNetwork(),result:this.#tt({method:"getTransactionResult",hash:e})});return null==t?null:pn(t)}async getLogs(e){let t=this._getFilter(e);Gd(t)&&(t=await t);const{network:n,params:r}=await qt({network:this.getNetwork(),params:this.#tt({method:"getLogs",filter:t})});return r.map((e=>this._wrapLog(e,n)))}_getProvider(e){tn(!1,"provider cannot connect to target network","UNSUPPORTED_OPERATION",{operation:"_getProvider()"})}async getResolver(e){return await hd.fromName(this,e)}async getAvatar(e){const t=await this.getResolver(e);return t?await t.getAvatar():null}async resolveName(e){const t=await this.getResolver(e);return t?await t.getAddress():null}async lookupAddress(e){const t=od((e=xr(e)).substring(2).toLowerCase()+".addr.reverse");try{const n=await hd.getEnsAddress(this),r=new nc(n,["function resolver(bytes32) view returns (address)"],this),a=await r.resolver(t);if(null==a||a===$r)return null;const s=new nc(a,["function name(bytes32) view returns (string)"],this),i=await s.name(t);return await this.resolveName(i)!==e?null:i}catch(e){if($t(e,"BAD_DATA")&&"0x"===e.value)return null;if($t(e,"CALL_EXCEPTION"))return null;throw e}}async waitForTransaction(e,t,n){const r=null!=t?t:1;return 0===r?this.getTransactionReceipt(e):new Promise((async(t,a)=>{let s=null;const i=async n=>{try{const a=await this.getTransactionReceipt(e);if(null!=a&&n-a.blockNumber+1>=r)return t(a),void(s&&(clearTimeout(s),s=null))}catch(e){console.log("EEE",e)}this.once("block",i)};null!=n&&(s=setTimeout((()=>{null!=s&&(s=null,this.off("block",i),a(en("timeout","TIMEOUT",{reason:"timeout"})))}),n)),i(await this.getBlockNumber())}))}async waitForBlock(e){tn(!1,"not implemented yet","NOT_IMPLEMENTED",{operation:"waitForBlock"})}_clearTimeout(e){const t=this.#Xe.get(e);t&&(t.timer&&clearTimeout(t.timer),this.#Xe.delete(e))}_setTimeout(e,t){null==t&&(t=0);const n=this.#$e++,r=()=>{this.#Xe.delete(n),e()};if(this.paused)this.#Xe.set(n,{timer:null,func:r,time:t});else{const e=setTimeout(r,t);this.#Xe.set(n,{timer:e,func:r,time:Wd()})}return n}_forEachSubscriber(e){for(const t of this.#Qe.values())e(t.subscriber)}_getSubscriber(e){switch(e.type){case"debug":case"error":case"network":return new Vd(e.type);case"block":{const e=new Ud(this);return e.pollingInterval=this.pollingInterval,e}case"safe":case"finalized":return new Dd(this,e.type);case"event":return new zd(this,e.filter);case"transaction":return new jd(this,e.hash);case"orphan":return new Md(this,e.filter)}throw new Error(`unsupported event: ${e.type}`)}_recoverSubscriber(e,t){for(const n of this.#Qe.values())if(n.subscriber===e){n.started&&n.subscriber.stop(),n.subscriber=t,n.started&&t.start(),null!=this.#Ke&&t.pause(this.#Ke);break}}async#it(e,t){let n=await Kd(e,this);return"event"===n.type&&t&&t.length>0&&!0===t[0].removed&&(n=await Kd({orphan:"drop-log",log:t[0]},this)),this.#Qe.get(n.tag)||null}async#ot(e){const t=await Kd(e,this),n=t.tag;let r=this.#Qe.get(n);return r||(r={subscriber:this._getSubscriber(t),tag:n,addressableMap:new WeakMap,nameMap:new Map,started:!1,listeners:[]},this.#Qe.set(n,r)),r}async on(e,t){const n=await this.#ot(e);return n.listeners.push({listener:t,once:!1}),n.started||(n.subscriber.start(),n.started=!0,null!=this.#Ke&&n.subscriber.pause(this.#Ke)),this}async once(e,t){const n=await this.#ot(e);return n.listeners.push({listener:t,once:!0}),n.started||(n.subscriber.start(),n.started=!0,null!=this.#Ke&&n.subscriber.pause(this.#Ke)),this}async emit(e,...t){const n=await this.#it(e,t);if(!n||0===n.listeners.length)return!1;const r=n.listeners.length;return n.listeners=n.listeners.filter((({listener:n,once:r})=>{const a=new Pu(this,r?null:n,e);try{n.call(this,...t,a)}catch(e){}return!r})),0===n.listeners.length&&(n.started&&n.subscriber.stop(),this.#Qe.delete(n.tag)),r>0}async listenerCount(e){if(e){const t=await this.#it(e);return t?t.listeners.length:0}let t=0;for(const{listeners:e}of this.#Qe.values())t+=e.length;return t}async listeners(e){if(e){const t=await this.#it(e);return t?t.listeners.map((({listener:e})=>e)):[]}let t=[];for(const{listeners:e}of this.#Qe.values())t=t.concat(e.map((({listener:e})=>e)));return t}async off(e,t){const n=await this.#it(e);if(!n)return this;if(t){const e=n.listeners.map((({listener:e})=>e)).indexOf(t);e>=0&&n.listeners.splice(e,1)}return t&&0!==n.listeners.length||(n.started&&n.subscriber.stop(),this.#Qe.delete(n.tag)),this}async removeAllListeners(e){if(e){const{tag:t,started:n,subscriber:r}=await this.#ot(e);n&&r.stop(),this.#Qe.delete(t)}else for(const[e,{started:t,subscriber:n}]of this.#Qe)t&&n.stop(),this.#Qe.delete(e);return this}async addListener(e,t){return await this.on(e,t)}async removeListener(e,t){return this.off(e,t)}get destroyed(){return this.#We}destroy(){this.removeAllListeners();for(const e of this.#Xe.keys())this._clearTimeout(e);this.#We=!0}get paused(){return null!=this.#Ke}set paused(e){!!e!==this.paused&&(this.paused?this.resume():this.pause(!1))}pause(e){if(this.#Ze=-1,null!=this.#Ke){if(this.#Ke==!!e)return;tn(!1,"cannot change pause type; resume first","UNSUPPORTED_OPERATION",{operation:"pause"})}this._forEachSubscriber((t=>t.pause(e))),this.#Ke=!!e;for(const e of this.#Xe.values())e.timer&&clearTimeout(e.timer),e.time=Wd()-e.time}resume(){if(null!=this.#Ke){this._forEachSubscriber((e=>e.resume())),this.#Ke=null;for(const e of this.#Xe.values()){let t=e.time;t<0&&(t=0),e.time=Wd(),setTimeout(e.func,t)}}}}function Yd(e,t){try{const n=Zd(e,t);if(n)return Tr(n)}catch(e){}return null}function Zd(e,t){if("0x"===e)return null;try{const n=In(yn(e,t,t+32)),r=In(yn(e,n,n+32));return yn(e,n+32,n+32+r)}catch(e){}return null}function $d(e){const t=On(e);if(t.length>32)throw new Error("internal; should not happen");const n=new Uint8Array(32);return n.set(t,32-t.length),n}function Xd(e){if(e.length%32==0)return e;const t=new Uint8Array(32*Math.ceil(e.length/32));return t.set(e),t}const ef=new Uint8Array([]);function tf(e){const t=[];let n=0;for(let r=0;r<e.length;r++)t.push(ef),n+=32;for(let r=0;r<e.length;r++){const a=un(e[r]);t[r]=$d(n),t.push($d(a.length)),t.push(Xd(a)),n+=32+32*Math.ceil(a.length/32)}return gn(t)}const nf="0x0000000000000000000000000000000000000000000000000000000000000000";class rf{#Fe;#lt;#De;#_e;#ut;#ct;constructor(e){this.#Fe=e,this.#lt=null,this.#De=this.#ze.bind(this),this.#_e=!1,this.#ut=null,this.#ct=!1}_subscribe(e){throw new Error("subclasses must override this")}_emitResults(e,t){throw new Error("subclasses must override this")}_recover(e){throw new Error("subclasses must override this")}async#ze(e){try{null==this.#lt&&(this.#lt=this._subscribe(this.#Fe));let e=null;try{e=await this.#lt}catch(e){if(!$t(e,"UNSUPPORTED_OPERATION")||"eth_newFilter"!==e.operation)throw e}if(null==e)return this.#lt=null,void this.#Fe._recoverSubscriber(this,this._recover(this.#Fe));const t=await this.#Fe.getNetwork();if(this.#ut||(this.#ut=t),this.#ut.chainId!==t.chainId)throw new Error("chaid changed");if(this.#ct)return;const n=await this.#Fe.send("eth_getFilterChanges",[e]);await this._emitResults(this.#Fe,n)}catch(e){console.log("@TODO",e)}this.#Fe.once("block",this.#De)}#dt(){const e=this.#lt;e&&(this.#lt=null,e.then((e=>{this.#Fe.destroyed||this.#Fe.send("eth_uninstallFilter",[e])})))}start(){this.#_e||(this.#_e=!0,this.#ze(-2))}stop(){this.#_e&&(this.#_e=!1,this.#ct=!0,this.#dt(),this.#Fe.off("block",this.#De))}pause(e){e&&this.#dt(),this.#Fe.off("block",this.#De)}resume(){this.start()}}class af extends rf{#ft;constructor(e,t){var n;super(e),this.#ft=(n=t,JSON.parse(JSON.stringify(n)))}_recover(e){return new zd(e,this.#ft)}async _subscribe(e){return await e.send("eth_newFilter",[this.#ft])}async _emitResults(e,t){for(const n of t)e.emit(this.#ft,e._wrapLog(n,e._network))}}class sf extends rf{async _subscribe(e){return await e.send("eth_newPendingTransactionFilter",[])}async _emitResults(e,t){for(const n of t)e.emit("pending",n)}}const of="bigint,boolean,function,number,string,symbol".split(/,/g);function lf(e){if(null==e||of.indexOf(typeof e)>=0)return e;if("function"==typeof e.getAddress)return e;if(Array.isArray(e))return e.map(lf);if("object"==typeof e)return Object.keys(e).reduce(((t,n)=>(t[n]=e[n],t)),{});throw new Error(`should not happen: ${e} (${typeof e})`)}function uf(e){return new Promise((t=>{setTimeout(t,e)}))}function cf(e){return e?e.toLowerCase():e}function df(e){return e&&"number"==typeof e.pollingInterval}const ff={polling:!1,staticNetwork:null,batchStallTime:10,batchMaxSize:1<<20,batchMaxCount:100,cacheTimeout:250,pollingInterval:4e3};class hf extends rs{address;constructor(e,t){super(e),Yt(this,{address:t=xr(t)})}connect(e){tn(!1,"cannot reconnect JsonRpcSigner","UNSUPPORTED_OPERATION",{operation:"signer.connect"})}async getAddress(){return this.address}async populateTransaction(e){return await this.populateCall(e)}async sendUncheckedTransaction(e){const t=lf(e),n=[];if(t.from){const r=t.from;n.push((async()=>{const n=await Cr(r,this.provider);nn(null!=n&&n.toLowerCase()===this.address.toLowerCase(),"from address mismatch","transaction",e),t.from=n})())}else t.from=this.address;if(null==t.gasLimit&&n.push((async()=>{t.gasLimit=await this.provider.estimateGas({...t,from:this.address})})()),null!=t.to){const e=t.to;n.push((async()=>{t.to=await Cr(e,this.provider)})())}n.length&&await Promise.all(n);const r=this.provider.getRpcTransaction(t);return this.provider.send("eth_sendTransaction",[r])}async sendTransaction(e){const t=await this.provider.getBlockNumber(),n=await this.sendUncheckedTransaction(e);return await new Promise(((e,r)=>{const a=[1e3,100];let s=0;const i=async()=>{try{const r=await this.provider.getTransaction(n);if(null!=r)return void e(r.replaceableTransaction(t))}catch(e){if($t(e,"CANCELLED")||$t(e,"BAD_DATA")||$t(e,"NETWORK_ERROR")||$t(e,"UNSUPPORTED_OPERATION"))return null==e.info&&(e.info={}),e.info.sendTransactionHash=n,void r(e);if($t(e,"INVALID_ARGUMENT")&&(s++,null==e.info&&(e.info={}),e.info.sendTransactionHash=n,s>10))return void r(e);this.provider.emit("error",en("failed to fetch transation after sending (will try again)","UNKNOWN_ERROR",{error:e}))}this.provider._setTimeout((()=>{i()}),a.pop()||4e3)};i()}))}async signTransaction(e){const t=lf(e);if(t.from){const n=await Cr(t.from,this.provider);nn(null!=n&&n.toLowerCase()===this.address.toLowerCase(),"from address mismatch","transaction",e),t.from=n}else t.from=this.address;const n=this.provider.getRpcTransaction(t);return await this.provider.send("eth_signTransaction",[n])}async signMessage(e){const t="string"==typeof e?Ir(e):e;return await this.provider.send("personal_sign",[pn(t),this.address.toLowerCase()])}async signTypedData(e,t,n){const r=lf(n),a=await Zr.resolveNames(e,t,r,(async e=>{const t=await Cr(e);return nn(null!=t,"TypedData does not support null address","value",e),t}));return await this.provider.send("eth_signTypedData_v4",[this.address.toLowerCase(),JSON.stringify(Zr.getPayload(a.domain,t,a.value))])}async unlock(e){return this.provider.send("personal_unlockAccount",[this.address.toLowerCase(),e,null])}async _legacySignMessage(e){const t="string"==typeof e?Ir(e):e;return await this.provider.send("eth_sign",[this.address.toLowerCase(),pn(t)])}}class pf extends qd{#W;#ht;#pt;#gt;#mt;#ut;#yt;#wt(){if(this.#gt)return;const e=1===this._getOption("batchMaxCount")?0:this._getOption("batchStallTime");this.#gt=setTimeout((()=>{this.#gt=null;const e=this.#pt;for(this.#pt=[];e.length;){const t=[e.shift()];for(;e.length&&t.length!==this.#W.batchMaxCount;)if(t.push(e.shift()),JSON.stringify(t.map((e=>e.payload))).length>this.#W.batchMaxSize){e.unshift(t.pop());break}(async()=>{const e=1===t.length?t[0].payload:t.map((e=>e.payload));this.emit("debug",{action:"sendRpcPayload",payload:e});try{const n=await this._send(e);this.emit("debug",{action:"receiveRpcResult",result:n});for(const{resolve:e,reject:r,payload:a}of t){if(this.destroyed){r(en("provider destroyed; cancelled request","UNSUPPORTED_OPERATION",{operation:a.method}));continue}const t=n.filter((e=>e.id===a.id))[0];if(null!=t)"error"in t?r(this.getRpcError(a,t)):e(t.result);else{const e=en("missing response for request","BAD_DATA",{value:n,info:{payload:a}});this.emit("error",e),r(e)}}}catch(e){this.emit("debug",{action:"receiveRpcError",error:e});for(const{reject:n}of t)n(e)}})()}}),e)}constructor(e,t){super(e,t),this.#ht=1,this.#W=Object.assign({},ff,t||{}),this.#pt=[],this.#gt=null,this.#ut=null,this.#yt=null;{let e=null;const t=new Promise((t=>{e=t}));this.#mt={promise:t,resolve:e}}const n=this._getOption("staticNetwork");"boolean"==typeof n?(nn(!n||"any"!==e,"staticNetwork cannot be used on special network 'any'","options",t),n&&null!=e&&(this.#ut=Id.from(e))):n&&(nn(null==e||n.matches(e),"staticNetwork MUST match network object","options",t),this.#ut=n)}_getOption(e){return this.#W[e]}get _network(){return tn(this.#ut,"network is not available yet","NETWORK_ERROR"),this.#ut}async _perform(e){if("call"===e.method||"estimateGas"===e.method){let t=e.transaction;if(t&&null!=t.type&&Sn(t.type)&&null==t.maxFeePerGas&&null==t.maxPriorityFeePerGas){const n=await this.getFeeData();null==n.maxFeePerGas&&null==n.maxPriorityFeePerGas&&(e=Object.assign({},e,{transaction:Object.assign({},t,{type:void 0})}))}}const t=this.getRpcRequest(e);return null!=t?await this.send(t.method,t.args):super._perform(e)}async _detectNetwork(){const e=this._getOption("staticNetwork");if(e){if(!0!==e)return e;if(this.#ut)return this.#ut}return this.#yt?await this.#yt:this.ready?(this.#yt=(async()=>{try{const e=Id.from(Sn(await this.send("eth_chainId",[])));return this.#yt=null,e}catch(e){throw this.#yt=null,e}})(),await this.#yt):(this.#yt=(async()=>{const e={id:this.#ht++,method:"eth_chainId",params:[],jsonrpc:"2.0"};let t;this.emit("debug",{action:"sendRpcPayload",payload:e});try{t=(await this._send(e))[0],this.#yt=null}catch(e){throw this.#yt=null,this.emit("debug",{action:"receiveRpcError",error:e}),e}if(this.emit("debug",{action:"receiveRpcResult",result:t}),"result"in t)return Id.from(Sn(t.result));throw this.getRpcError(e,t)})(),await this.#yt)}_start(){null!=this.#mt&&null!=this.#mt.resolve&&(this.#mt.resolve(),this.#mt=null,(async()=>{for(;null==this.#ut&&!this.destroyed;)try{this.#ut=await this._detectNetwork()}catch(e){if(this.destroyed)break;console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)"),this.emit("error",en("failed to bootstrap network detection","NETWORK_ERROR",{event:"initial-network-discovery",info:{error:e}})),await uf(1e3)}this.#wt()})())}async _waitUntilReady(){if(null!=this.#mt)return await this.#mt.promise}_getSubscriber(e){return"pending"===e.type?new sf(this):"event"===e.type?this._getOption("polling")?new zd(this,e.filter):new af(this,e.filter):"orphan"===e.type&&"drop-log"===e.filter.orphan?new Vd("orphan"):super._getSubscriber(e)}get ready(){return null==this.#mt}getRpcTransaction(e){const t={};return["chainId","gasLimit","gasPrice","type","maxFeePerGas","maxPriorityFeePerGas","nonce","value"].forEach((n=>{if(null==e[n])return;let r=n;"gasLimit"===n&&(r="gas"),t[r]=Bn(Sn(e[n],`tx.${n}`))})),["from","to","data"].forEach((n=>{null!=e[n]&&(t[n]=pn(e[n]))})),e.accessList&&(t.accessList=ka(e.accessList)),e.blobVersionedHashes&&(t.blobVersionedHashes=e.blobVersionedHashes.map((e=>e.toLowerCase()))),e.authorizationList&&(t.authorizationList=e.authorizationList.map((e=>{const t=xa(e);return{address:t.address,nonce:Bn(t.nonce),chainId:Bn(t.chainId),yParity:Bn(t.signature.yParity),r:Bn(t.signature.r),s:Bn(t.signature.s)}}))),t}getRpcRequest(e){switch(e.method){case"chainId":return{method:"eth_chainId",args:[]};case"getBlockNumber":return{method:"eth_blockNumber",args:[]};case"getGasPrice":return{method:"eth_gasPrice",args:[]};case"getPriorityFee":return{method:"eth_maxPriorityFeePerGas",args:[]};case"getBalance":return{method:"eth_getBalance",args:[cf(e.address),e.blockTag]};case"getTransactionCount":return{method:"eth_getTransactionCount",args:[cf(e.address),e.blockTag]};case"getCode":return{method:"eth_getCode",args:[cf(e.address),e.blockTag]};case"getStorage":return{method:"eth_getStorageAt",args:[cf(e.address),"0x"+e.position.toString(16),e.blockTag]};case"broadcastTransaction":return{method:"eth_sendRawTransaction",args:[e.signedTransaction]};case"getBlock":if("blockTag"in e)return{method:"eth_getBlockByNumber",args:[e.blockTag,!!e.includeTransactions]};if("blockHash"in e)return{method:"eth_getBlockByHash",args:[e.blockHash,!!e.includeTransactions]};break;case"getTransaction":return{method:"eth_getTransactionByHash",args:[e.hash]};case"getTransactionReceipt":return{method:"eth_getTransactionReceipt",args:[e.hash]};case"call":return{method:"eth_call",args:[this.getRpcTransaction(e.transaction),e.blockTag]};case"estimateGas":return{method:"eth_estimateGas",args:[this.getRpcTransaction(e.transaction)]};case"getLogs":return e.filter&&null!=e.filter.address&&(Array.isArray(e.filter.address)?e.filter.address=e.filter.address.map(cf):e.filter.address=cf(e.filter.address)),{method:"eth_getLogs",args:[e.filter]}}return null}getRpcError(e,t){const{method:n}=e,{error:r}=t;if("eth_estimateGas"===n&&r.message){const t=r.message;if(!t.match(/revert/i)&&t.match(/insufficient funds/i))return en("insufficient funds","INSUFFICIENT_FUNDS",{transaction:e.params[0],info:{payload:e,error:r}});if(t.match(/nonce/i)&&t.match(/too low/i))return en("nonce has already been used","NONCE_EXPIRED",{transaction:e.params[0],info:{payload:e,error:r}})}if("eth_call"===n||"eth_estimateGas"===n){const t=yf(r),a=iu.getBuiltinCallException("eth_call"===n?"call":"estimateGas",e.params[0],t?t.data:null);return a.info={error:r,payload:e},a}const a=JSON.stringify(function(e){const t=[];return wf(e,t),t}(r));if("string"==typeof r.message&&r.message.match(/user denied|ethers-user-denied/i))return en("user rejected action","ACTION_REJECTED",{action:{eth_sign:"signMessage",personal_sign:"signMessage",eth_signTypedData_v4:"signTypedData",eth_signTransaction:"signTransaction",eth_sendTransaction:"sendTransaction",eth_requestAccounts:"requestAccess",wallet_requestAccounts:"requestAccess"}[n]||"unknown",reason:"rejected",info:{payload:e,error:r}});if("eth_sendRawTransaction"===n||"eth_sendTransaction"===n){const t=e.params[0];if(a.match(/insufficient funds|base fee exceeds gas limit/i))return en("insufficient funds for intrinsic transaction cost","INSUFFICIENT_FUNDS",{transaction:t,info:{error:r}});if(a.match(/nonce/i)&&a.match(/too low/i))return en("nonce has already been used","NONCE_EXPIRED",{transaction:t,info:{error:r}});if(a.match(/replacement transaction/i)&&a.match(/underpriced/i))return en("replacement fee too low","REPLACEMENT_UNDERPRICED",{transaction:t,info:{error:r}});if(a.match(/only replay-protected/i))return en("legacy pre-eip-155 transactions not supported","UNSUPPORTED_OPERATION",{operation:n,info:{transaction:t,info:{error:r}}})}let s=!!a.match(/the method .* does not exist/i);return s||r&&r.details&&r.details.startsWith("Unauthorized method:")&&(s=!0),s?en("unsupported operation","UNSUPPORTED_OPERATION",{operation:e.method,info:{error:r,payload:e}}):en("could not coalesce error","UNKNOWN_ERROR",{error:r,payload:e})}send(e,t){if(this.destroyed)return Promise.reject(en("provider destroyed; cancelled request","UNSUPPORTED_OPERATION",{operation:e}));const n=this.#ht++,r=new Promise(((r,a)=>{this.#pt.push({resolve:r,reject:a,payload:{method:e,params:t,id:n,jsonrpc:"2.0"}})}));return this.#wt(),r}async getSigner(e){null==e&&(e=0);const t=this.send("eth_accounts",[]);if("number"==typeof e){const n=await t;if(e>=n.length)throw new Error("no such account");return new hf(this,n[e])}const{accounts:n}=await qt({network:this.getNetwork(),accounts:t});e=xr(e);for(const t of n)if(xr(t)===e)return new hf(this,e);throw new Error("invalid account")}async listAccounts(){return(await this.send("eth_accounts",[])).map((e=>new hf(this,e)))}destroy(){this.#gt&&(clearTimeout(this.#gt),this.#gt=null);for(const{payload:e,reject:t}of this.#pt)t(en("provider destroyed; cancelled request","UNSUPPORTED_OPERATION",{operation:e.method}));this.#pt=[],super.destroy()}}class gf extends pf{#bt;constructor(e,t){super(e,t);let n=this._getOption("pollingInterval");null==n&&(n=ff.pollingInterval),this.#bt=n}_getSubscriber(e){const t=super._getSubscriber(e);return df(t)&&(t.pollingInterval=this.#bt),t}get pollingInterval(){return this.#bt}set pollingInterval(e){if(!Number.isInteger(e)||e<0)throw new Error("invalid interval");this.#bt=e,this._forEachSubscriber((e=>{df(e)&&(e.pollingInterval=this.#bt)}))}}class mf extends gf{#vt;constructor(e,t,n){null==e&&(e="http://localhost:8545"),super(t,n),this.#vt="string"==typeof e?new wu(e):e.clone()}_getConnection(){return this.#vt.clone()}async send(e,t){return await this._start(),await super.send(e,t)}async _send(e){const t=this._getConnection();t.body=JSON.stringify(e),t.setHeader("content-type","application/json");const n=await t.send();n.assertOk();let r=n.bodyJson;return Array.isArray(r)||(r=[r]),r}}function yf(e){if(null==e)return null;if("string"==typeof e.message&&e.message.match(/revert/i)&&dn(e.data))return{message:e.message,data:e.data};if("object"==typeof e){for(const t in e){const n=yf(e[t]);if(n)return n}return null}if("string"==typeof e)try{return yf(JSON.parse(e))}catch(e){}return null}function wf(e,t){if(null!=e){if("string"==typeof e.message&&t.push(e.message),"object"==typeof e)for(const n in e)wf(e[n],t);if("string"==typeof e)try{return wf(JSON.parse(e),t)}catch(e){}}}const bf=BigInt(-1),vf=BigInt(0),Af=BigInt(1),Ef=BigInt(5),kf={};let xf="0000";for(;xf.length<80;)xf+=xf;function Nf(e){let t=xf;for(;t.length<e;)t+=t;return BigInt("1"+t.substring(0,e))}function Sf(e,t,n){const r=BigInt(t.width);if(t.signed){const t=Af<<r-Af;tn(null==n||e>=-t&&e<t,"overflow","NUMERIC_FAULT",{operation:n,fault:"overflow",value:e}),e=e>vf?kn(Nn(e,r),r):-kn(Nn(-e,r),r)}else{const t=Af<<r;tn(null==n||e>=0&&e<t,"overflow","NUMERIC_FAULT",{operation:n,fault:"overflow",value:e}),e=(e%t+t)%t&t-Af}return e}function Cf(e){"number"==typeof e&&(e=`fixed128x${e}`);let t=!0,n=128,r=18;if("string"==typeof e)if("fixed"===e);else if("ufixed"===e)t=!1;else{const a=e.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);nn(a,"invalid fixed format","format",e),t="u"!==a[1],n=parseInt(a[2]),r=parseInt(a[3])}else if(e){const a=e,s=(e,t,n)=>null==a[e]?n:(nn(typeof a[e]===t,"invalid fixed format ("+e+" not "+t+")","format."+e,a[e]),a[e]);t=s("signed","boolean",t),n=s("width","number",n),r=s("decimals","number",r)}return nn(n%8==0,"invalid FixedNumber width (not byte aligned)","format.width",n),nn(r<=80,"invalid FixedNumber decimals (too large)","format.decimals",r),{signed:t,width:n,decimals:r,name:(t?"":"u")+"fixed"+String(n)+"x"+String(r)}}class Pf{format;#At;#Et;#kt;_value;constructor(e,t,n){on(e,kf,"FixedNumber"),this.#Et=t,this.#At=n;const r=function(e,t){let n="";e<vf&&(n="-",e*=bf);let r=e.toString();if(0===t)return n+r;for(;r.length<=t;)r=xf+r;const a=r.length-t;for(r=r.substring(0,a)+"."+r.substring(a);"0"===r[0]&&"."!==r[1];)r=r.substring(1);for(;"0"===r[r.length-1]&&"."!==r[r.length-2];)r=r.substring(0,r.length-1);return n+r}(t,n.decimals);Yt(this,{format:n.name,_value:r}),this.#kt=Nf(n.decimals)}get signed(){return this.#At.signed}get width(){return this.#At.width}get decimals(){return this.#At.decimals}get value(){return this.#Et}#xt(e){nn(this.format===e.format,"incompatible format; use fixedNumber.toFormat","other",e)}#Nt(e,t){return e=Sf(e,this.#At,t),new Pf(kf,e,this.#At)}#St(e,t){return this.#xt(e),this.#Nt(this.#Et+e.#Et,t)}addUnsafe(e){return this.#St(e)}add(e){return this.#St(e,"add")}#Ct(e,t){return this.#xt(e),this.#Nt(this.#Et-e.#Et,t)}subUnsafe(e){return this.#Ct(e)}sub(e){return this.#Ct(e,"sub")}#Pt(e,t){return this.#xt(e),this.#Nt(this.#Et*e.#Et/this.#kt,t)}mulUnsafe(e){return this.#Pt(e)}mul(e){return this.#Pt(e,"mul")}mulSignal(e){this.#xt(e);const t=this.#Et*e.#Et;return tn(t%this.#kt===vf,"precision lost during signalling mul","NUMERIC_FAULT",{operation:"mulSignal",fault:"underflow",value:this}),this.#Nt(t/this.#kt,"mulSignal")}#Rt(e,t){return tn(e.#Et!==vf,"division by zero","NUMERIC_FAULT",{operation:"div",fault:"divide-by-zero",value:this}),this.#xt(e),this.#Nt(this.#Et*this.#kt/e.#Et,t)}divUnsafe(e){return this.#Rt(e)}div(e){return this.#Rt(e,"div")}divSignal(e){tn(e.#Et!==vf,"division by zero","NUMERIC_FAULT",{operation:"div",fault:"divide-by-zero",value:this}),this.#xt(e);const t=this.#Et*this.#kt;return tn(t%e.#Et===vf,"precision lost during signalling div","NUMERIC_FAULT",{operation:"divSignal",fault:"underflow",value:this}),this.#Nt(t/e.#Et,"divSignal")}cmp(e){let t=this.value,n=e.value;const r=this.decimals-e.decimals;return r>0?n*=Nf(r):r<0&&(t*=Nf(-r)),t<n?-1:t>n?1:0}eq(e){return 0===this.cmp(e)}lt(e){return this.cmp(e)<0}lte(e){return this.cmp(e)<=0}gt(e){return this.cmp(e)>0}gte(e){return this.cmp(e)>=0}floor(){let e=this.#Et;return this.#Et<vf&&(e-=this.#kt-Af),e=this.#Et/this.#kt*this.#kt,this.#Nt(e,"floor")}ceiling(){let e=this.#Et;return this.#Et>vf&&(e+=this.#kt-Af),e=this.#Et/this.#kt*this.#kt,this.#Nt(e,"ceiling")}round(e){if(null==e&&(e=0),e>=this.decimals)return this;const t=this.decimals-e,n=Ef*Nf(t-1);let r=this.value+n;const a=Nf(t);return r=r/a*a,Sf(r,this.#At,"round"),new Pf(kf,r,this.#At)}isZero(){return this.#Et===vf}isNegative(){return this.#Et<vf}toString(){return this._value}toUnsafeFloat(){return parseFloat(this.toString())}toFormat(e){return Pf.fromString(this.toString(),e)}static fromValue(e,t,n){const r=null==t?0:In(t),a=Cf(n);let s=Sn(e,"value");const i=r-a.decimals;if(i>0){const t=Nf(i);tn(s%t===vf,"value loses precision for format","NUMERIC_FAULT",{operation:"fromValue",fault:"underflow",value:e}),s/=t}else i<0&&(s*=Nf(-i));return Sf(s,a,"fromValue"),new Pf(kf,s,a)}static fromString(e,t){const n=e.match(/^(-?)([0-9]*)\.?([0-9]*)$/);nn(n&&n[2].length+n[3].length>0,"invalid FixedNumber string value","value",e);const r=Cf(t);let a=n[2]||"0",s=n[3]||"";for(;s.length<r.decimals;)s+=xf;tn(s.substring(r.decimals).match(/^0*$/),"too many decimals for format","NUMERIC_FAULT",{operation:"fromString",fault:"underflow",value:e}),s=s.substring(0,r.decimals);const i=BigInt(n[1]+a+s);return Sf(i,r,"fromString"),new Pf(kf,i,r)}static fromBytes(e,t){let n=Rn(un(e,"value"));const r=Cf(t);return r.signed&&(n=kn(n,r.width)),Sf(n,r,"fromBytes"),new Pf(kf,n,r)}}const Rf=["wei","kwei","mwei","gwei","szabo","finney","ether"];function If(e,t){let n=18;if("string"==typeof t){const e=Rf.indexOf(t);nn(e>=0,"invalid unit","unit",t),n=3*e}else null!=t&&(n=In(t,"unit"));return Pf.fromValue(e,n,{decimals:n,width:512}).toString()}function Tf(e,t){nn("string"==typeof e,"value must be a string","value",e);let n=18;if("string"==typeof t){const e=Rf.indexOf(t);nn(e>=0,"invalid unit","unit",t),n=3*e}else null!=t&&(n=In(t,"unit"));return Pf.fromString(e,{decimals:n,width:512}).value}function Of(e){return If(e,18)}function Bf(e){return Tf(e,18)}const Lf="wallet_session",Uf=async e=>{const t={wallet:{address:e.address,privateKey:e.privateKey,...e instanceof yo&&e.mnemonic?.phrase?{mnemonic:e.mnemonic.phrase}:{}},timestamp:Date.now(),lastActivity:Date.now()};"undefined"!=typeof chrome&&chrome.storage?.session?await chrome.storage.session.set({[Lf]:t}):sessionStorage.setItem(Lf,JSON.stringify(t))},Ff=async()=>{try{"undefined"!=typeof chrome&&chrome.storage?.session?await chrome.storage.session.remove(Lf):sessionStorage.removeItem(Lf)}catch(e){console.error("Error clearing session:",e)}},Df=(0,u.createContext)(void 0),Mf=({children:e})=>{const[t,n]=(0,u.useState)(null),[r,a]=(0,u.useState)("0"),[s,i]=(0,u.useState)("sepolia"),[l,c]=(0,u.useState)(!0);(0,u.useEffect)((()=>{d()}),[]),(0,u.useEffect)((()=>{t&&f()}),[t,s]);const d=async()=>{try{const e=await(async()=>{try{let e=null;if("undefined"!=typeof chrome&&chrome.storage?.session)e=(await chrome.storage.session.get(Lf))[Lf]||null;else{const t=sessionStorage.getItem(Lf);e=t?JSON.parse(t):null}if(!e)return null;const t=Date.now();return t-e.lastActivity>9e5?(await Ff(),null):(e.lastActivity=t,"undefined"!=typeof chrome&&chrome.storage?.session?await chrome.storage.session.set({[Lf]:e}):sessionStorage.setItem(Lf,JSON.stringify(e)),e)}catch(e){return console.error("Error getting session:",e),null}})();if(e)return n(e.wallet),void c(!1);if(await Co())return void c(!1)}catch(e){console.error("Error initializing wallet:",e)}c(!1)},f=async()=>{if(t)try{const e=ko[s],n=await(async(e,t)=>{try{const n=new mf(t);return Of(await n.getBalance(e))}catch(e){return console.error("Error getting balance:",e),"0"}})(t.address,e.rpcUrl);a(n)}catch(e){console.error("Error refreshing balance:",e),a("0")}},h={wallet:t,balance:r,network:s,isLoading:l,createWallet:async(e,t)=>{try{const r=new Eo(e),a={address:r.address,privateKey:r.privateKey},s=await xo(e,t);await So({address:a.address,encryptedPrivateKey:s}),await Uf(r),n(a)}catch(e){throw console.error("Error creating wallet:",e),e}},importWallet:async(e,t)=>{try{let r;r=e.split(" ").length>=12?Eo.fromPhrase(e):new Eo(e);const a={address:r.address,privateKey:r.privateKey,...r instanceof yo&&r.mnemonic?.phrase?{mnemonic:r.mnemonic.phrase}:{}},s=await xo(r.privateKey,t);await So({address:a.address,encryptedPrivateKey:s,...a.mnemonic?{mnemonic:a.mnemonic}:{}}),await Uf(r),n(a)}catch(e){throw console.error("Error importing wallet:",e),e}},switchNetwork:async e=>{i(e),t&&await f()},refreshBalance:f,logout:async()=>{await Ff(),n(null),a("0")}};return(0,o.jsx)(Df.Provider,{value:h,children:e})},jf=()=>{const e=(0,u.useContext)(Df);if(!e)throw new Error("useWallet must be used within a WalletProvider");return e},zf=()=>{const[e,t]=(0,u.useState)("welcome"),[n,r]=(0,u.useState)(""),[a,s]=(0,u.useState)(""),[i,l]=(0,u.useState)(null),[c,d]=(0,u.useState)(""),[f,h]=(0,u.useState)([]),[p,g]=(0,u.useState)({}),[m,y]=(0,u.useState)([]),[w,b]=(0,u.useState)(!1),[v,A]=(0,u.useState)(""),[E,k]=(0,u.useState)(!1),[x,N]=(0,u.useState)(!1),{createWallet:S}=jf(),C=ee();return"welcome"===e?(0,o.jsx)("div",{className:"create-wallet",children:(0,o.jsxs)("div",{className:"welcome-screen",children:[(0,o.jsxs)("div",{className:"logo",children:[(0,o.jsx)("div",{className:"wallet-icon",children:"👛"}),(0,o.jsx)("h1",{children:"Ethereum Wallet"})]}),(0,o.jsxs)("div",{className:"welcome-content",children:[(0,o.jsx)("h2",{children:"Welcome to your new wallet"}),(0,o.jsx)("p",{children:"Create a secure Ethereum wallet to store, send, and receive ETH and tokens."}),(0,o.jsxs)("div",{className:"features",children:[(0,o.jsxs)("div",{className:"feature",children:[(0,o.jsx)("span",{className:"feature-icon",children:"🔒"}),(0,o.jsx)("span",{children:"Secure & Private"})]}),(0,o.jsxs)("div",{className:"feature",children:[(0,o.jsx)("span",{className:"feature-icon",children:"🌐"}),(0,o.jsx)("span",{children:"Multi-Network Support"})]}),(0,o.jsxs)("div",{className:"feature",children:[(0,o.jsx)("span",{className:"feature-icon",children:"📱"}),(0,o.jsx)("span",{children:"Easy to Use"})]})]})]}),(0,o.jsxs)("div",{className:"welcome-actions",children:[(0,o.jsx)("button",{onClick:()=>t("create"),className:"primary-button",children:"Create New Wallet"}),(0,o.jsx)("button",{onClick:()=>C("/import"),className:"secondary-button",children:"Import Existing Wallet"})]})]})}):"create"===e?(0,o.jsx)("div",{className:"create-wallet",children:(0,o.jsxs)("div",{className:"create-form",children:[(0,o.jsx)("button",{onClick:()=>t("welcome"),className:"back-button",children:"← Back"}),(0,o.jsx)("h2",{children:"Create Password"}),(0,o.jsx)("p",{children:"This password will encrypt your wallet on this device."}),(0,o.jsxs)("form",{onSubmit:e=>{e.preventDefault(),(async()=>{if(n===a)if(n.length<8)A("Password must be at least 8 characters long");else if(E){b(!0),A("");try{const e=Eo.createRandom(),n=e.mnemonic?.phrase||"";l(e),d(n),h(n.split(" "));const r=[];for(;r.length<3;){const e=Math.floor(12*Math.random());r.includes(e)||r.push(e)}y(r.sort(((e,t)=>e-t))),t("backup")}catch(e){console.error("Error creating wallet:",e),A("Failed to create wallet. Please try again.")}finally{b(!1)}}else A("Please agree to the terms and conditions");else A("Passwords do not match")})()},children:[(0,o.jsxs)("div",{className:"form-group",children:[(0,o.jsx)("label",{htmlFor:"password",children:"Password"}),(0,o.jsx)("input",{type:"password",id:"password",value:n,onChange:e=>r(e.target.value),placeholder:"Enter a strong password",minLength:8,required:!0})]}),(0,o.jsxs)("div",{className:"form-group",children:[(0,o.jsx)("label",{htmlFor:"confirmPassword",children:"Confirm Password"}),(0,o.jsx)("input",{type:"password",id:"confirmPassword",value:a,onChange:e=>s(e.target.value),placeholder:"Confirm your password",minLength:8,required:!0})]}),(0,o.jsx)("div",{className:"checkbox-group",children:(0,o.jsxs)("label",{className:"checkbox-label",children:[(0,o.jsx)("input",{type:"checkbox",checked:E,onChange:e=>k(e.target.checked),required:!0}),(0,o.jsx)("span",{className:"checkmark"}),"I agree to the terms and understand that this wallet is for educational purposes only"]})}),v&&(0,o.jsx)("div",{className:"error-message",children:v}),(0,o.jsx)("button",{type:"submit",disabled:w||!n||!a||!E,className:"primary-button",children:w?"Creating Wallet...":"Create Wallet"})]})]})}):"backup"===e?(0,o.jsx)("div",{className:"create-wallet",children:(0,o.jsxs)("div",{className:"backup-screen",children:[(0,o.jsx)("h2",{children:"🔐 Backup Your Wallet"}),(0,o.jsx)("div",{className:"warning-box",children:(0,o.jsxs)("p",{children:[(0,o.jsx)("strong",{children:"⚠️ Important:"})," Write down these 12 words in order and keep them safe. This is the only way to recover your wallet."]})}),(0,o.jsx)("div",{className:"mnemonic-display",children:(0,o.jsx)("div",{className:"mnemonic-grid",children:f.map(((e,t)=>(0,o.jsxs)("div",{className:"mnemonic-word",children:[(0,o.jsx)("span",{className:"word-number",children:t+1}),(0,o.jsx)("span",{className:"word-text",children:e})]},t)))})}),(0,o.jsxs)("div",{className:"backup-actions",children:[(0,o.jsx)("button",{onClick:()=>(async e=>{try{await navigator.clipboard.writeText(e)}catch(e){console.error("Failed to copy to clipboard:",e)}})(c),className:"secondary-button",children:"📋 Copy to Clipboard"}),(0,o.jsx)("button",{onClick:()=>{const e={mnemonic:c,address:i?.address,createdAt:(new Date).toISOString()},t=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),n=URL.createObjectURL(t),r=document.createElement("a");r.href=n,r.download=`wallet-backup-${Date.now()}.json`,document.body.appendChild(r),r.click(),document.body.removeChild(r),URL.revokeObjectURL(n)},className:"secondary-button",children:"💾 Download Backup"})]}),(0,o.jsx)("div",{className:"checkbox-group",children:(0,o.jsxs)("label",{className:"checkbox-label",children:[(0,o.jsx)("input",{type:"checkbox",checked:x,onChange:e=>N(e.target.checked),required:!0}),(0,o.jsx)("span",{className:"checkmark"}),"I have safely stored my backup phrase"]})}),(0,o.jsx)("button",{onClick:()=>t("confirm"),disabled:!x,className:"primary-button",children:"Continue"})]})}):"confirm"===e?(0,o.jsx)("div",{className:"create-wallet",children:(0,o.jsxs)("div",{className:"confirm-screen",children:[(0,o.jsx)("h2",{children:"✅ Confirm Your Backup"}),(0,o.jsx)("p",{children:"Please enter the following words from your backup phrase:"}),(0,o.jsx)("div",{className:"confirm-form",children:m.map((e=>(0,o.jsxs)("div",{className:"form-group",children:[(0,o.jsxs)("label",{children:["Word #",e+1]}),(0,o.jsx)("input",{type:"text",value:p[e]||"",onChange:t=>g({...p,[e]:t.target.value}),placeholder:`Enter word #${e+1}`,autoComplete:"off"})]},e)))}),v&&(0,o.jsx)("div",{className:"error-message",children:v}),(0,o.jsxs)("div",{className:"confirm-actions",children:[(0,o.jsx)("button",{onClick:()=>t("backup"),className:"secondary-button",children:"← Back to Backup"}),(0,o.jsx)("button",{onClick:()=>{m.every((e=>p[e]?.toLowerCase().trim()===f[e]?.toLowerCase()))?(t("confirm"),A("")):A("Incorrect words. Please check your backup phrase.")},disabled:m.some((e=>!p[e])),className:"secondary-button",children:"Verify Words"})]}),(0,o.jsx)("div",{className:"checkbox-group",children:(0,o.jsxs)("label",{className:"checkbox-label",children:[(0,o.jsx)("input",{type:"checkbox",checked:x,onChange:e=>N(e.target.checked),required:!0}),(0,o.jsx)("span",{className:"checkmark"}),"I confirm that I have verified and saved my backup phrase"]})}),(0,o.jsx)("button",{onClick:async()=>{if(i&&x){b(!0);try{await S(i.privateKey,n),C("/wallet")}catch(e){console.error("Error saving wallet:",e),A("Failed to save wallet. Please try again.")}finally{b(!1)}}else A("Please complete all steps")},disabled:w||!x,className:"primary-button",children:w?"Setting up...":"Complete Setup"})]})}):null},_f=({onWalletImported:e})=>{const[t,n]=(0,u.useState)(""),[r,a]=(0,u.useState)(""),[s,i]=(0,u.useState)(""),[l,c]=(0,u.useState)(""),[d,f]=(0,u.useState)(!1),[h,p]=(0,u.useState)(!1),{importWallet:g}=jf(),m=async n=>{if(n.preventDefault(),r===s)if(r.length<8)c("Password must be at least 8 characters");else{f(!0),c("");try{await g(t.trim(),r),e&&e()}catch(e){console.error("Import error:",e),c("Invalid seed phrase or encryption error")}finally{f(!1)}}else c("Passwords do not match")},y=async()=>{try{const e=Eo.createRandom();n(e.mnemonic?.phrase||""),p(!0)}catch(e){c("Error generating wallet")}};return(0,o.jsxs)("div",{children:[(0,o.jsx)("h2",{children:"Welcome to Spartex Wallet"}),h?(0,o.jsxs)("div",{children:[(0,o.jsx)("h3",{children:"New Wallet Created"}),(0,o.jsxs)("div",{children:[(0,o.jsx)("strong",{children:"Your Seed Phrase:"}),(0,o.jsx)("p",{children:t}),(0,o.jsx)("small",{children:"⚠️ Save this seed phrase securely! You'll need it to recover your wallet."})]}),(0,o.jsxs)("form",{onSubmit:m,children:[(0,o.jsx)("div",{children:(0,o.jsx)("input",{type:"password",placeholder:"Create password",value:r,onChange:e=>a(e.target.value),required:!0})}),(0,o.jsx)("div",{children:(0,o.jsx)("input",{type:"password",placeholder:"Confirm password",value:s,onChange:e=>i(e.target.value),required:!0})}),l&&(0,o.jsx)("div",{children:l}),(0,o.jsx)("button",{type:"submit",disabled:d,children:d?"Creating Wallet...":"Create Wallet"})]}),(0,o.jsx)("button",{onClick:y,children:"Generate New Seed Phrase"})]}):(0,o.jsxs)("div",{children:[(0,o.jsx)("h3",{children:"Import Existing Wallet"}),(0,o.jsxs)("form",{onSubmit:m,children:[(0,o.jsx)("div",{children:(0,o.jsx)("textarea",{placeholder:"Enter your 12-word seed phrase",value:t,onChange:e=>n(e.target.value),rows:3,required:!0})}),(0,o.jsx)("div",{children:(0,o.jsx)("input",{type:"password",placeholder:"Create password",value:r,onChange:e=>a(e.target.value),required:!0})}),(0,o.jsx)("div",{children:(0,o.jsx)("input",{type:"password",placeholder:"Confirm password",value:s,onChange:e=>i(e.target.value),required:!0})}),l&&(0,o.jsx)("div",{children:l}),(0,o.jsx)("button",{type:"submit",disabled:d,children:d?"Importing...":"Import Wallet"})]}),(0,o.jsx)("div",{children:(0,o.jsx)("span",{children:"or"})}),(0,o.jsx)("button",{onClick:y,children:"Create New Wallet"})]})]})},Gf=()=>{const[e,t]=(0,u.useState)(""),[n,r]=(0,u.useState)(!1),[a,s]=(0,u.useState)(""),i=ee();return(0,o.jsx)("div",{className:"unlock-wallet",children:(0,o.jsxs)("div",{className:"unlock-form",children:[(0,o.jsx)("h2",{children:"Unlock Wallet"}),(0,o.jsx)("p",{children:"Enter your password to unlock your wallet"}),(0,o.jsxs)("form",{onSubmit:async t=>{t.preventDefault(),r(!0),s("");try{const t=await Co();if(!t)throw new Error("No wallet found");const n=await(async(e,t)=>{const n=new Uint8Array(atob(e).split("").map((e=>e.charCodeAt(0)))),r=n.slice(0,16),a=n.slice(16,28),s=n.slice(28),i=(new TextEncoder).encode(t),o=await crypto.subtle.importKey("raw",i,{name:"PBKDF2"},!1,["deriveBits","deriveKey"]),l=await crypto.subtle.deriveKey({name:"PBKDF2",salt:r,iterations:1e5,hash:"SHA-256"},o,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),u=await crypto.subtle.decrypt({name:"AES-GCM",iv:a},l,s);return(new TextDecoder).decode(u)})(t.encryptedPrivateKey,e),r=new Eo(n);await Uf(r),i("/wallet")}catch(e){console.error("Error unlocking wallet:",e),s("Invalid password")}finally{r(!1)}},children:[(0,o.jsxs)("div",{className:"form-group",children:[(0,o.jsx)("label",{htmlFor:"password",children:"Password"}),(0,o.jsx)("input",{type:"password",id:"password",value:e,onChange:e=>t(e.target.value),placeholder:"Enter your password",required:!0})]}),a&&(0,o.jsx)("div",{className:"error-message",children:a}),(0,o.jsx)("button",{type:"submit",disabled:n||!e,className:"primary-button",children:n?"Unlocking...":"Unlock Wallet"})]}),(0,o.jsx)("div",{className:"unlock-actions",children:(0,o.jsx)("button",{onClick:()=>i("/"),className:"secondary-button",children:"Create New Wallet"})})]})})},Hf=()=>{const[e,t]=(0,u.useState)(!1),{network:n,switchNetwork:r}=jf(),a=ko[n];return(0,o.jsxs)("div",{className:"network-selector",children:[(0,o.jsxs)("button",{className:"network-button",onClick:()=>t(!e),children:[(0,o.jsxs)("div",{className:"network-info",children:[(0,o.jsx)("div",{className:`network-dot ${n}`}),(0,o.jsx)("span",{className:"network-name",children:a.name})]}),(0,o.jsx)("span",{className:"dropdown-arrow "+(e?"open":""),children:"▼"})]}),e&&(0,o.jsx)("div",{className:"network-dropdown",children:Object.entries(ko).map((([e,a])=>(0,o.jsxs)("button",{className:"network-option "+(n===e?"active":""),onClick:()=>(async e=>{try{await r(e),t(!1)}catch(e){console.error("Failed to switch network:",e)}})(e),children:[(0,o.jsx)("div",{className:`network-dot ${e}`}),(0,o.jsxs)("div",{className:"network-details",children:[(0,o.jsx)("span",{className:"network-name",children:a.name}),(0,o.jsxs)("span",{className:"network-chain",children:["Chain ID: ",a.chainId]})]}),n===e&&(0,o.jsx)("span",{className:"check-mark",children:"✓"})]},e)))}),e&&(0,o.jsx)("div",{className:"network-overlay",onClick:()=>t(!1)})]})},Vf=()=>{const[e,t]=(0,u.useState)(!1),[n,r]=(0,u.useState)(!1),{wallet:a,balance:s,network:i,isLoading:l,refreshBalance:c,logout:d}=jf(),f=ee();if(!a)return(0,o.jsx)("div",{className:"wallet-container",children:(0,o.jsx)("div",{className:"error-message",children:"Wallet not found. Please create or import a wallet."})});const h=async e=>{try{await navigator.clipboard.writeText(e),r(!0),setTimeout((()=>r(!1)),2e3)}catch(e){console.error("Failed to copy:",e)}};return(0,o.jsxs)("div",{className:"wallet-container",children:[(0,o.jsxs)("div",{className:"wallet-header",children:[(0,o.jsxs)("div",{className:"wallet-title",children:[(0,o.jsx)("h1",{children:"My Wallet"}),(0,o.jsx)("button",{onClick:()=>{window.confirm("Are you sure you want to logout? Make sure you have saved your private key.")&&(d(),f("/"))},className:"logout-button",children:"Logout"})]}),(0,o.jsx)(Hf,{})]}),(0,o.jsxs)("div",{className:"wallet-info",children:[(0,o.jsxs)("div",{className:"address-section",children:[(0,o.jsx)("label",{children:"Wallet Address"}),(0,o.jsxs)("div",{className:"address-display",children:[(0,o.jsx)("span",{className:"address",children:(p=a.address,`${p.slice(0,6)}...${p.slice(-4)}`)}),(0,o.jsx)("button",{onClick:()=>h(a.address),className:"copy-button",title:"Copy full address",children:n?"✓":"📋"})]}),(0,o.jsx)("div",{className:"full-address",children:(0,o.jsx)("small",{children:a.address})})]}),(0,o.jsxs)("div",{className:"balance-section",children:[(0,o.jsxs)("div",{className:"balance-display",children:[(0,o.jsx)("h2",{children:l?"Loading...":`${parseFloat(s).toFixed(6)} ETH`}),(0,o.jsx)("button",{onClick:c,disabled:l,className:"refresh-button",title:"Refresh balance",children:l?"↻":"🔄"})]}),(0,o.jsxs)("p",{className:"network-info",children:["on ",i.charAt(0).toUpperCase()+i.slice(1)]})]})]}),(0,o.jsxs)("div",{className:"wallet-actions",children:[(0,o.jsx)("button",{onClick:()=>f("/send"),className:"action-button send-button",disabled:parseFloat(s)<=0,children:"📤 Send"}),(0,o.jsx)("button",{onClick:()=>f("/history"),className:"action-button history-button",children:"📋 History"}),(0,o.jsx)("button",{onClick:()=>h(a.address),className:"action-button receive-button",children:"📥 Receive"})]}),(0,o.jsxs)("div",{className:"private-key-section",children:[(0,o.jsxs)("div",{className:"private-key-header",children:[(0,o.jsx)("h3",{children:"Private Key"}),(0,o.jsx)("button",{onClick:()=>t(!e),className:"toggle-button",children:e?"🙈 Hide":"👁️ Show"})]}),e&&(0,o.jsxs)("div",{className:"private-key-display",children:[(0,o.jsx)("div",{className:"warning",children:"⚠️ Never share your private key with anyone!"}),(0,o.jsxs)("div",{className:"private-key-value",children:[(0,o.jsx)("code",{children:a.privateKey}),(0,o.jsx)("button",{onClick:()=>h(a.privateKey),className:"copy-button",children:"📋"})]})]})]}),(0,o.jsx)("div",{className:"wallet-footer",children:(0,o.jsx)("small",{children:"Always keep your private key safe and never share it with anyone. This extension stores your keys locally in your browser."})})]});var p},Qf=e=>{try{return function(e){try{return xr(e),!0}catch(e){}return!1}(e)}catch{return!1}},Kf=()=>{const[e,t]=(0,u.useState)(""),[n,r]=(0,u.useState)(""),[a,s]=(0,u.useState)(null),[i,l]=(0,u.useState)(!1),[c,d]=(0,u.useState)(""),[f,h]=(0,u.useState)(""),[p,g]=(0,u.useState)(""),{wallet:m,balance:y,network:w,refreshBalance:b}=jf(),v=ee();(0,u.useEffect)((()=>{e&&n&&Qf(e)&&parseFloat(n)>0?A():s(null)}),[e,n,w]);const A=async()=>{if(m)try{const t=ko[w],r=await(async(e,t,n,r)=>{try{const a=new mf(r),s=await a.estimateGas({from:e,to:t,value:Bf(n)}),i=(await a.getFeeData()).gasPrice||Tf("20","gwei"),o=s*i;return{gasLimit:s.toString(),gasPrice:If(i,"gwei"),totalCost:Of(o)}}catch(e){throw console.error("Error estimating gas:",e),e}})(m.address,e,n,t.rpcUrl);s(r)}catch(e){console.error("Gas estimation error:",e),s(null)}},E=()=>{if(p){const e={mainnet:"https://etherscan.io/tx/",goerli:"https://goerli.etherscan.io/tx/",sepolia:"https://sepolia.etherscan.io/tx/"}[w]+p;window.open(e,"_blank")}};return(0,o.jsxs)("div",{children:[(0,o.jsxs)("div",{children:[(0,o.jsx)("button",{onClick:()=>v(-1),children:"← Back"}),(0,o.jsx)("h2",{children:"Send Transaction"})]}),(0,o.jsx)("div",{children:(0,o.jsxs)("p",{children:["Available Balance: ",(0,o.jsxs)("strong",{children:[parseFloat(y).toFixed(6)," ETH"]})]})}),(0,o.jsxs)("form",{onSubmit:async a=>{if(a.preventDefault(),!m)return void d("Wallet not found");if(!Qf(e))return void d("Invalid recipient address");const i=parseFloat(n),o=parseFloat(y);if(i<=0)d("Amount must be greater than 0");else if(i>o)d("Insufficient balance");else{l(!0),d(""),h("");try{const a=ko[w],i=await(async(e,t,n,r)=>{try{const a=new mf(r),s=new Eo(e,a);return(await s.sendTransaction({to:t,value:Bf(n)})).hash}catch(e){throw console.error("Error sending transaction:",e),e}})(m.privateKey,e,n,a.rpcUrl);g(i),h("Transaction sent successfully!"),await b(),t(""),r(""),s(null)}catch(e){console.error("Send transaction error:",e),d(e.message||"Failed to send transaction")}finally{l(!1)}}},children:[(0,o.jsxs)("div",{children:[(0,o.jsx)("label",{htmlFor:"recipient",children:"Recipient Address"}),(0,o.jsx)("input",{type:"text",id:"recipient",value:e,onChange:e=>t(e.target.value),placeholder:"0x...",required:!0}),e&&!Qf(e)&&(0,o.jsx)("span",{children:"Invalid address format"})]}),(0,o.jsxs)("div",{children:[(0,o.jsx)("label",{htmlFor:"amount",children:"Amount (ETH)"}),(0,o.jsxs)("div",{children:[(0,o.jsx)("input",{type:"number",id:"amount",value:n,onChange:e=>r(e.target.value),placeholder:"0.0",step:"0.000001",min:"0",required:!0}),(0,o.jsx)("button",{type:"button",onClick:()=>{const e=parseFloat(y);if(a){const t=Math.max(0,e-parseFloat(a.totalCost));r(t.toFixed(6))}else r((.95*e).toFixed(6))},children:"MAX"})]})]}),a&&(0,o.jsxs)("div",{children:[(0,o.jsx)("h3",{children:"Transaction Details"}),(0,o.jsxs)("div",{children:[(0,o.jsxs)("p",{children:["Gas Limit: ",parseInt(a.gasLimit).toLocaleString()]}),(0,o.jsxs)("p",{children:["Gas Price: ",(parseFloat(a.gasPrice)/1e9).toFixed(2)," Gwei"]}),(0,o.jsxs)("p",{children:["Network Fee: ~",parseFloat(a.totalCost).toFixed(6)," ETH"]}),(0,o.jsx)("p",{children:(0,o.jsxs)("strong",{children:["Total: ",(parseFloat(n||"0")+parseFloat(a.totalCost)).toFixed(6)," ETH"]})})]})]}),c&&(0,o.jsx)("div",{children:c}),f&&(0,o.jsxs)("div",{children:[(0,o.jsx)("p",{children:f}),p&&(0,o.jsxs)("div",{children:[(0,o.jsx)("p",{children:"Transaction Hash:"}),(0,o.jsxs)("code",{onClick:E,children:[p.slice(0,10),"...",p.slice(-8)]}),(0,o.jsx)("button",{type:"button",onClick:E,children:"View on Explorer"})]})]}),(0,o.jsx)("button",{type:"submit",disabled:i||!e||!n||!Qf(e),children:i?"Sending...":"Send Transaction"})]})]})},Wf=async(e,t)=>{try{const n=await fetch(e,{...t,headers:{"Content-Type":"application/json",...t?.headers}});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);return await n.json()}catch(e){throw console.error("Background fetch error:",e),e}},Jf={mainnet:"QZBXYCHZ1F7SR7XF941AP63GE12D91H4DS",sepolia:"QZBXYCHZ1F7SR7XF941AP63GE12D91H4DS"},qf={mainnet:"https://api.etherscan.io/api",sepolia:"https://api-sepolia.etherscan.io/api"},Yf=()=>{const[e,t]=(0,u.useState)([]),[n,r]=(0,u.useState)(!0),[a,s]=(0,u.useState)(""),[i,l]=(0,u.useState)(!1),{wallet:c,network:d}=jf(),f=ee();(0,u.useEffect)((()=>{c&&h()}),[c,d]);const h=async()=>{if(c)try{s(""),r(!0);const e=await(async(e,t)=>{try{const n=qf[t],r=Jf[t];if(!r||r.includes("Your"))return console.warn("Etherscan API key not configured"),[];const a=`${n}?module=account&action=txlist&address=${e}&startblock=0&endblock=99999999&page=1&offset=50&sort=desc&apikey=${r}`,s=`${n}?module=account&action=txlistinternal&address=${e}&startblock=0&endblock=99999999&page=1&offset=50&sort=desc&apikey=${r}`,[i,o]=await Promise.all([Wf(a),Wf(s).catch((()=>({status:"0",result:[]})))]);if("1"!==i.status)throw new Error(i.message||"Failed to fetch transactions");const l=i.result||[],u="1"===o.status&&o.result||[];return[...l,...u].map((t=>{const n=t.to&&t.to.toLowerCase()===e.toLowerCase(),r=t.value?(parseFloat(t.value)/1e18).toString():"0";return{hash:t.hash,from:t.from,to:t.to,value:r,gasUsed:t.gasUsed,gasPrice:t.gasPrice,timestamp:parseInt(t.timeStamp),status:"0"===t.isError?"success":"failed",type:n?"received":"sent"}})).filter(((e,t,n)=>t===n.findIndex((t=>t.hash===e.hash)))).sort(((e,t)=>t.timestamp-e.timestamp))}catch(e){throw console.error("Error fetching transaction history:",e),e}})(c.address,d);t(e)}catch(e){console.error("Error loading transactions:",e),s(e.message||"Failed to load transaction history")}finally{r(!1)}},p=e=>e?`${e.slice(0,6)}...${e.slice(-4)}`:"Unknown",g=e=>{const t=parseFloat(e);return 0===t?"0":t<1e-6?t.toExponential(3):t.toFixed(6)},m=e=>{switch(e){case"success":return"✅";case"failed":return"❌";case"pending":return"⏳";default:return"❓"}},y=(e,t)=>{if(!e||!t)return null;const n=parseInt(e),r=parseFloat(t)/1e9;return`${n.toLocaleString()} × ${r.toFixed(2)} Gwei`};return n?(0,o.jsxs)("div",{children:[(0,o.jsxs)("div",{children:[(0,o.jsx)("button",{onClick:()=>f(-1),children:"← Back"}),(0,o.jsx)("h2",{children:"Transaction History"})]}),(0,o.jsx)("div",{children:"Loading transactions..."})]}):(0,o.jsxs)("div",{children:[(0,o.jsxs)("div",{children:[(0,o.jsx)("button",{onClick:()=>f(-1),children:"← Back"}),(0,o.jsx)("h2",{children:"Transaction History"}),(0,o.jsx)("button",{onClick:async()=>{l(!0),await h(),l(!1)},disabled:i,children:i?"↻":"🔄"})]}),a&&(0,o.jsxs)("div",{children:[(0,o.jsxs)("p",{children:["❌ ",a]}),(0,o.jsx)("button",{onClick:h,children:"Retry"})]}),0!==e.length||a?(0,o.jsx)("div",{children:e.map((e=>{return(0,o.jsxs)("div",{style:{border:"1px solid #ccc",margin:"10px 0",padding:"15px",borderRadius:"8px",backgroundColor:"received"===e.type?"#f0f8f0":"#f8f0f0"},children:[(0,o.jsxs)("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center"},children:[(0,o.jsxs)("div",{children:[(0,o.jsxs)("div",{style:{display:"flex",alignItems:"center",gap:"10px"},children:[(0,o.jsx)("span",{style:{fontWeight:"bold"},children:"sent"===e.type?"↗️ Sent":"↙️ Received"}),(0,o.jsxs)("span",{style:{fontWeight:"bold",color:"sent"===e.type?"#d32f2f":"#2e7d32"},children:["sent"===e.type?"-":"+",g(e.value)," ETH"]})]}),(0,o.jsxs)("div",{style:{margin:"8px 0",fontSize:"14px",color:"#666"},children:[(0,o.jsxs)("div",{children:["From: ",p(e.from)]}),(0,o.jsxs)("div",{children:["To: ",e.to?p(e.to):"Contract Creation"]})]}),(0,o.jsxs)("div",{style:{display:"flex",justifyContent:"space-between",fontSize:"12px",color:"#888"},children:[(0,o.jsx)("span",{children:(t=e.timestamp,new Date(1e3*t).toLocaleDateString("en-US",{year:"numeric",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"}))}),(0,o.jsxs)("span",{children:[m(e.status)," ",e.status||"unknown"]})]})]}),(0,o.jsx)("button",{onClick:()=>(e=>{const t=`${ko[d].blockExplorer}/tx/${e}`;window.open(t,"_blank")})(e.hash),title:"View on block explorer",style:{background:"none",border:"1px solid #ccc",borderRadius:"4px",padding:"5px 10px",cursor:"pointer"},children:"🔗"})]}),e.gasUsed&&e.gasPrice&&(0,o.jsxs)("div",{style:{marginTop:"8px",fontSize:"12px",color:"#666"},children:["Gas: ",y(e.gasUsed,e.gasPrice)]}),(0,o.jsxs)("div",{style:{marginTop:"8px",fontSize:"11px",color:"#999",fontFamily:"monospace"},children:[e.hash.slice(0,20),"...",e.hash.slice(-10)]})]},e.hash);var t}))}):(0,o.jsxs)("div",{children:[(0,o.jsx)("p",{children:"No transactions found"}),(0,o.jsx)("p",{children:"Send your first transaction to see it here"})]})]})},Zf=()=>{const{wallet:e,isLoading:t}=jf();return t?(0,o.jsxs)("div",{className:"loading-screen",children:[(0,o.jsx)("div",{className:"loading-spinner"}),(0,o.jsx)("p",{children:"Loading..."})]}):(0,o.jsx)(he,{children:e?(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(de,{path:"/wallet",element:(0,o.jsx)(Vf,{})}),(0,o.jsx)(de,{path:"/send",element:(0,o.jsx)(Kf,{})}),(0,o.jsx)(de,{path:"/history",element:(0,o.jsx)(Yf,{})}),(0,o.jsx)(de,{path:"*",element:(0,o.jsx)(ce,{to:"/wallet",replace:!0})})]}):(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(de,{path:"/",element:(0,o.jsx)(zf,{})}),(0,o.jsx)(de,{path:"/import",element:(0,o.jsx)(_f,{})}),(0,o.jsx)(de,{path:"/unlock",element:(0,o.jsx)(Gf,{})}),(0,o.jsx)(de,{path:"*",element:(0,o.jsx)(ce,{to:"/",replace:!0})})]})})},$f=()=>(0,o.jsx)(Mf,{children:(0,o.jsx)(we,{children:(0,o.jsx)("div",{className:"app",children:(0,o.jsx)(Zf,{})})})}),Xf=document.getElementById("root");Xf&&(0,l.H)(Xf).render((0,o.jsx)($f,{}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,